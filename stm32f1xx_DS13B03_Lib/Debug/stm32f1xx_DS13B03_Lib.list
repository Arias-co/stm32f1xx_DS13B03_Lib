
stm32f1xx_DS13B03_Lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08006df8  08006df8  00016df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007100  08007100  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  08007100  08007100  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007100  08007100  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800710c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a8  20000350  0800745c  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  200015f8  0800745c  000215f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028d8e  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005184  00000000  00000000  00049107  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ba7e  00000000  00000000  0004e28b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f00  00000000  00000000  00059d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016b0  00000000  00000000  0005ac10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001f618  00000000  00000000  0005c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00012b01  00000000  00000000  0007b8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009b967  00000000  00000000  0008e3d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00129d40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036d4  00000000  00000000  00129dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ddc 	.word	0x08006ddc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	08006ddc 	.word	0x08006ddc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <DS18B20_StartAll>:

    return 1;
}

void DS18B20_StartAll( OneWire_t * OneWire )
{
 8001030:	b510      	push	{r4, lr}
 8001032:	4604      	mov	r4, r0
    /* Reset pulse */
    OneWire_Reset( OneWire );
 8001034:	f000 fa22 	bl	800147c <OneWire_Reset>
    /* Skip rom */
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_SKIPROM );
 8001038:	4620      	mov	r0, r4
 800103a:	21cc      	movs	r1, #204	; 0xcc
 800103c:	f000 fa79 	bl	8001532 <OneWire_WriteByte>
    /* Start conversion on all connected devices */
    OneWire_WriteByte( OneWire, DS18B20_CMD_CONVERTTEMP );
 8001040:	4620      	mov	r0, r4
}
 8001042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    OneWire_WriteByte( OneWire, DS18B20_CMD_CONVERTTEMP );
 8001046:	2144      	movs	r1, #68	; 0x44
 8001048:	f000 ba73 	b.w	8001532 <OneWire_WriteByte>

0800104c <DS18B20_Read>:

uint8_t DS18B20_Read( OneWire_t * OneWire, uint8_t * ROM,
        float * destination )
{
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
}

uint8_t DS18B20_Is( uint8_t * ROM )
{
    /* Checks if first byte is equal to DS18B20's family code */
    if ( *ROM == DS18B20_FAMILY_CODE )
 800104e:	780b      	ldrb	r3, [r1, #0]
{
 8001050:	b085      	sub	sp, #20
    if ( *ROM == DS18B20_FAMILY_CODE )
 8001052:	2b28      	cmp	r3, #40	; 0x28
{
 8001054:	4607      	mov	r7, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4616      	mov	r6, r2
    if ( *ROM == DS18B20_FAMILY_CODE )
 800105a:	d002      	beq.n	8001062 <DS18B20_Read+0x16>
        return 0;
 800105c:	2000      	movs	r0, #0
}
 800105e:	b005      	add	sp, #20
 8001060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( !OneWire_ReadBit( OneWire ) )
 8001062:	f000 fa4a 	bl	80014fa <OneWire_ReadBit>
 8001066:	2800      	cmp	r0, #0
 8001068:	d0f8      	beq.n	800105c <DS18B20_Read+0x10>
    OneWire_Reset( OneWire );
 800106a:	4638      	mov	r0, r7
 800106c:	f000 fa06 	bl	800147c <OneWire_Reset>
    OneWire_SelectWithPointer( OneWire, ROM );
 8001070:	4621      	mov	r1, r4
 8001072:	4638      	mov	r0, r7
 8001074:	f000 fafb 	bl	800166e <OneWire_SelectWithPointer>
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_RSCRATCHPAD );
 8001078:	21be      	movs	r1, #190	; 0xbe
 800107a:	4638      	mov	r0, r7
 800107c:	f000 fa59 	bl	8001532 <OneWire_WriteByte>
 8001080:	2400      	movs	r4, #0
        data[i] = OneWire_ReadByte( OneWire );
 8001082:	ad01      	add	r5, sp, #4
 8001084:	4638      	mov	r0, r7
 8001086:	f000 fa64 	bl	8001552 <OneWire_ReadByte>
 800108a:	5528      	strb	r0, [r5, r4]
 800108c:	3401      	adds	r4, #1
    for ( i = 0; i < 9; i++ )
 800108e:	2c09      	cmp	r4, #9
 8001090:	d1f8      	bne.n	8001084 <DS18B20_Read+0x38>
    crc = OneWire_CRC8( data, 8 );
 8001092:	2108      	movs	r1, #8
 8001094:	4628      	mov	r0, r5
 8001096:	f000 faf7 	bl	8001688 <OneWire_CRC8>
    if ( crc != data[8] )
 800109a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800109e:	4283      	cmp	r3, r0
 80010a0:	d1dc      	bne.n	800105c <DS18B20_Read+0x10>
    temperature = data[0] | ( data[1] << 8 );
 80010a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80010a6:	f89d 5004 	ldrb.w	r5, [sp, #4]
    OneWire_Reset( OneWire );
 80010aa:	4638      	mov	r0, r7
    temperature = data[0] | ( data[1] << 8 );
 80010ac:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 80010b0:	b22d      	sxth	r5, r5
 80010b2:	b2ac      	uxth	r4, r5
    OneWire_Reset( OneWire );
 80010b4:	f000 f9e2 	bl	800147c <OneWire_Reset>
    if ( temperature & 0x8000 )
 80010b8:	2d00      	cmp	r5, #0
        temperature = ~temperature + 1;
 80010ba:	bfbc      	itt	lt
 80010bc:	4264      	neglt	r4, r4
 80010be:	b2a4      	uxthlt	r4, r4
    digit |= ( ( temperature >> 8 ) & 0x7 ) << 4;
 80010c0:	ea4f 1714 	mov.w	r7, r4, lsr #4
 80010c4:	f007 0370 	and.w	r3, r7, #112	; 0x70
 80010c8:	f344 1707 	sbfx	r7, r4, #4, #8
 80010cc:	ea47 0703 	orr.w	r7, r7, r3
    resolution = ( ( data[4] & 0x60 ) >> 5 ) + 9;
 80010d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
        minus = 1;
 80010d4:	bfb8      	it	lt
 80010d6:	2501      	movlt	r5, #1
    resolution = ( ( data[4] & 0x60 ) >> 5 ) + 9;
 80010d8:	f3c3 1341 	ubfx	r3, r3, #5, #2
    switch ( resolution )
 80010dc:	f103 0309 	add.w	r3, r3, #9
    int8_t digit, minus = 0;
 80010e0:	bfa8      	it	ge
 80010e2:	2500      	movge	r5, #0
    switch ( resolution )
 80010e4:	2b0b      	cmp	r3, #11
 80010e6:	d021      	beq.n	800112c <DS18B20_Read+0xe0>
 80010e8:	2b0c      	cmp	r3, #12
 80010ea:	d026      	beq.n	800113a <DS18B20_Read+0xee>
 80010ec:	2b0a      	cmp	r3, #10
 80010ee:	d016      	beq.n	800111e <DS18B20_Read+0xd2>
        decimal = ( temperature >> 3 ) & 0x01;
 80010f0:	f3c4 00c0 	ubfx	r0, r4, #3, #1
 80010f4:	f7ff fd82 	bl	8000bfc <__aeabi_i2f>
        decimal *= (float) DS18B20_DECIMAL_STEPS_9BIT;
 80010f8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
        decimal *= (float) DS18B20_DECIMAL_STEPS_12BIT;
 80010fc:	f7ff fdd2 	bl	8000ca4 <__aeabi_fmul>
 8001100:	4604      	mov	r4, r0
    decimal = digit + decimal;
 8001102:	4638      	mov	r0, r7
 8001104:	f7ff fd7a 	bl	8000bfc <__aeabi_i2f>
 8001108:	4621      	mov	r1, r4
 800110a:	f7ff fcc3 	bl	8000a94 <__addsf3>
    if ( minus )
 800110e:	b11d      	cbz	r5, 8001118 <DS18B20_Read+0xcc>
        decimal = 0 - decimal;
 8001110:	4601      	mov	r1, r0
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fcbc 	bl	8000a90 <__aeabi_fsub>
    *destination = decimal;
 8001118:	6030      	str	r0, [r6, #0]
    return 1;
 800111a:	2001      	movs	r0, #1
 800111c:	e79f      	b.n	800105e <DS18B20_Read+0x12>
        decimal = ( temperature >> 2 ) & 0x03;
 800111e:	f3c4 0081 	ubfx	r0, r4, #2, #2
 8001122:	f7ff fd6b 	bl	8000bfc <__aeabi_i2f>
        decimal *= (float) DS18B20_DECIMAL_STEPS_10BIT;
 8001126:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800112a:	e7e7      	b.n	80010fc <DS18B20_Read+0xb0>
        decimal = ( temperature >> 1 ) & 0x07;
 800112c:	f3c4 0042 	ubfx	r0, r4, #1, #3
 8001130:	f7ff fd64 	bl	8000bfc <__aeabi_i2f>
        decimal *= (float) DS18B20_DECIMAL_STEPS_11BIT;
 8001134:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8001138:	e7e0      	b.n	80010fc <DS18B20_Read+0xb0>
        decimal = temperature & 0x0F;
 800113a:	f004 000f 	and.w	r0, r4, #15
 800113e:	f7ff fd5d 	bl	8000bfc <__aeabi_i2f>
        decimal *= (float) DS18B20_DECIMAL_STEPS_12BIT;
 8001142:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001146:	e7d9      	b.n	80010fc <DS18B20_Read+0xb0>

08001148 <DS18B20_SetResolution>:
{
 8001148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ( *ROM == DS18B20_FAMILY_CODE )
 800114c:	780b      	ldrb	r3, [r1, #0]
{
 800114e:	4604      	mov	r4, r0
    if ( *ROM == DS18B20_FAMILY_CODE )
 8001150:	2b28      	cmp	r3, #40	; 0x28
{
 8001152:	460e      	mov	r6, r1
 8001154:	4691      	mov	r9, r2
    if ( *ROM == DS18B20_FAMILY_CODE )
 8001156:	d15c      	bne.n	8001212 <DS18B20_SetResolution+0xca>
    OneWire_Reset( OneWire );
 8001158:	f000 f990 	bl	800147c <OneWire_Reset>
    OneWire_SelectWithPointer( OneWire, ROM );
 800115c:	4631      	mov	r1, r6
 800115e:	4620      	mov	r0, r4
 8001160:	f000 fa85 	bl	800166e <OneWire_SelectWithPointer>
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_RSCRATCHPAD );
 8001164:	21be      	movs	r1, #190	; 0xbe
 8001166:	4620      	mov	r0, r4
 8001168:	f000 f9e3 	bl	8001532 <OneWire_WriteByte>
    OneWire_ReadByte( OneWire );
 800116c:	4620      	mov	r0, r4
 800116e:	f000 f9f0 	bl	8001552 <OneWire_ReadByte>
    OneWire_ReadByte( OneWire );
 8001172:	4620      	mov	r0, r4
 8001174:	f000 f9ed 	bl	8001552 <OneWire_ReadByte>
    th = OneWire_ReadByte( OneWire );
 8001178:	4620      	mov	r0, r4
 800117a:	f000 f9ea 	bl	8001552 <OneWire_ReadByte>
 800117e:	4680      	mov	r8, r0
    tl = OneWire_ReadByte( OneWire );
 8001180:	4620      	mov	r0, r4
 8001182:	f000 f9e6 	bl	8001552 <OneWire_ReadByte>
 8001186:	4607      	mov	r7, r0
    conf = OneWire_ReadByte( OneWire );
 8001188:	4620      	mov	r0, r4
 800118a:	f000 f9e2 	bl	8001552 <OneWire_ReadByte>
    if ( resolution == DS18B20_Resolution_9bits )
 800118e:	f1b9 0f09 	cmp.w	r9, #9
    conf = OneWire_ReadByte( OneWire );
 8001192:	4605      	mov	r5, r0
    if ( resolution == DS18B20_Resolution_9bits )
 8001194:	d126      	bne.n	80011e4 <DS18B20_SetResolution+0x9c>
        conf &= ~( 1 << DS18B20_RESOLUTION_R0 );
 8001196:	f000 059f 	and.w	r5, r0, #159	; 0x9f
    OneWire_Reset( OneWire );
 800119a:	4620      	mov	r0, r4
 800119c:	f000 f96e 	bl	800147c <OneWire_Reset>
    OneWire_SelectWithPointer( OneWire, ROM );
 80011a0:	4631      	mov	r1, r6
 80011a2:	4620      	mov	r0, r4
 80011a4:	f000 fa63 	bl	800166e <OneWire_SelectWithPointer>
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_WSCRATCHPAD );
 80011a8:	214e      	movs	r1, #78	; 0x4e
 80011aa:	4620      	mov	r0, r4
 80011ac:	f000 f9c1 	bl	8001532 <OneWire_WriteByte>
    OneWire_WriteByte( OneWire, th );
 80011b0:	4641      	mov	r1, r8
 80011b2:	4620      	mov	r0, r4
 80011b4:	f000 f9bd 	bl	8001532 <OneWire_WriteByte>
    OneWire_WriteByte( OneWire, tl );
 80011b8:	4639      	mov	r1, r7
 80011ba:	4620      	mov	r0, r4
 80011bc:	f000 f9b9 	bl	8001532 <OneWire_WriteByte>
    OneWire_WriteByte( OneWire, conf );
 80011c0:	4629      	mov	r1, r5
 80011c2:	4620      	mov	r0, r4
 80011c4:	f000 f9b5 	bl	8001532 <OneWire_WriteByte>
    OneWire_Reset( OneWire );
 80011c8:	4620      	mov	r0, r4
 80011ca:	f000 f957 	bl	800147c <OneWire_Reset>
    OneWire_SelectWithPointer( OneWire, ROM );
 80011ce:	4631      	mov	r1, r6
 80011d0:	4620      	mov	r0, r4
 80011d2:	f000 fa4c 	bl	800166e <OneWire_SelectWithPointer>
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_CPYSCRATCHPAD );
 80011d6:	4620      	mov	r0, r4
 80011d8:	2148      	movs	r1, #72	; 0x48
 80011da:	f000 f9aa 	bl	8001532 <OneWire_WriteByte>
    return 1;
 80011de:	2001      	movs	r0, #1
}
 80011e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if ( resolution == DS18B20_Resolution_10bits )
 80011e4:	f1b9 0f0a 	cmp.w	r9, #10
 80011e8:	d104      	bne.n	80011f4 <DS18B20_SetResolution+0xac>
            conf &= ~( 1 << DS18B20_RESOLUTION_R1 );
 80011ea:	f000 05bf 	and.w	r5, r0, #191	; 0xbf
            conf |= 1 << DS18B20_RESOLUTION_R0;
 80011ee:	f045 0520 	orr.w	r5, r5, #32
 80011f2:	e7d2      	b.n	800119a <DS18B20_SetResolution+0x52>
            if ( resolution == DS18B20_Resolution_11bits )
 80011f4:	f1b9 0f0b 	cmp.w	r9, #11
 80011f8:	d104      	bne.n	8001204 <DS18B20_SetResolution+0xbc>
 80011fa:	f000 05df 	and.w	r5, r0, #223	; 0xdf
                conf &= ~( 1 << DS18B20_RESOLUTION_R0 );
 80011fe:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8001202:	e7ca      	b.n	800119a <DS18B20_SetResolution+0x52>
                if ( resolution == DS18B20_Resolution_12bits )
 8001204:	f1b9 0f0c 	cmp.w	r9, #12
                    conf |= 1 << DS18B20_RESOLUTION_R0;
 8001208:	bf04      	itt	eq
 800120a:	f040 0560 	orreq.w	r5, r0, #96	; 0x60
 800120e:	b2ed      	uxtbeq	r5, r5
 8001210:	e7c3      	b.n	800119a <DS18B20_SetResolution+0x52>
        return 0;
 8001212:	2000      	movs	r0, #0
 8001214:	e7e4      	b.n	80011e0 <DS18B20_SetResolution+0x98>

08001216 <DS18B20_Is>:
    if ( *ROM == DS18B20_FAMILY_CODE )
 8001216:	7800      	ldrb	r0, [r0, #0]
    {
        return 1;
    }
    return 0;
}
 8001218:	f1a0 0328 	sub.w	r3, r0, #40	; 0x28
 800121c:	4258      	negs	r0, r3
 800121e:	4158      	adcs	r0, r3
 8001220:	4770      	bx	lr

08001222 <DS18B20_SetAlarmLowTemperature>:

uint8_t DS18B20_SetAlarmLowTemperature( OneWire_t * OneWire, uint8_t * ROM,
        int8_t temp )
{
 8001222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( *ROM == DS18B20_FAMILY_CODE )
 8001226:	780b      	ldrb	r3, [r1, #0]
{
 8001228:	4604      	mov	r4, r0
    if ( *ROM == DS18B20_FAMILY_CODE )
 800122a:	2b28      	cmp	r3, #40	; 0x28
{
 800122c:	460e      	mov	r6, r1
    if ( *ROM == DS18B20_FAMILY_CODE )
 800122e:	d147      	bne.n	80012c0 <DS18B20_SetAlarmLowTemperature+0x9e>
 8001230:	f06f 0536 	mvn.w	r5, #54	; 0x36
 8001234:	4295      	cmp	r5, r2
 8001236:	bfb8      	it	lt
 8001238:	4615      	movlt	r5, r2
    if ( temp < -55 )
    {
        temp = -55;
    }
    /* Reset line */
    OneWire_Reset( OneWire );
 800123a:	f000 f91f 	bl	800147c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer( OneWire, ROM );
 800123e:	4631      	mov	r1, r6
 8001240:	4620      	mov	r0, r4
 8001242:	f000 fa14 	bl	800166e <OneWire_SelectWithPointer>
    /* Read scratchpad command by onewire protocol */
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_RSCRATCHPAD );
 8001246:	21be      	movs	r1, #190	; 0xbe
 8001248:	4620      	mov	r0, r4
 800124a:	f000 f972 	bl	8001532 <OneWire_WriteByte>

    /* Ignore first 2 bytes */
    OneWire_ReadByte( OneWire );
 800124e:	4620      	mov	r0, r4
 8001250:	f000 f97f 	bl	8001552 <OneWire_ReadByte>
    OneWire_ReadByte( OneWire );
 8001254:	4620      	mov	r0, r4
 8001256:	f000 f97c 	bl	8001552 <OneWire_ReadByte>

    th = OneWire_ReadByte( OneWire );
 800125a:	4620      	mov	r0, r4
 800125c:	f000 f979 	bl	8001552 <OneWire_ReadByte>
 8001260:	4680      	mov	r8, r0
    tl = OneWire_ReadByte( OneWire );
 8001262:	4620      	mov	r0, r4
 8001264:	f000 f975 	bl	8001552 <OneWire_ReadByte>
    conf = OneWire_ReadByte( OneWire );
 8001268:	4620      	mov	r0, r4
 800126a:	f000 f972 	bl	8001552 <OneWire_ReadByte>
 800126e:	4607      	mov	r7, r0

    tl = (uint8_t) temp;

    /* Reset line */
    OneWire_Reset( OneWire );
 8001270:	4620      	mov	r0, r4
 8001272:	f000 f903 	bl	800147c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer( OneWire, ROM );
 8001276:	4631      	mov	r1, r6
 8001278:	4620      	mov	r0, r4
 800127a:	f000 f9f8 	bl	800166e <OneWire_SelectWithPointer>
    /* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_WSCRATCHPAD );
 800127e:	214e      	movs	r1, #78	; 0x4e
 8001280:	4620      	mov	r0, r4
 8001282:	f000 f956 	bl	8001532 <OneWire_WriteByte>

    /* Write bytes */
    OneWire_WriteByte( OneWire, th );
 8001286:	4641      	mov	r1, r8
 8001288:	4620      	mov	r0, r4
 800128a:	f000 f952 	bl	8001532 <OneWire_WriteByte>
    tl = (uint8_t) temp;
 800128e:	2d7d      	cmp	r5, #125	; 0x7d
 8001290:	bfa8      	it	ge
 8001292:	257d      	movge	r5, #125	; 0x7d
    OneWire_WriteByte( OneWire, tl );
 8001294:	4620      	mov	r0, r4
 8001296:	b2e9      	uxtb	r1, r5
 8001298:	f000 f94b 	bl	8001532 <OneWire_WriteByte>
    OneWire_WriteByte( OneWire, conf );
 800129c:	4639      	mov	r1, r7
 800129e:	4620      	mov	r0, r4
 80012a0:	f000 f947 	bl	8001532 <OneWire_WriteByte>

    /* Reset line */
    OneWire_Reset( OneWire );
 80012a4:	4620      	mov	r0, r4
 80012a6:	f000 f8e9 	bl	800147c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer( OneWire, ROM );
 80012aa:	4631      	mov	r1, r6
 80012ac:	4620      	mov	r0, r4
 80012ae:	f000 f9de 	bl	800166e <OneWire_SelectWithPointer>
    /* Copy scratchpad to EEPROM of DS18B20 */
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_CPYSCRATCHPAD );
 80012b2:	4620      	mov	r0, r4
 80012b4:	2148      	movs	r1, #72	; 0x48
 80012b6:	f000 f93c 	bl	8001532 <OneWire_WriteByte>

    return 1;
 80012ba:	2001      	movs	r0, #1
}
 80012bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0;
 80012c0:	2000      	movs	r0, #0
 80012c2:	e7fb      	b.n	80012bc <DS18B20_SetAlarmLowTemperature+0x9a>

080012c4 <DS18B20_SetAlarmHighTemperature>:

uint8_t DS18B20_SetAlarmHighTemperature( OneWire_t * OneWire, uint8_t * ROM,
        int8_t temp )
{
 80012c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( *ROM == DS18B20_FAMILY_CODE )
 80012c8:	780b      	ldrb	r3, [r1, #0]
{
 80012ca:	4604      	mov	r4, r0
    if ( *ROM == DS18B20_FAMILY_CODE )
 80012cc:	2b28      	cmp	r3, #40	; 0x28
{
 80012ce:	460e      	mov	r6, r1
    if ( *ROM == DS18B20_FAMILY_CODE )
 80012d0:	d147      	bne.n	8001362 <DS18B20_SetAlarmHighTemperature+0x9e>
 80012d2:	f06f 0536 	mvn.w	r5, #54	; 0x36
 80012d6:	4295      	cmp	r5, r2
 80012d8:	bfb8      	it	lt
 80012da:	4615      	movlt	r5, r2
    if ( temp < -55 )
    {
        temp = -55;
    }
    /* Reset line */
    OneWire_Reset( OneWire );
 80012dc:	f000 f8ce 	bl	800147c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer( OneWire, ROM );
 80012e0:	4631      	mov	r1, r6
 80012e2:	4620      	mov	r0, r4
 80012e4:	f000 f9c3 	bl	800166e <OneWire_SelectWithPointer>
    /* Read scratchpad command by onewire protocol */
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_RSCRATCHPAD );
 80012e8:	21be      	movs	r1, #190	; 0xbe
 80012ea:	4620      	mov	r0, r4
 80012ec:	f000 f921 	bl	8001532 <OneWire_WriteByte>

    /* Ignore first 2 bytes */
    OneWire_ReadByte( OneWire );
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 f92e 	bl	8001552 <OneWire_ReadByte>
    OneWire_ReadByte( OneWire );
 80012f6:	4620      	mov	r0, r4
 80012f8:	f000 f92b 	bl	8001552 <OneWire_ReadByte>

    th = OneWire_ReadByte( OneWire );
 80012fc:	4620      	mov	r0, r4
 80012fe:	f000 f928 	bl	8001552 <OneWire_ReadByte>
    tl = OneWire_ReadByte( OneWire );
 8001302:	4620      	mov	r0, r4
 8001304:	f000 f925 	bl	8001552 <OneWire_ReadByte>
 8001308:	4680      	mov	r8, r0
    conf = OneWire_ReadByte( OneWire );
 800130a:	4620      	mov	r0, r4
 800130c:	f000 f921 	bl	8001552 <OneWire_ReadByte>
 8001310:	4607      	mov	r7, r0

    th = (uint8_t) temp;

    /* Reset line */
    OneWire_Reset( OneWire );
 8001312:	4620      	mov	r0, r4
 8001314:	f000 f8b2 	bl	800147c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer( OneWire, ROM );
 8001318:	4631      	mov	r1, r6
 800131a:	4620      	mov	r0, r4
 800131c:	f000 f9a7 	bl	800166e <OneWire_SelectWithPointer>
    /* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_WSCRATCHPAD );
 8001320:	214e      	movs	r1, #78	; 0x4e
 8001322:	4620      	mov	r0, r4
 8001324:	f000 f905 	bl	8001532 <OneWire_WriteByte>
    th = (uint8_t) temp;
 8001328:	2d7d      	cmp	r5, #125	; 0x7d
 800132a:	bfa8      	it	ge
 800132c:	257d      	movge	r5, #125	; 0x7d

    /* Write bytes */
    OneWire_WriteByte( OneWire, th );
 800132e:	4620      	mov	r0, r4
 8001330:	b2e9      	uxtb	r1, r5
 8001332:	f000 f8fe 	bl	8001532 <OneWire_WriteByte>
    OneWire_WriteByte( OneWire, tl );
 8001336:	4641      	mov	r1, r8
 8001338:	4620      	mov	r0, r4
 800133a:	f000 f8fa 	bl	8001532 <OneWire_WriteByte>
    OneWire_WriteByte( OneWire, conf );
 800133e:	4639      	mov	r1, r7
 8001340:	4620      	mov	r0, r4
 8001342:	f000 f8f6 	bl	8001532 <OneWire_WriteByte>

    /* Reset line */
    OneWire_Reset( OneWire );
 8001346:	4620      	mov	r0, r4
 8001348:	f000 f898 	bl	800147c <OneWire_Reset>
    /* Select ROM number */
    OneWire_SelectWithPointer( OneWire, ROM );
 800134c:	4631      	mov	r1, r6
 800134e:	4620      	mov	r0, r4
 8001350:	f000 f98d 	bl	800166e <OneWire_SelectWithPointer>
    /* Copy scratchpad to EEPROM of DS18B20 */
    OneWire_WriteByte( OneWire, ONEWIRE_CMD_CPYSCRATCHPAD );
 8001354:	4620      	mov	r0, r4
 8001356:	2148      	movs	r1, #72	; 0x48
 8001358:	f000 f8eb 	bl	8001532 <OneWire_WriteByte>

    return 1;
 800135c:	2001      	movs	r0, #1
}
 800135e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0;
 8001362:	2000      	movs	r0, #0
 8001364:	e7fb      	b.n	800135e <DS18B20_SetAlarmHighTemperature+0x9a>

08001366 <DS18B20_AllDone>:
}

uint8_t DS18B20_AllDone( OneWire_t * OneWire )
{
    /* If read bit is low, then device is not finished yet with calculation temperature */
    return OneWire_ReadBit( OneWire );
 8001366:	f000 b8c8 	b.w	80014fa <OneWire_ReadBit>
	...

0800136c <micros>:
static uint32_t latency;
static uint16_t val_prescaler;

void micros( uint16_t time )
{
    timer.Instance->CNT = 0;
 800136c:	2200      	movs	r2, #0
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <micros+0x1c>)
    timer.Instance->ARR = time - 1;
 8001370:	3801      	subs	r0, #1
    timer.Instance->CNT = 0;
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_CLEAR_FLAG( &timer, TIM_FLAG_UPDATE );
 8001376:	f06f 0201 	mvn.w	r2, #1
    timer.Instance->ARR = time - 1;
 800137a:	62d8      	str	r0, [r3, #44]	; 0x2c
    __HAL_TIM_CLEAR_FLAG( &timer, TIM_FLAG_UPDATE );
 800137c:	611a      	str	r2, [r3, #16]
    while ( __HAL_TIM_GET_FLAG(&timer,TIM_FLAG_UPDATE) != 1 )
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	07d2      	lsls	r2, r2, #31
 8001382:	d5fc      	bpl.n	800137e <micros+0x12>
        ;
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000388 	.word	0x20000388

0800138c <OneWire_Low>:
    val_prescaler = ( freq_pclk1 / 1000000 ) - 1;
}

void OneWire_Low( OneWire_t * gp )
{
    HAL_GPIO_WritePin( gp->GPIOx, gp->GPIO_Pin, GPIO_PIN_RESET );
 800138c:	8881      	ldrh	r1, [r0, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	6800      	ldr	r0, [r0, #0]
 8001392:	f000 bd55 	b.w	8001e40 <HAL_GPIO_WritePin>

08001396 <OneWire_Input>:
void OneWire_High( OneWire_t * gp )
{
    HAL_GPIO_WritePin( gp->GPIOx, gp->GPIO_Pin, GPIO_PIN_SET );
}
void OneWire_Input( OneWire_t * gp )
{
 8001396:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GPIO_InitTypeDef GPIO_InitStruct =
 8001398:	2300      	movs	r3, #0
 800139a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    { 0 };

    GPIO_InitStruct.Pin = gp->GPIO_Pin;
 800139e:	8883      	ldrh	r3, [r0, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init( gp->GPIOx, &GPIO_InitStruct );
 80013a0:	4669      	mov	r1, sp
    GPIO_InitStruct.Pin = gp->GPIO_Pin;
 80013a2:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a4:	2303      	movs	r3, #3
    HAL_GPIO_Init( gp->GPIOx, &GPIO_InitStruct );
 80013a6:	6800      	ldr	r0, [r0, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init( gp->GPIOx, &GPIO_InitStruct );
 80013aa:	f000 fc63 	bl	8001c74 <HAL_GPIO_Init>
}
 80013ae:	b005      	add	sp, #20
 80013b0:	f85d fb04 	ldr.w	pc, [sp], #4

080013b4 <OneWire_Output>:
void OneWire_Output( OneWire_t * gp )
{
 80013b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GPIO_InitTypeDef GPIO_InitStruct =
 80013b6:	2300      	movs	r3, #0
 80013b8:	9302      	str	r3, [sp, #8]
    { 0 };

    GPIO_InitStruct.Pin = gp->GPIO_Pin;
 80013ba:	8883      	ldrh	r3, [r0, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init( gp->GPIOx, &GPIO_InitStruct );
 80013bc:	4669      	mov	r1, sp
    GPIO_InitStruct.Pin = gp->GPIO_Pin;
 80013be:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c4:	2303      	movs	r3, #3
    HAL_GPIO_Init( gp->GPIOx, &GPIO_InitStruct );
 80013c6:	6800      	ldr	r0, [r0, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init( gp->GPIOx, &GPIO_InitStruct );
 80013ca:	f000 fc53 	bl	8001c74 <HAL_GPIO_Init>
}
 80013ce:	b005      	add	sp, #20
 80013d0:	f85d fb04 	ldr.w	pc, [sp], #4

080013d4 <OneWire_Init>:

void OneWire_Init( OneWire_t * OneWireStruct, GPIO_TypeDef * GPIOx,
        uint16_t GPIO_Pin, TIM_HandleTypeDef _timer )
{
 80013d4:	b082      	sub	sp, #8
 80013d6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80013da:	4698      	mov	r8, r3
    GPIO_InitTypeDef GPIO_InitStruct =
    { 0 };

    timer.Instance = _timer.Instance;
 80013dc:	4c21      	ldr	r4, [pc, #132]	; (8001464 <OneWire_Init+0x90>)
{
 80013de:	4607      	mov	r7, r0
 80013e0:	460d      	mov	r5, r1
 80013e2:	4616      	mov	r6, r2
    GPIO_InitTypeDef GPIO_InitStruct =
 80013e4:	2100      	movs	r1, #0
 80013e6:	2210      	movs	r2, #16
 80013e8:	4668      	mov	r0, sp
{
 80013ea:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitTypeDef GPIO_InitStruct =
 80013ec:	f003 fc7b 	bl	8004ce6 <memset>
    timer.Instance = _timer.Instance;
 80013f0:	f8c4 8000 	str.w	r8, [r4]
    HAL_RCC_GetClockConfig( &clock_config, &latency );
 80013f4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001474 <OneWire_Init+0xa0>
 80013f8:	491b      	ldr	r1, [pc, #108]	; (8001468 <OneWire_Init+0x94>)
 80013fa:	4640      	mov	r0, r8
 80013fc:	f001 fd92 	bl	8002f24 <HAL_RCC_GetClockConfig>
    if ( clock_config.APB1CLKDivider == RCC_HCLK_DIV1 )
 8001400:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001404:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001478 <OneWire_Init+0xa4>
 8001408:	bb43      	cbnz	r3, 800145c <OneWire_Init+0x88>
        freq_pclk1 = HAL_RCC_GetPCLK1Freq();
 800140a:	f001 fd7b 	bl	8002f04 <HAL_RCC_GetPCLK1Freq>
        freq_pclk1 = HAL_RCC_GetPCLK1Freq() * 2;
 800140e:	f8c8 0000 	str.w	r0, [r8]
    val_prescaler = ( freq_pclk1 / 1000000 ) - 1;
 8001412:	f8d8 3000 	ldr.w	r3, [r8]
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <OneWire_Init+0x98>)
    if ( HAL_TIM_Base_Init( &timer ) != HAL_OK )
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <OneWire_Init+0x90>)
    val_prescaler = ( freq_pclk1 / 1000000 ) - 1;
 800141a:	fbb3 f3f2 	udiv	r3, r3, r2
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <OneWire_Init+0x9c>)
 8001420:	3b01      	subs	r3, #1
 8001422:	b29b      	uxth	r3, r3
 8001424:	8013      	strh	r3, [r2, #0]
    timer.Init.Prescaler = val_prescaler;
 8001426:	6063      	str	r3, [r4, #4]
    timer.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	2300      	movs	r3, #0
 800142a:	60a3      	str	r3, [r4, #8]
    timer.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	6123      	str	r3, [r4, #16]
    timer.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	61a3      	str	r3, [r4, #24]
    if ( HAL_TIM_Base_Init( &timer ) != HAL_OK )
 8001430:	f001 fe6c 	bl	800310c <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start( &timer );
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <OneWire_Init+0x90>)
 8001436:	f001 fe0b 	bl	8003050 <HAL_TIM_Base_Start>

    OneWireStruct->GPIOx = GPIOx;
    OneWireStruct->GPIO_Pin = GPIO_Pin;

    GPIO_InitStruct.Pin = GPIO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001440:	2303      	movs	r3, #3
    OneWireStruct->GPIOx = GPIOx;
 8001442:	603d      	str	r5, [r7, #0]
    OneWireStruct->GPIO_Pin = GPIO_Pin;
 8001444:	80be      	strh	r6, [r7, #4]
    HAL_GPIO_Init( GPIOx, &GPIO_InitStruct );
 8001446:	4669      	mov	r1, sp
 8001448:	4628      	mov	r0, r5
    GPIO_InitStruct.Pin = GPIO_Pin;
 800144a:	9600      	str	r6, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init( GPIOx, &GPIO_InitStruct );
 800144e:	f000 fc11 	bl	8001c74 <HAL_GPIO_Init>
}
 8001452:	b004      	add	sp, #16
 8001454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001458:	b002      	add	sp, #8
 800145a:	4770      	bx	lr
        freq_pclk1 = HAL_RCC_GetPCLK1Freq() * 2;
 800145c:	f001 fd52 	bl	8002f04 <HAL_RCC_GetPCLK1Freq>
 8001460:	0040      	lsls	r0, r0, #1
 8001462:	e7d4      	b.n	800140e <OneWire_Init+0x3a>
 8001464:	20000388 	.word	0x20000388
 8001468:	20000384 	.word	0x20000384
 800146c:	000f4240 	.word	0x000f4240
 8001470:	200003d0 	.word	0x200003d0
 8001474:	2000036c 	.word	0x2000036c
 8001478:	20000380 	.word	0x20000380

0800147c <OneWire_Reset>:

uint8_t OneWire_Reset( OneWire_t * OneWireStruct )
{
 800147c:	b510      	push	{r4, lr}
 800147e:	4604      	mov	r4, r0
    uint8_t i;

    /* Line low, and wait 480us */
    OneWire_Low( OneWireStruct );
 8001480:	f7ff ff84 	bl	800138c <OneWire_Low>
    OneWire_Output( OneWireStruct );
 8001484:	4620      	mov	r0, r4
 8001486:	f7ff ff95 	bl	80013b4 <OneWire_Output>
    ONEWIRE_DELAY( 480 );
 800148a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800148e:	f7ff ff6d 	bl	800136c <micros>

    /* Release line and wait for 70us */
    OneWire_Input( OneWireStruct );
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff ff7f 	bl	8001396 <OneWire_Input>
    ONEWIRE_DELAY( 70 );
 8001498:	2046      	movs	r0, #70	; 0x46
 800149a:	f7ff ff67 	bl	800136c <micros>

    /* Check bit value */
    i = HAL_GPIO_ReadPin( OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin );
 800149e:	88a1      	ldrh	r1, [r4, #4]
 80014a0:	6820      	ldr	r0, [r4, #0]
 80014a2:	f000 fcc7 	bl	8001e34 <HAL_GPIO_ReadPin>
 80014a6:	4601      	mov	r1, r0

    /* Delay for 410 us */
    ONEWIRE_DELAY( 410 );
 80014a8:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80014ac:	f7ff ff5e 	bl	800136c <micros>

    /* Return value of presence pulse, 0 = OK, 1 = ERROR */
    return i;
}
 80014b0:	4608      	mov	r0, r1
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <OneWire_WriteBit>:

void OneWire_WriteBit( OneWire_t * OneWireStruct, uint8_t bit )
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	4604      	mov	r4, r0
    if ( bit )
 80014b8:	b191      	cbz	r1, 80014e0 <OneWire_WriteBit+0x2c>
    {
        /* Set line low */
        OneWire_Low( OneWireStruct );
 80014ba:	f7ff ff67 	bl	800138c <OneWire_Low>
        OneWire_Output( OneWireStruct );
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff ff78 	bl	80013b4 <OneWire_Output>
        ONEWIRE_DELAY( 10 );
 80014c4:	200a      	movs	r0, #10
 80014c6:	f7ff ff51 	bl	800136c <micros>

        /* Bit high */
        OneWire_Input( OneWireStruct );
 80014ca:	4620      	mov	r0, r4
 80014cc:	f7ff ff63 	bl	8001396 <OneWire_Input>

        /* Wait for 55 us and release the line */
        ONEWIRE_DELAY( 55 );
 80014d0:	2037      	movs	r0, #55	; 0x37

        /* Bit high */
        OneWire_Input( OneWireStruct );

        /* Wait for 5 us and release the line */
        ONEWIRE_DELAY( 5 );
 80014d2:	f7ff ff4b 	bl	800136c <micros>
        OneWire_Input( OneWireStruct );
 80014d6:	4620      	mov	r0, r4
    }
}
 80014d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        OneWire_Input( OneWireStruct );
 80014dc:	f7ff bf5b 	b.w	8001396 <OneWire_Input>
        OneWire_Low( OneWireStruct );
 80014e0:	f7ff ff54 	bl	800138c <OneWire_Low>
        OneWire_Output( OneWireStruct );
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff ff65 	bl	80013b4 <OneWire_Output>
        ONEWIRE_DELAY( 65 );
 80014ea:	2041      	movs	r0, #65	; 0x41
 80014ec:	f7ff ff3e 	bl	800136c <micros>
        OneWire_Input( OneWireStruct );
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff ff50 	bl	8001396 <OneWire_Input>
        ONEWIRE_DELAY( 5 );
 80014f6:	2005      	movs	r0, #5
 80014f8:	e7eb      	b.n	80014d2 <OneWire_WriteBit+0x1e>

080014fa <OneWire_ReadBit>:

uint8_t OneWire_ReadBit( OneWire_t * OneWireStruct )
{
 80014fa:	b510      	push	{r4, lr}
 80014fc:	4604      	mov	r4, r0
    uint8_t bit = 0;

    /* Line low */
    OneWire_Low( OneWireStruct );
 80014fe:	f7ff ff45 	bl	800138c <OneWire_Low>
    OneWire_Output( OneWireStruct );
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff ff56 	bl	80013b4 <OneWire_Output>
    ONEWIRE_DELAY( 3 );
 8001508:	2003      	movs	r0, #3
 800150a:	f7ff ff2f 	bl	800136c <micros>

    /* Release line */
    OneWire_Input( OneWireStruct );
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff ff41 	bl	8001396 <OneWire_Input>
    ONEWIRE_DELAY( 10 );
 8001514:	200a      	movs	r0, #10
 8001516:	f7ff ff29 	bl	800136c <micros>

    /* Read line value */
    if ( HAL_GPIO_ReadPin( OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin ) )
 800151a:	88a1      	ldrh	r1, [r4, #4]
 800151c:	6820      	ldr	r0, [r4, #0]
 800151e:	f000 fc89 	bl	8001e34 <HAL_GPIO_ReadPin>
 8001522:	4601      	mov	r1, r0
        /* Bit is HIGH */
        bit = 1;
    }

    /* Wait 50us to complete 60us period */
    ONEWIRE_DELAY( 50 );
 8001524:	2032      	movs	r0, #50	; 0x32
 8001526:	f7ff ff21 	bl	800136c <micros>

    /* Return bit value */
    return bit;
}
 800152a:	1c08      	adds	r0, r1, #0
 800152c:	bf18      	it	ne
 800152e:	2001      	movne	r0, #1
 8001530:	bd10      	pop	{r4, pc}

08001532 <OneWire_WriteByte>:

void OneWire_WriteByte( OneWire_t * OneWireStruct, uint8_t byte )
{
 8001532:	b570      	push	{r4, r5, r6, lr}
 8001534:	4606      	mov	r6, r0
 8001536:	460d      	mov	r5, r1
    uint8_t i = 8;
    /* Write 8 bits */
    while ( i-- )
 8001538:	2409      	movs	r4, #9
 800153a:	3c01      	subs	r4, #1
 800153c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001540:	d100      	bne.n	8001544 <OneWire_WriteByte+0x12>
    {
        /* LSB bit is first */
        OneWire_WriteBit( OneWireStruct, byte & 0x01 );
        byte >>= 1;
    }
}
 8001542:	bd70      	pop	{r4, r5, r6, pc}
        OneWire_WriteBit( OneWireStruct, byte & 0x01 );
 8001544:	f005 0101 	and.w	r1, r5, #1
 8001548:	4630      	mov	r0, r6
 800154a:	f7ff ffb3 	bl	80014b4 <OneWire_WriteBit>
        byte >>= 1;
 800154e:	086d      	lsrs	r5, r5, #1
 8001550:	e7f3      	b.n	800153a <OneWire_WriteByte+0x8>

08001552 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte( OneWire_t * OneWireStruct )
{
 8001552:	b570      	push	{r4, r5, r6, lr}
 8001554:	4606      	mov	r6, r0
    uint8_t i = 8, byte = 0;
    while ( i-- )
 8001556:	2509      	movs	r5, #9
    uint8_t i = 8, byte = 0;
 8001558:	2400      	movs	r4, #0
 800155a:	3d01      	subs	r5, #1
    while ( i-- )
 800155c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8001560:	d101      	bne.n	8001566 <OneWire_ReadByte+0x14>
        byte >>= 1;
        byte |= ( OneWire_ReadBit( OneWireStruct ) << 7 );
    }

    return byte;
}
 8001562:	4620      	mov	r0, r4
 8001564:	bd70      	pop	{r4, r5, r6, pc}
        byte |= ( OneWire_ReadBit( OneWireStruct ) << 7 );
 8001566:	4630      	mov	r0, r6
 8001568:	f7ff ffc7 	bl	80014fa <OneWire_ReadBit>
        byte >>= 1;
 800156c:	0864      	lsrs	r4, r4, #1
        byte |= ( OneWire_ReadBit( OneWireStruct ) << 7 );
 800156e:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
 8001572:	b2e4      	uxtb	r4, r4
 8001574:	e7f1      	b.n	800155a <OneWire_ReadByte+0x8>

08001576 <OneWire_Search>:
    OneWireStruct->LastDeviceFlag = 0;
    OneWireStruct->LastFamilyDiscrepancy = 0;
}

uint8_t OneWire_Search( OneWire_t * OneWireStruct, uint8_t command )
{
 8001576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    /* Check if any devices */
    if ( !OneWireStruct->LastDeviceFlag )
 800157a:	7a03      	ldrb	r3, [r0, #8]
{
 800157c:	4604      	mov	r4, r0
 800157e:	460d      	mov	r5, r1
    if ( !OneWireStruct->LastDeviceFlag )
 8001580:	b91b      	cbnz	r3, 800158a <OneWire_Search+0x14>
    {
        /* 1-Wire reset */
        if ( OneWire_Reset( OneWireStruct ) )
 8001582:	f7ff ff7b 	bl	800147c <OneWire_Reset>
 8001586:	4681      	mov	r9, r0
 8001588:	b120      	cbz	r0, 8001594 <OneWire_Search+0x1e>
        {
            /* Reset the search */
            OneWireStruct->LastDiscrepancy = 0;
 800158a:	2000      	movs	r0, #0
 800158c:	80e0      	strh	r0, [r4, #6]
            OneWireStruct->LastDeviceFlag = 0;
            OneWireStruct->LastFamilyDiscrepancy = 0;
 800158e:	7220      	strb	r0, [r4, #8]
        OneWireStruct->LastFamilyDiscrepancy = 0;
        search_result = 0;
    }

    return search_result;
}
 8001590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    rom_byte_mask = 1;
 8001594:	2601      	movs	r6, #1
        OneWire_WriteByte( OneWireStruct, command );
 8001596:	4629      	mov	r1, r5
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff ffca 	bl	8001532 <OneWire_WriteByte>
    rom_byte_number = 0;
 800159e:	464f      	mov	r7, r9
    id_bit_number = 1;
 80015a0:	4635      	mov	r5, r6
            id_bit = OneWire_ReadBit( OneWireStruct );
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff ffa9 	bl	80014fa <OneWire_ReadBit>
 80015a8:	4680      	mov	r8, r0
            cmp_id_bit = OneWire_ReadBit( OneWireStruct );
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff ffa5 	bl	80014fa <OneWire_ReadBit>
            if ( ( id_bit == 1 ) && ( cmp_id_bit == 1 ) )
 80015b0:	f1b8 0f01 	cmp.w	r8, #1
 80015b4:	d10f      	bne.n	80015d6 <OneWire_Search+0x60>
 80015b6:	2801      	cmp	r0, #1
 80015b8:	d12b      	bne.n	8001612 <OneWire_Search+0x9c>
        if ( !( id_bit_number < 65 ) )
 80015ba:	2d40      	cmp	r5, #64	; 0x40
 80015bc:	d9e5      	bls.n	800158a <OneWire_Search+0x14>
            OneWireStruct->LastDiscrepancy = last_zero;
 80015be:	f884 9006 	strb.w	r9, [r4, #6]
            if ( OneWireStruct->LastDiscrepancy == 0 )
 80015c2:	f1b9 0f00 	cmp.w	r9, #0
 80015c6:	d101      	bne.n	80015cc <OneWire_Search+0x56>
                OneWireStruct->LastDeviceFlag = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	7223      	strb	r3, [r4, #8]
    if ( !search_result || !OneWireStruct->ROM_NO[0] )
 80015cc:	7a63      	ldrb	r3, [r4, #9]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0db      	beq.n	800158a <OneWire_Search+0x14>
            search_result = 1;
 80015d2:	2001      	movs	r0, #1
 80015d4:	e7dc      	b.n	8001590 <OneWire_Search+0x1a>
 80015d6:	19e2      	adds	r2, r4, r7
                if ( id_bit != cmp_id_bit )
 80015d8:	4580      	cmp	r8, r0
 80015da:	7a53      	ldrb	r3, [r2, #9]
 80015dc:	d10f      	bne.n	80015fe <OneWire_Search+0x88>
                    if ( id_bit_number < OneWireStruct->LastDiscrepancy )
 80015de:	79a1      	ldrb	r1, [r4, #6]
 80015e0:	42a9      	cmp	r1, r5
 80015e2:	d910      	bls.n	8001606 <OneWire_Search+0x90>
                                        & rom_byte_mask ) > 0 );
 80015e4:	4233      	tst	r3, r6
                        search_direction =
 80015e6:	bf14      	ite	ne
 80015e8:	f04f 0801 	movne.w	r8, #1
 80015ec:	f04f 0800 	moveq.w	r8, #0
                    if ( search_direction == 0 )
 80015f0:	f1b8 0f00 	cmp.w	r8, #0
 80015f4:	d10d      	bne.n	8001612 <OneWire_Search+0x9c>
                        if ( last_zero < 9 )
 80015f6:	2d08      	cmp	r5, #8
 80015f8:	d800      	bhi.n	80015fc <OneWire_Search+0x86>
                            OneWireStruct->LastFamilyDiscrepancy = last_zero;
 80015fa:	71e5      	strb	r5, [r4, #7]
 80015fc:	46a9      	mov	r9, r5
                    OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80015fe:	ea23 0306 	bic.w	r3, r3, r6
 8001602:	7253      	strb	r3, [r2, #9]
 8001604:	e00b      	b.n	800161e <OneWire_Search+0xa8>
                        search_direction = ( id_bit_number
 8001606:	bf0c      	ite	eq
 8001608:	f04f 0801 	moveq.w	r8, #1
 800160c:	f04f 0800 	movne.w	r8, #0
 8001610:	e7ee      	b.n	80015f0 <OneWire_Search+0x7a>
 8001612:	f04f 0801 	mov.w	r8, #1
                    OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8001616:	19e2      	adds	r2, r4, r7
 8001618:	7a53      	ldrb	r3, [r2, #9]
 800161a:	4333      	orrs	r3, r6
 800161c:	7253      	strb	r3, [r2, #9]
                OneWire_WriteBit( OneWireStruct, search_direction );
 800161e:	4641      	mov	r1, r8
 8001620:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
 8001622:	0076      	lsls	r6, r6, #1
                OneWire_WriteBit( OneWireStruct, search_direction );
 8001624:	f7ff ff46 	bl	80014b4 <OneWire_WriteBit>
                if ( rom_byte_mask == 0 )
 8001628:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
 800162c:	bf04      	itt	eq
 800162e:	3701      	addeq	r7, #1
 8001630:	b2ff      	uxtbeq	r7, r7
                id_bit_number++;
 8001632:	f105 0501 	add.w	r5, r5, #1
                    rom_byte_mask = 1;
 8001636:	bf08      	it	eq
 8001638:	2601      	moveq	r6, #1
        } while ( rom_byte_number < 8 );
 800163a:	2f07      	cmp	r7, #7
                id_bit_number++;
 800163c:	b2ed      	uxtb	r5, r5
        } while ( rom_byte_number < 8 );
 800163e:	d9b0      	bls.n	80015a2 <OneWire_Search+0x2c>
 8001640:	e7bb      	b.n	80015ba <OneWire_Search+0x44>

08001642 <OneWire_First>:
    OneWireStruct->LastDiscrepancy = 0;
 8001642:	2200      	movs	r2, #0
    return OneWire_Search( OneWireStruct, ONEWIRE_CMD_SEARCHROM );
 8001644:	21f0      	movs	r1, #240	; 0xf0
    OneWireStruct->LastDiscrepancy = 0;
 8001646:	80c2      	strh	r2, [r0, #6]
    OneWireStruct->LastFamilyDiscrepancy = 0;
 8001648:	7202      	strb	r2, [r0, #8]
    return OneWire_Search( OneWireStruct, ONEWIRE_CMD_SEARCHROM );
 800164a:	f7ff bf94 	b.w	8001576 <OneWire_Search>

0800164e <OneWire_Select>:
{
    return OneWireStruct->ROM_NO[index];
}

void OneWire_Select( OneWire_t * OneWireStruct, uint8_t * addr )
{
 800164e:	b570      	push	{r4, r5, r6, lr}
 8001650:	460c      	mov	r4, r1
    uint8_t i;
    OneWire_WriteByte( OneWireStruct, ONEWIRE_CMD_MATCHROM );
 8001652:	2155      	movs	r1, #85	; 0x55
{
 8001654:	4606      	mov	r6, r0
    OneWire_WriteByte( OneWireStruct, ONEWIRE_CMD_MATCHROM );
 8001656:	f7ff ff6c 	bl	8001532 <OneWire_WriteByte>
 800165a:	1e65      	subs	r5, r4, #1
 800165c:	3407      	adds	r4, #7

    for ( i = 0; i < 8; i++ )
    {
        OneWire_WriteByte( OneWireStruct, *( addr + i ) );
 800165e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001662:	4630      	mov	r0, r6
 8001664:	f7ff ff65 	bl	8001532 <OneWire_WriteByte>
    for ( i = 0; i < 8; i++ )
 8001668:	42a5      	cmp	r5, r4
 800166a:	d1f8      	bne.n	800165e <OneWire_Select+0x10>
    }
}
 800166c:	bd70      	pop	{r4, r5, r6, pc}

0800166e <OneWire_SelectWithPointer>:
 800166e:	f7ff bfee 	b.w	800164e <OneWire_Select>

08001672 <OneWire_GetFullROM>:
        OneWire_WriteByte( OneWireStruct, *( ROM + i ) );
    }
}

void OneWire_GetFullROM( OneWire_t * OneWireStruct, uint8_t * firstIndex )
{
 8001672:	f100 0309 	add.w	r3, r0, #9
 8001676:	3901      	subs	r1, #1
 8001678:	3011      	adds	r0, #17
    uint8_t i;
    for ( i = 0; i < 8; i++ )
    {
        *( firstIndex + i ) = OneWireStruct->ROM_NO[i];
 800167a:	f813 2b01 	ldrb.w	r2, [r3], #1
    for ( i = 0; i < 8; i++ )
 800167e:	4283      	cmp	r3, r0
        *( firstIndex + i ) = OneWireStruct->ROM_NO[i];
 8001680:	f801 2f01 	strb.w	r2, [r1, #1]!
    for ( i = 0; i < 8; i++ )
 8001684:	d1f9      	bne.n	800167a <OneWire_GetFullROM+0x8>
    }
}
 8001686:	4770      	bx	lr

08001688 <OneWire_CRC8>:

uint8_t OneWire_CRC8( uint8_t * addr, uint8_t len )
{
    uint8_t crc = 0, inbyte, i, mix;
 8001688:	2300      	movs	r3, #0
{
 800168a:	b530      	push	{r4, r5, lr}
 800168c:	4401      	add	r1, r0

    while ( len-- )
 800168e:	4288      	cmp	r0, r1
 8001690:	d101      	bne.n	8001696 <OneWire_CRC8+0xe>
        }
    }

    /* Return calculated CRC */
    return crc;
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd30      	pop	{r4, r5, pc}
        inbyte = *addr++;
 8001696:	2208      	movs	r2, #8
 8001698:	f810 4b01 	ldrb.w	r4, [r0], #1
            mix = ( crc ^ inbyte ) & 0x01;
 800169c:	ea83 0504 	eor.w	r5, r3, r4
            if ( mix )
 80016a0:	f015 0f01 	tst.w	r5, #1
 80016a4:	ea4f 0353 	mov.w	r3, r3, lsr #1
                crc ^= 0x8C;
 80016a8:	bf18      	it	ne
 80016aa:	f083 038c 	eorne.w	r3, r3, #140	; 0x8c
 80016ae:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80016b2:	bf18      	it	ne
 80016b4:	b2db      	uxtbne	r3, r3
        for ( i = 8; i; i-- )
 80016b6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
            inbyte >>= 1;
 80016ba:	ea4f 0454 	mov.w	r4, r4, lsr #1
        for ( i = 8; i; i-- )
 80016be:	d1ed      	bne.n	800169c <OneWire_CRC8+0x14>
 80016c0:	e7e5      	b.n	800168e <OneWire_CRC8+0x6>
	...

080016c4 <_ZN5PrintC1Ev>:
using namespace std;

/**
 *  Constructor
 */
Print::Print()
 80016c4:	4b01      	ldr	r3, [pc, #4]	; (80016cc <_ZN5PrintC1Ev+0x8>)
 80016c6:	6003      	str	r3, [r0, #0]
{

}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	08006e10 	.word	0x08006e10

080016d0 <_ZN5Print5printEPKcz>:
 * @param format  contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es sprintf
 */
void Print::print( const char * format, ... )
{
 80016d0:	b40e      	push	{r1, r2, r3}
 80016d2:	b510      	push	{r4, lr}
 80016d4:	b0b5      	sub	sp, #212	; 0xd4
 80016d6:	aa37      	add	r2, sp, #220	; 0xdc
 80016d8:	f852 1b04 	ldr.w	r1, [r2], #4
 80016dc:	4604      	mov	r4, r0

    /* va_start es una macro que acepta dos argumentos, un va_list y el nombre
     de la variable que precede directamente a la elipsis ("..."). */
    va_start( argp, format );

    if ( 0 < vsprintf( string, format, argp ) ) // build string
 80016de:	a802      	add	r0, sp, #8
    va_start( argp, format );
 80016e0:	9201      	str	r2, [sp, #4]
    if ( 0 < vsprintf( string, format, argp ) ) // build string
 80016e2:	f003 ffb1 	bl	8005648 <vsiprintf>
 80016e6:	2800      	cmp	r0, #0
 80016e8:	dd04      	ble.n	80016f4 <_ZN5Print5printEPKcz+0x24>
    {
        write( (uint8_t*) string );  // funcion virtual
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	a902      	add	r1, sp, #8
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4620      	mov	r0, r4
 80016f2:	4798      	blx	r3
    }

    va_end( argp );

}
 80016f4:	b035      	add	sp, #212	; 0xd4
 80016f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016fa:	b003      	add	sp, #12
 80016fc:	4770      	bx	lr

080016fe <_ZN5Print5printEPh>:
 * @param text_in dato de tipo uint8_t a transmitir
 */
void Print::print( uint8_t * bytes_in )
{

    write( bytes_in );
 80016fe:	6803      	ldr	r3, [r0, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4718      	bx	r3

08001704 <_ZN3Usb5writeEPh>:
{

}

void Usb::write( uint8_t * text )
{
 8001704:	b510      	push	{r4, lr}

    CDC_Transmit_FS( text, strlen( (char*) text ) );
 8001706:	4608      	mov	r0, r1
{
 8001708:	460c      	mov	r4, r1
    CDC_Transmit_FS( text, strlen( (char*) text ) );
 800170a:	f7fe fd21 	bl	8000150 <strlen>
 800170e:	b281      	uxth	r1, r0
 8001710:	4620      	mov	r0, r4
}
 8001712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CDC_Transmit_FS( text, strlen( (char*) text ) );
 8001716:	f003 b8bf 	b.w	8004898 <CDC_Transmit_FS>
	...

0800171c <_ZN3UsbC1Ev>:
Usb::Usb()
 800171c:	b510      	push	{r4, lr}
 800171e:	4604      	mov	r4, r0
 8001720:	f7ff ffd0 	bl	80016c4 <_ZN5PrintC1Ev>
 8001724:	4b01      	ldr	r3, [pc, #4]	; (800172c <_ZN3UsbC1Ev+0x10>)
}
 8001726:	4620      	mov	r0, r4
Usb::Usb()
 8001728:	6023      	str	r3, [r4, #0]
}
 800172a:	bd10      	pop	{r4, pc}
 800172c:	08006e1c 	.word	0x08006e1c

08001730 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config( void )
{
 8001730:	b570      	push	{r4, r5, r6, lr}
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8001732:	2414      	movs	r4, #20
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
    { 0 };
    RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8001734:	2610      	movs	r6, #16
{
 8001736:	b094      	sub	sp, #80	; 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8001738:	4622      	mov	r2, r4
 800173a:	2100      	movs	r1, #0
 800173c:	a80c      	add	r0, sp, #48	; 0x30
 800173e:	f003 fad2 	bl	8004ce6 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001742:	4622      	mov	r2, r4
 8001744:	eb0d 0004 	add.w	r0, sp, r4
 8001748:	2100      	movs	r1, #0
 800174a:	f003 facc 	bl	8004ce6 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800174e:	4632      	mov	r2, r6
 8001750:	2100      	movs	r1, #0
 8001752:	a801      	add	r0, sp, #4
 8001754:	f003 fac7 	bl	8004ce6 <memset>
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001758:	2502      	movs	r5, #2
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001760:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001764:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001768:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
    if ( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 800176c:	a80a      	add	r0, sp, #40	; 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800176e:	920e      	str	r2, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001770:	9313      	str	r3, [sp, #76]	; 0x4c
    if ( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 8001772:	f001 f953 	bl	8002a1c <HAL_RCC_OscConfig>
    {
        Error_Handler();
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001776:	230f      	movs	r3, #15
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001778:	2400      	movs	r4, #0
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177a:	e9cd 3505 	strd	r3, r5, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if ( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK )
 8001782:	4629      	mov	r1, r5
 8001784:	a805      	add	r0, sp, #20
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001786:	e9cd 4307 	strd	r4, r3, [sp, #28]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178a:	9409      	str	r4, [sp, #36]	; 0x24
    if ( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK )
 800178c:	f001 fb1e 	bl	8002dcc <HAL_RCC_ClockConfig>
    {
        Error_Handler();
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
    if ( HAL_RCCEx_PeriphCLKConfig( &PeriphClkInit ) != HAL_OK )
 8001790:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001792:	9601      	str	r6, [sp, #4]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001794:	9404      	str	r4, [sp, #16]
    if ( HAL_RCCEx_PeriphCLKConfig( &PeriphClkInit ) != HAL_OK )
 8001796:	f001 fbe3 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
    {
        Error_Handler();
    }
}
 800179a:	b014      	add	sp, #80	; 0x50
 800179c:	bd70      	pop	{r4, r5, r6, pc}
	...

080017a0 <main>:
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09c      	sub	sp, #112	; 0x70
    HAL_Init();
 80017a4:	f000 f9c6 	bl	8001b34 <HAL_Init>
    SystemClock_Config();
 80017a8:	f7ff ffc2 	bl	8001730 <_Z18SystemClock_Configv>
 * @param None
 * @retval None
 */
static void MX_GPIO_Init( void )
{
    GPIO_InitTypeDef GPIO_InitStruct =
 80017ac:	2210      	movs	r2, #16
 80017ae:	2100      	movs	r1, #0
 80017b0:	a818      	add	r0, sp, #96	; 0x60
 80017b2:	f003 fa98 	bl	8004ce6 <memset>
    { 0 };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <main+0x1b4>)

    /*Configure GPIO pin : PC13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2500      	movs	r5, #0
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80017ba:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80017c0:	f042 0210 	orr.w	r2, r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	f44f 5800 	mov.w	r8, #8192	; 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80017c8:	619a      	str	r2, [r3, #24]
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );

    /*Configure GPIO pin : Onwire_Pin */
    GPIO_InitStruct.Pin = Onwire_Pin;
 80017ca:	f44f 5680 	mov.w	r6, #4096	; 0x1000
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80017ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 80017d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 80017d4:	f002 0210 	and.w	r2, r2, #16
 80017d8:	9212      	str	r2, [sp, #72]	; 0x48
 80017da:	9a12      	ldr	r2, [sp, #72]	; 0x48
    __HAL_RCC_GPIOD_CLK_ENABLE( );
 80017dc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 80017de:	485e      	ldr	r0, [pc, #376]	; (8001958 <main+0x1b8>)
    __HAL_RCC_GPIOD_CLK_ENABLE( );
 80017e0:	f042 0220 	orr.w	r2, r2, #32
 80017e4:	619a      	str	r2, [r3, #24]
 80017e6:	699a      	ldr	r2, [r3, #24]
 80017e8:	f002 0220 	and.w	r2, r2, #32
 80017ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80017ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE( );
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	f042 0208 	orr.w	r2, r2, #8
 80017f6:	619a      	str	r2, [r3, #24]
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	f002 0208 	and.w	r2, r2, #8
 80017fe:	9214      	str	r2, [sp, #80]	; 0x50
 8001800:	9a14      	ldr	r2, [sp, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE( );
 8001802:	699a      	ldr	r2, [r3, #24]
 8001804:	f042 0204 	orr.w	r2, r2, #4
 8001808:	619a      	str	r2, [r3, #24]
 800180a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 800180c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE( );
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	9315      	str	r3, [sp, #84]	; 0x54
 8001814:	9b15      	ldr	r3, [sp, #84]	; 0x54
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 8001816:	f000 fb13 	bl	8001e40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin( Onwire_GPIO_Port, Onwire_Pin, GPIO_PIN_RESET );
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001820:	484e      	ldr	r0, [pc, #312]	; (800195c <main+0x1bc>)
 8001822:	f000 fb0d 	bl	8001e40 <HAL_GPIO_WritePin>
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 8001826:	a918      	add	r1, sp, #96	; 0x60
 8001828:	484b      	ldr	r0, [pc, #300]	; (8001958 <main+0x1b8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	e9cd 541a 	strd	r5, r4, [sp, #104]	; 0x68
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	e9cd 8718 	strd	r8, r7, [sp, #96]	; 0x60
    HAL_GPIO_Init( GPIOC, &GPIO_InitStruct );
 8001832:	f000 fa1f 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init( Onwire_GPIO_Port, &GPIO_InitStruct );
 8001836:	a918      	add	r1, sp, #96	; 0x60
 8001838:	4848      	ldr	r0, [pc, #288]	; (800195c <main+0x1bc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	e9cd 541a 	strd	r5, r4, [sp, #104]	; 0x68
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
    HAL_GPIO_Init( Onwire_GPIO_Port, &GPIO_InitStruct );
 8001842:	f000 fa17 	bl	8001c74 <HAL_GPIO_Init>
    TIM_ClockConfigTypeDef sClockSourceConfig =
 8001846:	2210      	movs	r2, #16
 8001848:	4629      	mov	r1, r5
 800184a:	a818      	add	r0, sp, #96	; 0x60
 800184c:	f003 fa4b 	bl	8004ce6 <memset>
    htim2.Instance = TIM2;
 8001850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001854:	4c42      	ldr	r4, [pc, #264]	; (8001960 <main+0x1c0>)
    TIM_MasterConfigTypeDef sMasterConfig =
 8001856:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
    htim2.Init.Prescaler = 0;
 800185a:	e9c4 3500 	strd	r3, r5, [r4]
    htim2.Init.Period = 65535;
 800185e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if ( HAL_TIM_Base_Init( &htim2 ) != HAL_OK )
 8001862:	4620      	mov	r0, r4
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	e9c4 3503 	strd	r3, r5, [r4, #12]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	60a5      	str	r5, [r4, #8]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	61a5      	str	r5, [r4, #24]
    if ( HAL_TIM_Base_Init( &htim2 ) != HAL_OK )
 800186c:	f001 fc4e 	bl	800310c <HAL_TIM_Base_Init>
    if ( HAL_TIM_ConfigClockSource( &htim2, &sClockSourceConfig ) != HAL_OK )
 8001870:	a918      	add	r1, sp, #96	; 0x60
 8001872:	4620      	mov	r0, r4
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001874:	9618      	str	r6, [sp, #96]	; 0x60
    if ( HAL_TIM_ConfigClockSource( &htim2, &sClockSourceConfig ) != HAL_OK )
 8001876:	f001 fc7f 	bl	8003178 <HAL_TIM_ConfigClockSource>
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim2, &sMasterConfig )
 800187a:	a916      	add	r1, sp, #88	; 0x58
 800187c:	4620      	mov	r0, r4
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
    if ( HAL_TIMEx_MasterConfigSynchronization( &htim2, &sMasterConfig )
 8001882:	f001 fd0d 	bl	80032a0 <HAL_TIMEx_MasterConfigSynchronization>
    MX_USB_DEVICE_Init();
 8001886:	f002 ffc7 	bl	8004818 <MX_USB_DEVICE_Init>
    HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
 800188a:	463a      	mov	r2, r7
 800188c:	4641      	mov	r1, r8
 800188e:	4832      	ldr	r0, [pc, #200]	; (8001958 <main+0x1b8>)
 8001890:	f000 fad6 	bl	8001e40 <HAL_GPIO_WritePin>
    usb.print( "starting... \r\n" );
 8001894:	4933      	ldr	r1, [pc, #204]	; (8001964 <main+0x1c4>)
 8001896:	4834      	ldr	r0, [pc, #208]	; (8001968 <main+0x1c8>)
 8001898:	f7ff ff1a 	bl	80016d0 <_ZN5Print5printEPKcz>
    OneWire_Init( &OW, Onwire_GPIO_Port, Onwire_Pin, htim2 );
 800189c:	2244      	movs	r2, #68	; 0x44
 800189e:	1d21      	adds	r1, r4, #4
 80018a0:	4668      	mov	r0, sp
 80018a2:	f003 fa15 	bl	8004cd0 <memcpy>
 80018a6:	4831      	ldr	r0, [pc, #196]	; (800196c <main+0x1cc>)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	4632      	mov	r2, r6
 80018ac:	492b      	ldr	r1, [pc, #172]	; (800195c <main+0x1bc>)
 80018ae:	f7ff fd91 	bl	80013d4 <OneWire_Init>
    if ( OneWire_First( &OW ) )
 80018b2:	482e      	ldr	r0, [pc, #184]	; (800196c <main+0x1cc>)
 80018b4:	f7ff fec5 	bl	8001642 <OneWire_First>
 80018b8:	b118      	cbz	r0, 80018c2 <main+0x122>
        OneWire_GetFullROM( &OW, DS_ROM );
 80018ba:	492d      	ldr	r1, [pc, #180]	; (8001970 <main+0x1d0>)
 80018bc:	482b      	ldr	r0, [pc, #172]	; (800196c <main+0x1cc>)
 80018be:	f7ff fed8 	bl	8001672 <OneWire_GetFullROM>
    if ( DS18B20_Is( DS_ROM ) )
 80018c2:	482b      	ldr	r0, [pc, #172]	; (8001970 <main+0x1d0>)
 80018c4:	f7ff fca7 	bl	8001216 <DS18B20_Is>
 80018c8:	b188      	cbz	r0, 80018ee <main+0x14e>
        DS18B20_SetResolution( &OW, DS_ROM, DS18B20_Resolution_11bits );
 80018ca:	220b      	movs	r2, #11
 80018cc:	4928      	ldr	r1, [pc, #160]	; (8001970 <main+0x1d0>)
 80018ce:	4827      	ldr	r0, [pc, #156]	; (800196c <main+0x1cc>)
 80018d0:	f7ff fc3a 	bl	8001148 <DS18B20_SetResolution>
        DS18B20_SetAlarmHighTemperature( &OW, DS_ROM, 30 );
 80018d4:	221e      	movs	r2, #30
 80018d6:	4926      	ldr	r1, [pc, #152]	; (8001970 <main+0x1d0>)
 80018d8:	4824      	ldr	r0, [pc, #144]	; (800196c <main+0x1cc>)
 80018da:	f7ff fcf3 	bl	80012c4 <DS18B20_SetAlarmHighTemperature>
        DS18B20_SetAlarmLowTemperature( &OW, DS_ROM, 10 );
 80018de:	220a      	movs	r2, #10
 80018e0:	4923      	ldr	r1, [pc, #140]	; (8001970 <main+0x1d0>)
 80018e2:	4822      	ldr	r0, [pc, #136]	; (800196c <main+0x1cc>)
 80018e4:	f7ff fc9d 	bl	8001222 <DS18B20_SetAlarmLowTemperature>
        DS18B20_StartAll( &OW );
 80018e8:	4820      	ldr	r0, [pc, #128]	; (800196c <main+0x1cc>)
 80018ea:	f7ff fba1 	bl	8001030 <DS18B20_StartAll>
                if ( DS18B20_Read( &OW, DS_ROM, &temp ) )
 80018ee:	4c21      	ldr	r4, [pc, #132]	; (8001974 <main+0x1d4>)
                    if ( temp > 30 )
 80018f0:	4f21      	ldr	r7, [pc, #132]	; (8001978 <main+0x1d8>)
        if ( DS18B20_Is( DS_ROM ) )
 80018f2:	4e1f      	ldr	r6, [pc, #124]	; (8001970 <main+0x1d0>)
            if ( DS18B20_AllDone( &OW ) )
 80018f4:	4d1d      	ldr	r5, [pc, #116]	; (800196c <main+0x1cc>)
        HAL_Delay( 700 );
 80018f6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80018fa:	f000 f93f 	bl	8001b7c <HAL_Delay>
        if ( DS18B20_Is( DS_ROM ) )
 80018fe:	4630      	mov	r0, r6
 8001900:	f7ff fc89 	bl	8001216 <DS18B20_Is>
 8001904:	2800      	cmp	r0, #0
 8001906:	d0f6      	beq.n	80018f6 <main+0x156>
            if ( DS18B20_AllDone( &OW ) )
 8001908:	4628      	mov	r0, r5
 800190a:	f7ff fd2c 	bl	8001366 <DS18B20_AllDone>
 800190e:	2800      	cmp	r0, #0
 8001910:	d0f1      	beq.n	80018f6 <main+0x156>
                if ( DS18B20_Read( &OW, DS_ROM, &temp ) )
 8001912:	4622      	mov	r2, r4
 8001914:	4631      	mov	r1, r6
 8001916:	4628      	mov	r0, r5
 8001918:	f7ff fb98 	bl	800104c <DS18B20_Read>
 800191c:	2800      	cmp	r0, #0
 800191e:	d0ea      	beq.n	80018f6 <main+0x156>
                    usb.print( "Temperature = %.3f \r\n", temp );
 8001920:	6820      	ldr	r0, [r4, #0]
 8001922:	f7fe fd81 	bl	8000428 <__aeabi_f2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	480f      	ldr	r0, [pc, #60]	; (8001968 <main+0x1c8>)
 800192c:	4913      	ldr	r1, [pc, #76]	; (800197c <main+0x1dc>)
 800192e:	f7ff fecf 	bl	80016d0 <_ZN5Print5printEPKcz>
                    DS18B20_StartAll( &OW );
 8001932:	480e      	ldr	r0, [pc, #56]	; (800196c <main+0x1cc>)
 8001934:	f7ff fb7c 	bl	8001030 <DS18B20_StartAll>
                    if ( temp > 30 )
 8001938:	4639      	mov	r1, r7
 800193a:	6820      	ldr	r0, [r4, #0]
 800193c:	f7ff fb6e 	bl	800101c <__aeabi_fcmpgt>
 8001940:	b130      	cbz	r0, 8001950 <main+0x1b0>
                        HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET );
 8001942:	2200      	movs	r2, #0
                        HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
 8001944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <main+0x1b8>)
 800194a:	f000 fa79 	bl	8001e40 <HAL_GPIO_WritePin>
 800194e:	e7d0      	b.n	80018f2 <main+0x152>
 8001950:	2201      	movs	r2, #1
 8001952:	e7f7      	b.n	8001944 <main+0x1a4>
 8001954:	40021000 	.word	0x40021000
 8001958:	40011000 	.word	0x40011000
 800195c:	40010c00 	.word	0x40010c00
 8001960:	200003f0 	.word	0x200003f0
 8001964:	08006e20 	.word	0x08006e20
 8001968:	2000043c 	.word	0x2000043c
 800196c:	200003dc 	.word	0x200003dc
 8001970:	200003d2 	.word	0x200003d2
 8001974:	20000438 	.word	0x20000438
 8001978:	41f00000 	.word	0x41f00000
 800197c:	08006e2f 	.word	0x08006e2f

08001980 <CDC_ReceiveCallBack>:

}

/* USER CODE BEGIN 4 */
void CDC_ReceiveCallBack( uint8_t * Buf, uint16_t Len )
{
 8001980:	b510      	push	{r4, lr}
 8001982:	4604      	mov	r4, r0
    HAL_GPIO_TogglePin( GPIOC, GPIO_PIN_13 );
 8001984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <CDC_ReceiveCallBack+0x1c>)
 800198a:	f000 fa5e 	bl	8001e4a <HAL_GPIO_TogglePin>
    usb.print( Buf );
 800198e:	4621      	mov	r1, r4
}
 8001990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usb.print( Buf );
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <CDC_ReceiveCallBack+0x20>)
 8001996:	f7ff beb2 	b.w	80016fe <_ZN5Print5printEPh>
 800199a:	bf00      	nop
 800199c:	40011000 	.word	0x40011000
 80019a0:	2000043c 	.word	0x2000043c

080019a4 <Error_Handler>:
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 80019a4:	4770      	bx	lr
	...

080019a8 <_GLOBAL__sub_I_htim2>:
Usb usb;
 80019a8:	4801      	ldr	r0, [pc, #4]	; (80019b0 <_GLOBAL__sub_I_htim2+0x8>)
 80019aa:	f7ff beb7 	b.w	800171c <_ZN3UsbC1Ev>
 80019ae:	bf00      	nop
 80019b0:	2000043c 	.word	0x2000043c

080019b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_MspInit+0x3c>)
{
 80019b6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	619a      	str	r2, [r3, #24]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	f002 0201 	and.w	r2, r2, #1
 80019c6:	9200      	str	r2, [sp, #0]
 80019c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	69da      	ldr	r2, [r3, #28]
 80019cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019d0:	61da      	str	r2, [r3, #28]
 80019d2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019de:	6853      	ldr	r3, [r2, #4]
 80019e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	b002      	add	sp, #8
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010000 	.word	0x40010000

080019f8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80019f8:	6803      	ldr	r3, [r0, #0]
{
 80019fa:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80019fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a00:	d10a      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a02:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	61da      	str	r2, [r3, #28]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a18:	b002      	add	sp, #8
 8001a1a:	4770      	bx	lr

08001a1c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a1c:	4770      	bx	lr

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	e7fe      	b.n	8001a1e <HardFault_Handler>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler>

08001a26 <SVC_Handler>:
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:
 8001a28:	4770      	bx	lr

08001a2a <PendSV_Handler>:
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2c:	f000 b894 	b.w	8001b58 <HAL_IncTick>

08001a30 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a30:	4801      	ldr	r0, [pc, #4]	; (8001a38 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001a32:	f000 bab9 	b.w	8001fa8 <HAL_PCD_IRQHandler>
 8001a36:	bf00      	nop
 8001a38:	20001308 	.word	0x20001308

08001a3c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	4770      	bx	lr

08001a40 <_kill>:

int _kill(int pid, int sig)
{
 8001a40:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a42:	f003 f91b 	bl	8004c7c <__errno>
 8001a46:	2316      	movs	r3, #22
 8001a48:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4e:	bd08      	pop	{r3, pc}

08001a50 <_exit>:

void _exit (int status)
{
 8001a50:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a52:	f003 f913 	bl	8004c7c <__errno>
 8001a56:	2316      	movs	r3, #22
 8001a58:	6003      	str	r3, [r0, #0]
 8001a5a:	e7fe      	b.n	8001a5a <_exit+0xa>

08001a5c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <_sbrk+0x30>)
{
 8001a5e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001a60:	6819      	ldr	r1, [r3, #0]
{
 8001a62:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001a64:	b909      	cbnz	r1, 8001a6a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <_sbrk+0x34>)
 8001a68:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	4909      	ldr	r1, [pc, #36]	; (8001a94 <_sbrk+0x38>)
 8001a6e:	4c0a      	ldr	r4, [pc, #40]	; (8001a98 <_sbrk+0x3c>)
 8001a70:	4402      	add	r2, r0
 8001a72:	1b09      	subs	r1, r1, r4
 8001a74:	428a      	cmp	r2, r1
 8001a76:	d906      	bls.n	8001a86 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001a78:	f003 f900 	bl	8004c7c <__errno>
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001a84:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001a86:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001a88:	e7fc      	b.n	8001a84 <_sbrk+0x28>
 8001a8a:	bf00      	nop
 8001a8c:	20000440 	.word	0x20000440
 8001a90:	200015f8 	.word	0x200015f8
 8001a94:	20005000 	.word	0x20005000
 8001a98:	00000400 	.word	0x00000400

08001a9c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a9c:	4770      	bx	lr
	...

08001aa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001aa0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001aa2:	e003      	b.n	8001aac <LoopCopyDataInit>

08001aa4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001aa6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001aa8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001aaa:	3104      	adds	r1, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001aac:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ab0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ab2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ab4:	d3f6      	bcc.n	8001aa4 <CopyDataInit>
  ldr r2, =_sbss
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ab8:	e002      	b.n	8001ac0 <LoopFillZerobss>

08001aba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001abc:	f842 3b04 	str.w	r3, [r2], #4

08001ac0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ac2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ac4:	d3f9      	bcc.n	8001aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ac6:	f7ff ffe9 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aca:	f003 f8dd 	bl	8004c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ace:	f7ff fe67 	bl	80017a0 <main>
  bx lr
 8001ad2:	4770      	bx	lr
  ldr r3, =_sidata
 8001ad4:	0800710c 	.word	0x0800710c
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001adc:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 8001ae0:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 8001ae4:	200015f8 	.word	0x200015f8

08001ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_2_IRQHandler>
	...

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_InitTick+0x3c>)
{
 8001af0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af2:	7818      	ldrb	r0, [r3, #0]
 8001af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001afc:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_InitTick+0x40>)
 8001afe:	6810      	ldr	r0, [r2, #0]
 8001b00:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b04:	f000 f8a0 	bl	8001c48 <HAL_SYSTICK_Config>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	b958      	cbnz	r0, 8001b24 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0c:	2d0f      	cmp	r5, #15
 8001b0e:	d809      	bhi.n	8001b24 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	4602      	mov	r2, r0
 8001b12:	4629      	mov	r1, r5
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b18:	f000 f854 	bl	8001bc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <HAL_InitTick+0x44>)
 8001b20:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001b22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001b24:	2001      	movs	r0, #1
 8001b26:	e7fc      	b.n	8001b22 <HAL_InitTick+0x36>
 8001b28:	20000004 	.word	0x20000004
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000008 	.word	0x20000008

08001b34 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x20>)
{
 8001b36:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b42:	f000 f82d 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff ffd0 	bl	8001aec <HAL_InitTick>
  HAL_MspInit();
 8001b4c:	f7ff ff32 	bl	80019b4 <HAL_MspInit>
}
 8001b50:	2000      	movs	r0, #0
 8001b52:	bd08      	pop	{r3, pc}
 8001b54:	40022000 	.word	0x40022000

08001b58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_IncTick+0x10>)
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_IncTick+0x14>)
 8001b5c:	6811      	ldr	r1, [r2, #0]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	440b      	add	r3, r1
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000670 	.word	0x20000670
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b70:	4b01      	ldr	r3, [pc, #4]	; (8001b78 <HAL_GetTick+0x8>)
 8001b72:	6818      	ldr	r0, [r3, #0]
}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000670 	.word	0x20000670

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff fff6 	bl	8001b70 <HAL_GetTick>
 8001b84:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b86:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001b88:	bf1e      	ittt	ne
 8001b8a:	4b04      	ldrne	r3, [pc, #16]	; (8001b9c <HAL_Delay+0x20>)
 8001b8c:	781b      	ldrbne	r3, [r3, #0]
 8001b8e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b90:	f7ff ffee 	bl	8001b70 <HAL_GetTick>
 8001b94:	1b40      	subs	r0, r0, r5
 8001b96:	42a0      	cmp	r0, r4
 8001b98:	d3fa      	bcc.n	8001b90 <HAL_Delay+0x14>
  {
  }
}
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	20000004 	.word	0x20000004

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001bba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001bbc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc6:	b570      	push	{r4, r5, r6, lr}
 8001bc8:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bce:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd2:	f1c4 0507 	rsb	r5, r4, #7
 8001bd6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	bf28      	it	cs
 8001bde:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be0:	2b06      	cmp	r3, #6
 8001be2:	bf98      	it	ls
 8001be4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	bf88      	it	hi
 8001bec:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bee:	ea21 0303 	bic.w	r3, r1, r3
 8001bf2:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	fa06 f404 	lsl.w	r4, r6, r4
 8001bf8:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfe:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	bfa8      	it	ge
 8001c04:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001c08:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	bfb8      	it	lt
 8001c0e:	4a06      	ldrlt	r2, [pc, #24]	; (8001c28 <HAL_NVIC_SetPriority+0x64>)
 8001c10:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	bfab      	itete	ge
 8001c14:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
 8001c24:	e000ed00 	.word	0xe000ed00
 8001c28:	e000ed14 	.word	0xe000ed14

08001c2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	db08      	blt.n	8001c42 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c30:	2301      	movs	r3, #1
 8001c32:	0942      	lsrs	r2, r0, #5
 8001c34:	f000 001f 	and.w	r0, r0, #31
 8001c38:	fa03 f000 	lsl.w	r0, r3, r0
 8001c3c:	4b01      	ldr	r3, [pc, #4]	; (8001c44 <HAL_NVIC_EnableIRQ+0x18>)
 8001c3e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	3801      	subs	r0, #1
 8001c4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001c4e:	d20a      	bcs.n	8001c66 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c78:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001c7a:	4626      	mov	r6, r4
 8001c7c:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c7e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001e24 <HAL_GPIO_Init+0x1b0>
 8001c82:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001e28 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	680a      	ldr	r2, [r1, #0]
 8001c88:	fa32 f506 	lsrs.w	r5, r2, r6
 8001c8c:	d102      	bne.n	8001c94 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001c8e:	b003      	add	sp, #12
 8001c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001c94:	f04f 0801 	mov.w	r8, #1
 8001c98:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001ca0:	4590      	cmp	r8, r2
 8001ca2:	d17e      	bne.n	8001da2 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8001ca4:	684d      	ldr	r5, [r1, #4]
 8001ca6:	2d12      	cmp	r5, #18
 8001ca8:	f000 80a9 	beq.w	8001dfe <HAL_GPIO_Init+0x18a>
 8001cac:	f200 8082 	bhi.w	8001db4 <HAL_GPIO_Init+0x140>
 8001cb0:	2d02      	cmp	r5, #2
 8001cb2:	f000 80a1 	beq.w	8001df8 <HAL_GPIO_Init+0x184>
 8001cb6:	d876      	bhi.n	8001da6 <HAL_GPIO_Init+0x132>
 8001cb8:	2d00      	cmp	r5, #0
 8001cba:	f000 8088 	beq.w	8001dce <HAL_GPIO_Init+0x15a>
 8001cbe:	2d01      	cmp	r5, #1
 8001cc0:	f000 8098 	beq.w	8001df4 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc8:	2aff      	cmp	r2, #255	; 0xff
 8001cca:	bf93      	iteet	ls
 8001ccc:	4682      	movls	sl, r0
 8001cce:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001cd2:	3d08      	subhi	r5, #8
 8001cd4:	f8d0 b000 	ldrls.w	fp, [r0]
 8001cd8:	bf92      	itee	ls
 8001cda:	00b5      	lslls	r5, r6, #2
 8001cdc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001ce0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce2:	fa09 f805 	lsl.w	r8, r9, r5
 8001ce6:	ea2b 0808 	bic.w	r8, fp, r8
 8001cea:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cee:	bf88      	it	hi
 8001cf0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf4:	ea48 0505 	orr.w	r5, r8, r5
 8001cf8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001d00:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001d04:	d04d      	beq.n	8001da2 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d06:	4f44      	ldr	r7, [pc, #272]	; (8001e18 <HAL_GPIO_Init+0x1a4>)
 8001d08:	f026 0803 	bic.w	r8, r6, #3
 8001d0c:	69bd      	ldr	r5, [r7, #24]
 8001d0e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001d12:	f045 0501 	orr.w	r5, r5, #1
 8001d16:	61bd      	str	r5, [r7, #24]
 8001d18:	69bd      	ldr	r5, [r7, #24]
 8001d1a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001d1e:	f005 0501 	and.w	r5, r5, #1
 8001d22:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d24:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d28:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d2a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001d2e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d32:	fa09 f90b 	lsl.w	r9, r9, fp
 8001d36:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d3a:	4d38      	ldr	r5, [pc, #224]	; (8001e1c <HAL_GPIO_Init+0x1a8>)
 8001d3c:	42a8      	cmp	r0, r5
 8001d3e:	d063      	beq.n	8001e08 <HAL_GPIO_Init+0x194>
 8001d40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d44:	42a8      	cmp	r0, r5
 8001d46:	d061      	beq.n	8001e0c <HAL_GPIO_Init+0x198>
 8001d48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d4c:	42a8      	cmp	r0, r5
 8001d4e:	d05f      	beq.n	8001e10 <HAL_GPIO_Init+0x19c>
 8001d50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d54:	42a8      	cmp	r0, r5
 8001d56:	bf0c      	ite	eq
 8001d58:	2503      	moveq	r5, #3
 8001d5a:	2504      	movne	r5, #4
 8001d5c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001d60:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001d64:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001d68:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001d6e:	bf14      	ite	ne
 8001d70:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d72:	4395      	biceq	r5, r2
 8001d74:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001d76:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d78:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001d7c:	bf14      	ite	ne
 8001d7e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d80:	4395      	biceq	r5, r2
 8001d82:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d84:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d86:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d8a:	bf14      	ite	ne
 8001d8c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d8e:	4395      	biceq	r5, r2
 8001d90:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d92:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d98:	bf14      	ite	ne
 8001d9a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d9c:	ea25 0202 	biceq.w	r2, r5, r2
 8001da0:	60da      	str	r2, [r3, #12]
	position++;
 8001da2:	3601      	adds	r6, #1
 8001da4:	e76f      	b.n	8001c86 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001da6:	2d03      	cmp	r5, #3
 8001da8:	d022      	beq.n	8001df0 <HAL_GPIO_Init+0x17c>
 8001daa:	2d11      	cmp	r5, #17
 8001dac:	d18a      	bne.n	8001cc4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dae:	68cc      	ldr	r4, [r1, #12]
 8001db0:	3404      	adds	r4, #4
          break;
 8001db2:	e787      	b.n	8001cc4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001db4:	4f1a      	ldr	r7, [pc, #104]	; (8001e20 <HAL_GPIO_Init+0x1ac>)
 8001db6:	42bd      	cmp	r5, r7
 8001db8:	d009      	beq.n	8001dce <HAL_GPIO_Init+0x15a>
 8001dba:	d812      	bhi.n	8001de2 <HAL_GPIO_Init+0x16e>
 8001dbc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001e2c <HAL_GPIO_Init+0x1b8>
 8001dc0:	454d      	cmp	r5, r9
 8001dc2:	d004      	beq.n	8001dce <HAL_GPIO_Init+0x15a>
 8001dc4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001dc8:	454d      	cmp	r5, r9
 8001dca:	f47f af7b 	bne.w	8001cc4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dce:	688c      	ldr	r4, [r1, #8]
 8001dd0:	b1c4      	cbz	r4, 8001e04 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dd2:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001dd4:	bf0c      	ite	eq
 8001dd6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001dda:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dde:	2408      	movs	r4, #8
 8001de0:	e770      	b.n	8001cc4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001de2:	4565      	cmp	r5, ip
 8001de4:	d0f3      	beq.n	8001dce <HAL_GPIO_Init+0x15a>
 8001de6:	4575      	cmp	r5, lr
 8001de8:	d0f1      	beq.n	8001dce <HAL_GPIO_Init+0x15a>
 8001dea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001e30 <HAL_GPIO_Init+0x1bc>
 8001dee:	e7eb      	b.n	8001dc8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001df0:	2400      	movs	r4, #0
 8001df2:	e767      	b.n	8001cc4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df4:	68cc      	ldr	r4, [r1, #12]
          break;
 8001df6:	e765      	b.n	8001cc4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df8:	68cc      	ldr	r4, [r1, #12]
 8001dfa:	3408      	adds	r4, #8
          break;
 8001dfc:	e762      	b.n	8001cc4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dfe:	68cc      	ldr	r4, [r1, #12]
 8001e00:	340c      	adds	r4, #12
          break;
 8001e02:	e75f      	b.n	8001cc4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e04:	2404      	movs	r4, #4
 8001e06:	e75d      	b.n	8001cc4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e08:	2500      	movs	r5, #0
 8001e0a:	e7a7      	b.n	8001d5c <HAL_GPIO_Init+0xe8>
 8001e0c:	2501      	movs	r5, #1
 8001e0e:	e7a5      	b.n	8001d5c <HAL_GPIO_Init+0xe8>
 8001e10:	2502      	movs	r5, #2
 8001e12:	e7a3      	b.n	8001d5c <HAL_GPIO_Init+0xe8>
 8001e14:	40010400 	.word	0x40010400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010800 	.word	0x40010800
 8001e20:	10210000 	.word	0x10210000
 8001e24:	10310000 	.word	0x10310000
 8001e28:	10320000 	.word	0x10320000
 8001e2c:	10110000 	.word	0x10110000
 8001e30:	10220000 	.word	0x10220000

08001e34 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e34:	6883      	ldr	r3, [r0, #8]
 8001e36:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001e38:	bf14      	ite	ne
 8001e3a:	2001      	movne	r0, #1
 8001e3c:	2000      	moveq	r0, #0
 8001e3e:	4770      	bx	lr

08001e40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e40:	b10a      	cbz	r2, 8001e46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e42:	6101      	str	r1, [r0, #16]
  }
}
 8001e44:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e46:	0409      	lsls	r1, r1, #16
 8001e48:	e7fb      	b.n	8001e42 <HAL_GPIO_WritePin+0x2>

08001e4a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e4a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e4c:	ea01 0203 	and.w	r2, r1, r3
 8001e50:	ea21 0103 	bic.w	r1, r1, r3
 8001e54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001e58:	6101      	str	r1, [r0, #16]
}
 8001e5a:	4770      	bx	lr

08001e5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e5e:	4604      	mov	r4, r0
{
 8001e60:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001e62:	b310      	cbz	r0, 8001eaa <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e64:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8001e68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e6c:	b91b      	cbnz	r3, 8001e76 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e6e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e72:	f002 fdb5 	bl	80049e0 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e76:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e78:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e7a:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8001e7c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e80:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8001e84:	f001 fa4e 	bl	8003324 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	4625      	mov	r5, r4
 8001e90:	6033      	str	r3, [r6, #0]
 8001e92:	1d27      	adds	r7, r4, #4
 8001e94:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001e98:	f855 0b10 	ldr.w	r0, [r5], #16
 8001e9c:	f001 fa32 	bl	8003304 <USB_CoreInit>
 8001ea0:	4606      	mov	r6, r0
 8001ea2:	b120      	cbz	r0, 8001eae <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8001eaa:	2501      	movs	r5, #1
 8001eac:	e04b      	b.n	8001f46 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eae:	4601      	mov	r1, r0
 8001eb0:	6820      	ldr	r0, [r4, #0]
 8001eb2:	f001 fa41 	bl	8003338 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb6:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eb8:	f04f 0e01 	mov.w	lr, #1
 8001ebc:	2628      	movs	r6, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ebe:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001ec4:	b2c2      	uxtb	r2, r0
 8001ec6:	4594      	cmp	ip, r2
 8001ec8:	f100 0001 	add.w	r0, r0, #1
 8001ecc:	d818      	bhi.n	8001f00 <HAL_PCD_Init+0xa4>
 8001ece:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ed0:	2628      	movs	r6, #40	; 0x28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed6:	4584      	cmp	ip, r0
 8001ed8:	f103 0301 	add.w	r3, r3, #1
 8001edc:	d81d      	bhi.n	8001f1a <HAL_PCD_Init+0xbe>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee0:	466e      	mov	r6, sp
 8001ee2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001ee4:	682b      	ldr	r3, [r5, #0]
 8001ee6:	6033      	str	r3, [r6, #0]
 8001ee8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	f001 fa25 	bl	800333c <USB_DevInit>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	b1f8      	cbz	r0, 8001f38 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
 8001efe:	e7d4      	b.n	8001eaa <HAL_PCD_Init+0x4e>
 8001f00:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001f04:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f0c:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f0e:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f12:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f16:	6419      	str	r1, [r3, #64]	; 0x40
 8001f18:	e7d4      	b.n	8001ec4 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8001f1a:	fb06 4200 	mla	r2, r6, r0, r4
 8001f1e:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001f22:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f26:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f2a:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f2e:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f32:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 8001f36:	e7cd      	b.n	8001ed4 <HAL_PCD_Init+0x78>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001f38:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f3c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f40:	6820      	ldr	r0, [r4, #0]
 8001f42:	f001 fc7a 	bl	800383a <USB_DevDisconnect>

  return HAL_OK;
}
 8001f46:	4628      	mov	r0, r5
 8001f48:	b007      	add	sp, #28
 8001f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f4c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8001f4e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8001f52:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d010      	beq.n	8001f7a <HAL_PCD_Start+0x2e>
 8001f58:	2501      	movs	r5, #1
 8001f5a:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001f5e:	6800      	ldr	r0, [r0, #0]
 8001f60:	f001 f9d7 	bl	8003312 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f64:	4629      	mov	r1, r5
 8001f66:	4620      	mov	r0, r4
 8001f68:	f002 fe6b 	bl	8004c42 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f6c:	6820      	ldr	r0, [r4, #0]
 8001f6e:	f001 fc62 	bl	8003836 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001f78:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	e7fc      	b.n	8001f78 <HAL_PCD_Start+0x2c>

08001f7e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001f7e:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8001f82:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001f84:	2a01      	cmp	r2, #1
{
 8001f86:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001f88:	d00b      	beq.n	8001fa2 <HAL_PCD_SetAddress+0x24>
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f90:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f94:	6800      	ldr	r0, [r0, #0]
 8001f96:	f001 fc48 	bl	800382a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001fa0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	e7fc      	b.n	8001fa0 <HAL_PCD_SetAddress+0x22>
	...

08001fa8 <HAL_PCD_IRQHandler>:
{
 8001fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fac:	4604      	mov	r4, r0
 8001fae:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001fb0:	6800      	ldr	r0, [r0, #0]
 8001fb2:	f001 fc44 	bl	800383e <USB_ReadInterrupts>
 8001fb6:	0402      	lsls	r2, r0, #16
 8001fb8:	d509      	bpl.n	8001fce <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fba:	f8df 9828 	ldr.w	r9, [pc, #2088]	; 80027e4 <HAL_PCD_IRQHandler+0x83c>
 8001fbe:	f8df 8828 	ldr.w	r8, [pc, #2088]	; 80027e8 <HAL_PCD_IRQHandler+0x840>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fc2:	6820      	ldr	r0, [r4, #0]
 8001fc4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	f100 80bc 	bmi.w	8002146 <HAL_PCD_IRQHandler+0x19e>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001fce:	6820      	ldr	r0, [r4, #0]
 8001fd0:	f001 fc35 	bl	800383e <USB_ReadInterrupts>
 8001fd4:	0543      	lsls	r3, r0, #21
 8001fd6:	d50f      	bpl.n	8001ff8 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fd8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001fda:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fdc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fe4:	041b      	lsls	r3, r3, #16
 8001fe6:	0c1b      	lsrs	r3, r3, #16
 8001fe8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001fec:	f002 fd33 	bl	8004a56 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7ff ffc3 	bl	8001f7e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ff8:	6820      	ldr	r0, [r4, #0]
 8001ffa:	f001 fc20 	bl	800383e <USB_ReadInterrupts>
 8001ffe:	0447      	lsls	r7, r0, #17
 8002000:	d508      	bpl.n	8002014 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002014:	6820      	ldr	r0, [r4, #0]
 8002016:	f001 fc12 	bl	800383e <USB_ReadInterrupts>
 800201a:	0486      	lsls	r6, r0, #18
 800201c:	d508      	bpl.n	8002030 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800201e:	6822      	ldr	r2, [r4, #0]
 8002020:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	0c1b      	lsrs	r3, r3, #16
 800202c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002030:	6820      	ldr	r0, [r4, #0]
 8002032:	f001 fc04 	bl	800383e <USB_ReadInterrupts>
 8002036:	04c5      	lsls	r5, r0, #19
 8002038:	d51c      	bpl.n	8002074 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800203a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800203c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800203e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800204e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002052:	f023 0308 	bic.w	r3, r3, #8
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	0c1b      	lsrs	r3, r3, #16
 800205a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800205e:	f002 fd1d 	bl	8004a9c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002062:	6822      	ldr	r2, [r4, #0]
 8002064:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800206c:	041b      	lsls	r3, r3, #16
 800206e:	0c1b      	lsrs	r3, r3, #16
 8002070:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002074:	6820      	ldr	r0, [r4, #0]
 8002076:	f001 fbe2 	bl	800383e <USB_ReadInterrupts>
 800207a:	0500      	lsls	r0, r0, #20
 800207c:	d541      	bpl.n	8002102 <HAL_PCD_IRQHandler+0x15a>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800207e:	2200      	movs	r2, #0
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002086:	f82d 1012 	strh.w	r1, [sp, r2, lsl #1]
 800208a:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 800208c:	2a08      	cmp	r2, #8
 800208e:	d1f8      	bne.n	8002082 <HAL_PCD_IRQHandler+0xda>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002090:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800209c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	0412      	lsls	r2, r2, #16
 80020a6:	0c12      	lsrs	r2, r2, #16
 80020a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80020ac:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80020b0:	0551      	lsls	r1, r2, #21
 80020b2:	d5fb      	bpl.n	80020ac <HAL_PCD_IRQHandler+0x104>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020b4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020bc:	0412      	lsls	r2, r2, #16
 80020be:	0c12      	lsrs	r2, r2, #16
 80020c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80020c4:	2200      	movs	r2, #0
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80020c6:	f83d 1012 	ldrh.w	r1, [sp, r2, lsl #1]
 80020ca:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 80020ce:	3201      	adds	r2, #1
    for (i = 0U; i < 8U; i++)
 80020d0:	2a08      	cmp	r2, #8
 80020d2:	d1f8      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x11e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020d4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80020d8:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80020da:	f042 0208 	orr.w	r2, r2, #8
 80020de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80020e2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80020e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ea:	0412      	lsls	r2, r2, #16
 80020ec:	0c12      	lsrs	r2, r2, #16
 80020ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80020f2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80020f6:	f042 0204 	orr.w	r2, r2, #4
 80020fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80020fe:	f002 fcbd 	bl	8004a7c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002102:	6820      	ldr	r0, [r4, #0]
 8002104:	f001 fb9b 	bl	800383e <USB_ReadInterrupts>
 8002108:	0582      	lsls	r2, r0, #22
 800210a:	d50b      	bpl.n	8002124 <HAL_PCD_IRQHandler+0x17c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800210c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800210e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002110:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002120:	f002 fc95 	bl	8004a4e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002124:	6820      	ldr	r0, [r4, #0]
 8002126:	f001 fb8a 	bl	800383e <USB_ReadInterrupts>
 800212a:	05c3      	lsls	r3, r0, #23
 800212c:	d508      	bpl.n	8002140 <HAL_PCD_IRQHandler+0x198>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800212e:	6822      	ldr	r2, [r4, #0]
 8002130:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	0c1b      	lsrs	r3, r3, #16
 800213c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8002140:	b005      	add	sp, #20
 8002142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8002146:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800214a:	b289      	uxth	r1, r1
    if (epindex == 0U)
 800214c:	f011 060f 	ands.w	r6, r1, #15
 8002150:	f040 80b1 	bne.w	80022b6 <HAL_PCD_IRQHandler+0x30e>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002154:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002158:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800215a:	d12a      	bne.n	80021b2 <HAL_PCD_IRQHandler+0x20a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800215c:	ea09 0303 	and.w	r3, r9, r3
 8002160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002164:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002166:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800216a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800216e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002172:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002176:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800217a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800217c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002180:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002182:	4413      	add	r3, r2
 8002184:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002186:	4620      	mov	r0, r4
 8002188:	f002 fc59 	bl	8004a3e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800218c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002190:	2b00      	cmp	r3, #0
 8002192:	f43f af16 	beq.w	8001fc2 <HAL_PCD_IRQHandler+0x1a>
 8002196:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002198:	2a00      	cmp	r2, #0
 800219a:	f47f af12 	bne.w	8001fc2 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800219e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80021a2:	6821      	ldr	r1, [r4, #0]
 80021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a8:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021ac:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80021b0:	e707      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021b2:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021b4:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80021b8:	d020      	beq.n	80021fc <HAL_PCD_IRQHandler+0x254>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80021be:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021c2:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80021ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80021ce:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021d2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80021d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021da:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021de:	f001 fdef 	bl	8003dc0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021e2:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80021e4:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021e6:	8813      	ldrh	r3, [r2, #0]
 80021e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ec:	051b      	lsls	r3, r3, #20
 80021ee:	0d1b      	lsrs	r3, r3, #20
 80021f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80021f6:	f002 fc13 	bl	8004a20 <HAL_PCD_SetupStageCallback>
 80021fa:	e6e2      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021fc:	041f      	lsls	r7, r3, #16
 80021fe:	f57f aee0 	bpl.w	8001fc2 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002202:	8803      	ldrh	r3, [r0, #0]
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002208:	051b      	lsls	r3, r3, #20
 800220a:	0d1b      	lsrs	r3, r3, #20
 800220c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002210:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002212:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002216:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800221a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800221e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002222:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800222e:	b18b      	cbz	r3, 8002254 <HAL_PCD_IRQHandler+0x2ac>
 8002230:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002234:	b171      	cbz	r1, 8002254 <HAL_PCD_IRQHandler+0x2ac>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002236:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800223a:	f001 fdc1 	bl	8003dc0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800223e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002242:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002246:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002248:	4413      	add	r3, r2
 800224a:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800224e:	4620      	mov	r0, r4
 8002250:	f002 fbec 	bl	8004a2c <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002254:	6821      	ldr	r1, [r4, #0]
 8002256:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 800225a:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800225e:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8002262:	b29b      	uxth	r3, r3
 8002264:	b9bd      	cbnz	r5, 8002296 <HAL_PCD_IRQHandler+0x2ee>
 8002266:	5ac2      	ldrh	r2, [r0, r3]
 8002268:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800226c:	0412      	lsls	r2, r2, #16
 800226e:	0c12      	lsrs	r2, r2, #16
 8002270:	52c2      	strh	r2, [r0, r3]
 8002272:	5ac2      	ldrh	r2, [r0, r3]
 8002274:	ea48 0202 	orr.w	r2, r8, r2
 8002278:	b292      	uxth	r2, r2
 800227a:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800227c:	880b      	ldrh	r3, [r1, #0]
 800227e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800228a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002292:	800b      	strh	r3, [r1, #0]
 8002294:	e695      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002296:	2d3e      	cmp	r5, #62	; 0x3e
 8002298:	d805      	bhi.n	80022a6 <HAL_PCD_IRQHandler+0x2fe>
 800229a:	086a      	lsrs	r2, r5, #1
 800229c:	07ee      	lsls	r6, r5, #31
 800229e:	bf48      	it	mi
 80022a0:	3201      	addmi	r2, #1
 80022a2:	0292      	lsls	r2, r2, #10
 80022a4:	e7e8      	b.n	8002278 <HAL_PCD_IRQHandler+0x2d0>
 80022a6:	096a      	lsrs	r2, r5, #5
 80022a8:	06ed      	lsls	r5, r5, #27
 80022aa:	bf08      	it	eq
 80022ac:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80022b0:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 80022b4:	e7e0      	b.n	8002278 <HAL_PCD_IRQHandler+0x2d0>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022b6:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
 80022ba:	b2bf      	uxth	r7, r7
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022bc:	0439      	lsls	r1, r7, #16
 80022be:	f140 80f2 	bpl.w	80024a6 <HAL_PCD_IRQHandler+0x4fe>
        if (ep->doublebuffer == 0U)
 80022c2:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022c4:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80022c8:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d0:	051b      	lsls	r3, r3, #20
 80022d2:	0d1b      	lsrs	r3, r3, #20
 80022d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d8:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80022dc:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80022e0:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80022e4:	b9ab      	cbnz	r3, 8002312 <HAL_PCD_IRQHandler+0x36a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022e6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80022ea:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80022ee:	3306      	adds	r3, #6
 80022f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80022f4:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 80022f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80022fc:	2d00      	cmp	r5, #0
 80022fe:	f000 80b6 	beq.w	800246e <HAL_PCD_IRQHandler+0x4c6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002302:	462b      	mov	r3, r5
 8002304:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002308:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800230c:	f001 fd58 	bl	8003dc0 <USB_ReadPMA>
 8002310:	e0ad      	b.n	800246e <HAL_PCD_IRQHandler+0x4c6>
          if (ep->type == EP_TYPE_BULK)
 8002312:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8002316:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800231a:	2b02      	cmp	r3, #2
 800231c:	f040 8089 	bne.w	8002432 <HAL_PCD_IRQHandler+0x48a>
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002320:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 8002324:	ea4f 05c2 	mov.w	r5, r2, lsl #3
 8002328:	f8d1 3180 	ldr.w	r3, [r1, #384]	; 0x180
 800232c:	f007 0e40 	and.w	lr, r7, #64	; 0x40
 8002330:	d03e      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x408>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002332:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 8002336:	4455      	add	r5, sl
 8002338:	3502      	adds	r5, #2
 800233a:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 800233e:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8002342:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
    }
    else
    {
      ep->xfer_len = 0U;
 8002344:	bf8c      	ite	hi
 8002346:	2300      	movhi	r3, #0
      ep->xfer_len -= count;
 8002348:	1b5b      	subls	r3, r3, r5
      ep->xfer_len = 0U;
 800234a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
 800234e:	2328      	movs	r3, #40	; 0x28
 8002350:	fb03 4306 	mla	r3, r3, r6, r4
 8002354:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002358:	b96b      	cbnz	r3, 8002376 <HAL_PCD_IRQHandler+0x3ce>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800235a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800235e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002366:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002372:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002376:	f1be 0f00 	cmp.w	lr, #0
 800237a:	d010      	beq.n	800239e <HAL_PCD_IRQHandler+0x3f6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800237c:	2328      	movs	r3, #40	; 0x28
 800237e:	fb03 4306 	mla	r3, r3, r6, r4
 8002382:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8002386:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800238a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238e:	051b      	lsls	r3, r3, #20
 8002390:	0d1b      	lsrs	r3, r3, #20
 8002392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002396:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800239a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800239e:	2d00      	cmp	r5, #0
 80023a0:	d065      	beq.n	800246e <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023a2:	2128      	movs	r1, #40	; 0x28
 80023a4:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023a8:	462b      	mov	r3, r5
 80023aa:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80023ae:	e7ab      	b.n	8002308 <HAL_PCD_IRQHandler+0x360>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023b0:	f8b0 b050 	ldrh.w	fp, [r0, #80]	; 0x50
 80023b4:	445d      	add	r5, fp
 80023b6:	3506      	adds	r5, #6
 80023b8:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 80023bc:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80023c0:	429d      	cmp	r5, r3
    {
      ep->xfer_len -= count;
 80023c2:	bf9c      	itt	ls
 80023c4:	1b5b      	subls	r3, r3, r5
 80023c6:	f8c1 3180 	strls.w	r3, [r1, #384]	; 0x180
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80023ca:	f04f 0328 	mov.w	r3, #40	; 0x28
 80023ce:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 80023d2:	bf88      	it	hi
 80023d4:	f8c1 a180 	strhi.w	sl, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80023d8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80023dc:	b96b      	cbnz	r3, 80023fa <HAL_PCD_IRQHandler+0x452>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023fa:	f1be 0f00 	cmp.w	lr, #0
 80023fe:	d110      	bne.n	8002422 <HAL_PCD_IRQHandler+0x47a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002400:	2328      	movs	r3, #40	; 0x28
 8002402:	fb03 4306 	mla	r3, r3, r6, r4
 8002406:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 800240a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800240e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002412:	051b      	lsls	r3, r3, #20
 8002414:	0d1b      	lsrs	r3, r3, #20
 8002416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800241e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8002422:	b325      	cbz	r5, 800246e <HAL_PCD_IRQHandler+0x4c6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002424:	2128      	movs	r1, #40	; 0x28
 8002426:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800242a:	462b      	mov	r3, r5
 800242c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002430:	e76a      	b.n	8002308 <HAL_PCD_IRQHandler+0x360>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002432:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800243a:	051b      	lsls	r3, r3, #20
 800243c:	0d1b      	lsrs	r3, r3, #20
 800243e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002442:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002446:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800244a:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 800244e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002458:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800245c:	d05e      	beq.n	800251c <HAL_PCD_IRQHandler+0x574>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800245e:	3202      	adds	r2, #2
 8002460:	4413      	add	r3, r2
 8002462:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002466:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 800246a:	2d00      	cmp	r5, #0
 800246c:	d19c      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x400>
        ep->xfer_count += count;
 800246e:	2128      	movs	r1, #40	; 0x28
 8002470:	4371      	muls	r1, r6
 8002472:	1863      	adds	r3, r4, r1
 8002474:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002478:	442a      	add	r2, r5
 800247a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800247e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002482:	442a      	add	r2, r5
 8002484:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002488:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800248c:	b11a      	cbz	r2, 8002496 <HAL_PCD_IRQHandler+0x4ee>
 800248e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002492:	429d      	cmp	r5, r3
 8002494:	d24b      	bcs.n	800252e <HAL_PCD_IRQHandler+0x586>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002496:	2328      	movs	r3, #40	; 0x28
 8002498:	fb03 4306 	mla	r3, r3, r6, r4
 800249c:	4620      	mov	r0, r4
 800249e:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80024a2:	f002 fac3 	bl	8004a2c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024a6:	063a      	lsls	r2, r7, #24
 80024a8:	f57f ad8b 	bpl.w	8001fc2 <HAL_PCD_IRQHandler+0x1a>
 80024ac:	2528      	movs	r5, #40	; 0x28
 80024ae:	6820      	ldr	r0, [r4, #0]
 80024b0:	fb05 4506 	mla	r5, r5, r6, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024b4:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80024b8:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80024bc:	ea09 0303 	and.w	r3, r9, r3
 80024c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c4:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 80024c8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80024cc:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d101      	bne.n	80024d8 <HAL_PCD_IRQHandler+0x530>
 80024d4:	05fb      	lsls	r3, r7, #23
 80024d6:	d43d      	bmi.n	8002554 <HAL_PCD_IRQHandler+0x5ac>
          if (ep->xfer_len > TxByteNbre)
 80024d8:	2328      	movs	r3, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024da:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 80024de:	fb03 4c06 	mla	ip, r3, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024e2:	f10e 0e02 	add.w	lr, lr, #2
 80024e6:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 80024ea:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 80024ee:	f8dc 7040 	ldr.w	r7, [ip, #64]	; 0x40
 80024f2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80024f6:	4297      	cmp	r7, r2
            ep->xfer_len = 0U;
 80024f8:	bf92      	itee	ls
 80024fa:	2100      	movls	r1, #0
            ep->xfer_len -= TxByteNbre;
 80024fc:	1abf      	subhi	r7, r7, r2
 80024fe:	f8cc 7040 	strhi.w	r7, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002502:	fb03 4706 	mla	r7, r3, r6, r4
            ep->xfer_len = 0U;
 8002506:	bf98      	it	ls
 8002508:	f8cc 1040 	strls.w	r1, [ip, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800250c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800250e:	b9a9      	cbnz	r1, 800253c <HAL_PCD_IRQHandler+0x594>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002510:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002514:	4620      	mov	r0, r4
 8002516:	f002 fa92 	bl	8004a3e <HAL_PCD_DataInStageCallback>
 800251a:	e552      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800251c:	3206      	adds	r2, #6
 800251e:	4413      	add	r3, r2
 8002520:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8002524:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8002528:	2d00      	cmp	r5, #0
 800252a:	d0a0      	beq.n	800246e <HAL_PCD_IRQHandler+0x4c6>
 800252c:	e77d      	b.n	800242a <HAL_PCD_IRQHandler+0x482>
        ep = &hpcd->OUT_ep[epindex];
 800252e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002532:	4421      	add	r1, r4
 8002534:	6820      	ldr	r0, [r4, #0]
 8002536:	f001 f997 	bl	8003868 <USB_EPStartXfer>
 800253a:	e7b4      	b.n	80024a6 <HAL_PCD_IRQHandler+0x4fe>
            ep->xfer_buff += TxByteNbre;
 800253c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 800253e:	fb06 3303 	mla	r3, r6, r3, r3
            ep->xfer_buff += TxByteNbre;
 8002542:	4411      	add	r1, r2
 8002544:	63f9      	str	r1, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002548:	440a      	add	r2, r1
 800254a:	647a      	str	r2, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800254c:	18e1      	adds	r1, r4, r3
 800254e:	f001 f98b 	bl	8003868 <USB_EPStartXfer>
 8002552:	e536      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x1a>
{
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002554:	f017 0e40 	ands.w	lr, r7, #64	; 0x40
 8002558:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800255c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800255e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002562:	f000 809e 	beq.w	80026a2 <HAL_PCD_IRQHandler+0x6fa>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002566:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 800256a:	b2bf      	uxth	r7, r7
 800256c:	44f4      	add	ip, lr
 800256e:	f10c 0c02 	add.w	ip, ip, #2
 8002572:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]

    if (ep->xfer_len > TxByteNbre)
 8002576:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800257a:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 800257c:	bf2c      	ite	cs
 800257e:	2300      	movcs	r3, #0
      ep->xfer_len -= TxByteNbre;
 8002580:	eba3 030c 	subcc.w	r3, r3, ip
      ep->xfer_len = 0U;
 8002584:	642b      	str	r3, [r5, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002586:	2328      	movs	r3, #40	; 0x28
 8002588:	fb03 4306 	mla	r3, r3, r6, r4
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	b9ab      	cbnz	r3, 80025bc <HAL_PCD_IRQHandler+0x614>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002590:	4620      	mov	r0, r4
 8002592:	f002 fa54 	bl	8004a3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002596:	2f00      	cmp	r7, #0
 8002598:	f000 80a1 	beq.w	80026de <HAL_PCD_IRQHandler+0x736>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800259c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80025a0:	6822      	ldr	r2, [r4, #0]
 80025a2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80025a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025aa:	051b      	lsls	r3, r3, #20
 80025ac:	0d1b      	lsrs	r3, r3, #20
 80025ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80025ba:	e090      	b.n	80026de <HAL_PCD_IRQHandler+0x736>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025bc:	b15f      	cbz	r7, 80025d6 <HAL_PCD_IRQHandler+0x62e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025be:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80025c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c6:	051b      	lsls	r3, r3, #20
 80025c8:	0d1b      	lsrs	r3, r3, #20
 80025ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80025d6:	2328      	movs	r3, #40	; 0x28
 80025d8:	fb03 4306 	mla	r3, r3, r6, r4
 80025dc:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80025e0:	2a01      	cmp	r2, #1
 80025e2:	d17c      	bne.n	80026de <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 80025e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80025e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80025e8:	4462      	add	r2, ip
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80025ec:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80025ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80025f0:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80025f2:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 80025f4:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80025f6:	d325      	bcc.n	8002644 <HAL_PCD_IRQHandler+0x69c>
          ep->xfer_len_db -= len;
 80025f8:	1abf      	subs	r7, r7, r2
 80025fa:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025fc:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8002600:	b293      	uxth	r3, r2
 8002602:	2f00      	cmp	r7, #0
 8002604:	d141      	bne.n	800268a <HAL_PCD_IRQHandler+0x6e2>
 8002606:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800260a:	f200 4c04 	addw	ip, r0, #1028	; 0x404
 800260e:	44bc      	add	ip, r7
 8002610:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8002614:	013f      	lsls	r7, r7, #4
 8002616:	bb02      	cbnz	r2, 800265a <HAL_PCD_IRQHandler+0x6b2>
 8002618:	f83c 2007 	ldrh.w	r2, [ip, r7]
 800261c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002620:	0412      	lsls	r2, r2, #16
 8002622:	0c12      	lsrs	r2, r2, #16
 8002624:	f82c 2007 	strh.w	r2, [ip, r7]
 8002628:	f83c 2007 	ldrh.w	r2, [ip, r7]
 800262c:	ea48 0202 	orr.w	r2, r8, r2
 8002630:	b292      	uxth	r2, r2
 8002632:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002636:	2228      	movs	r2, #40	; 0x28
 8002638:	fb02 4606 	mla	r6, r2, r6, r4
 800263c:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800263e:	f001 f903 	bl	8003848 <USB_WritePMA>
 8002642:	e04c      	b.n	80026de <HAL_PCD_IRQHandler+0x736>
        else if (ep->xfer_len_db == 0U)
 8002644:	b91f      	cbnz	r7, 800264e <HAL_PCD_IRQHandler+0x6a6>
          ep->xfer_fill_db = 0U;
 8002646:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len > TxByteNbre)
 800264a:	4662      	mov	r2, ip
 800264c:	e7d6      	b.n	80025fc <HAL_PCD_IRQHandler+0x654>
          ep->xfer_fill_db = 0U;
 800264e:	2200      	movs	r2, #0
 8002650:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8002654:	649a      	str	r2, [r3, #72]	; 0x48
 8002656:	463a      	mov	r2, r7
 8002658:	e7d0      	b.n	80025fc <HAL_PCD_IRQHandler+0x654>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800265a:	2a3e      	cmp	r2, #62	; 0x3e
 800265c:	d80c      	bhi.n	8002678 <HAL_PCD_IRQHandler+0x6d0>
 800265e:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8002662:	07d2      	lsls	r2, r2, #31
 8002664:	bf48      	it	mi
 8002666:	f10e 0e01 	addmi.w	lr, lr, #1
 800266a:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 800266e:	fa1f fe8e 	uxth.w	lr, lr
 8002672:	f82c e007 	strh.w	lr, [ip, r7]
 8002676:	e7de      	b.n	8002636 <HAL_PCD_IRQHandler+0x68e>
 8002678:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800267c:	06d2      	lsls	r2, r2, #27
 800267e:	bf08      	it	eq
 8002680:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 8002684:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8002688:	e7f1      	b.n	800266e <HAL_PCD_IRQHandler+0x6c6>
 800268a:	2f01      	cmp	r7, #1
 800268c:	d1d3      	bne.n	8002636 <HAL_PCD_IRQHandler+0x68e>
 800268e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002692:	f200 4704 	addw	r7, r0, #1028	; 0x404
 8002696:	4417      	add	r7, r2
 8002698:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	52bb      	strh	r3, [r7, r2]
 80026a0:	e7c9      	b.n	8002636 <HAL_PCD_IRQHandler+0x68e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026a2:	f8b0 a050 	ldrh.w	sl, [r0, #80]	; 0x50
 80026a6:	b2bf      	uxth	r7, r7
 80026a8:	44d4      	add	ip, sl
 80026aa:	f10c 0c06 	add.w	ip, ip, #6
 80026ae:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 80026b2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80026b6:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 80026b8:	bf9c      	itt	ls
 80026ba:	eba3 030c 	subls.w	r3, r3, ip
 80026be:	642b      	strls	r3, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80026c0:	f04f 0328 	mov.w	r3, #40	; 0x28
 80026c4:	fb03 4306 	mla	r3, r3, r6, r4
      ep->xfer_len = 0U;
 80026c8:	bf88      	it	hi
 80026ca:	f8c5 e040 	strhi.w	lr, [r5, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	b9bb      	cbnz	r3, 8002702 <HAL_PCD_IRQHandler+0x75a>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026d2:	4620      	mov	r0, r4
 80026d4:	f002 f9b3 	bl	8004a3e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026d8:	2f00      	cmp	r7, #0
 80026da:	f43f af5f 	beq.w	800259c <HAL_PCD_IRQHandler+0x5f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80026de:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80026e2:	6822      	ldr	r2, [r4, #0]
 80026e4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80026e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80026f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fc:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002700:	e45f      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002702:	b95f      	cbnz	r7, 800271c <HAL_PCD_IRQHandler+0x774>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002704:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270c:	051b      	lsls	r3, r3, #20
 800270e:	0d1b      	lsrs	r3, r3, #20
 8002710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002718:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800271c:	2328      	movs	r3, #40	; 0x28
 800271e:	fb03 4306 	mla	r3, r3, r6, r4
 8002722:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002726:	2a01      	cmp	r2, #1
 8002728:	d1d9      	bne.n	80026de <HAL_PCD_IRQHandler+0x736>
        ep->xfer_count += TxByteNbre;
 800272a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800272c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800272e:	4462      	add	r2, ip
 8002730:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002732:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8002734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8002736:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8002738:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 800273a:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800273c:	d323      	bcc.n	8002786 <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db -= len;
 800273e:	1abf      	subs	r7, r7, r2
 8002740:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002742:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8002746:	b293      	uxth	r3, r2
 8002748:	2f00      	cmp	r7, #0
 800274a:	d13f      	bne.n	80027cc <HAL_PCD_IRQHandler+0x824>
 800274c:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8002750:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8002754:	44bc      	add	ip, r7
 8002756:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 800275a:	013f      	lsls	r7, r7, #4
 800275c:	b9f2      	cbnz	r2, 800279c <HAL_PCD_IRQHandler+0x7f4>
 800275e:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002762:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002766:	0412      	lsls	r2, r2, #16
 8002768:	0c12      	lsrs	r2, r2, #16
 800276a:	f82c 2007 	strh.w	r2, [ip, r7]
 800276e:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8002772:	ea48 0202 	orr.w	r2, r8, r2
 8002776:	b292      	uxth	r2, r2
 8002778:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800277c:	2228      	movs	r2, #40	; 0x28
 800277e:	fb02 4606 	mla	r6, r2, r6, r4
 8002782:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8002784:	e75b      	b.n	800263e <HAL_PCD_IRQHandler+0x696>
        else if (ep->xfer_len_db == 0U)
 8002786:	b91f      	cbnz	r7, 8002790 <HAL_PCD_IRQHandler+0x7e8>
          ep->xfer_fill_db = 0U;
 8002788:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
    if (ep->xfer_len >= TxByteNbre)
 800278c:	4662      	mov	r2, ip
 800278e:	e7d8      	b.n	8002742 <HAL_PCD_IRQHandler+0x79a>
          ep->xfer_len_db = 0U;
 8002790:	2200      	movs	r2, #0
 8002792:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8002794:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002798:	463a      	mov	r2, r7
 800279a:	e7d2      	b.n	8002742 <HAL_PCD_IRQHandler+0x79a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800279c:	2a3e      	cmp	r2, #62	; 0x3e
 800279e:	d80c      	bhi.n	80027ba <HAL_PCD_IRQHandler+0x812>
 80027a0:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80027a4:	07d2      	lsls	r2, r2, #31
 80027a6:	bf48      	it	mi
 80027a8:	f10e 0e01 	addmi.w	lr, lr, #1
 80027ac:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80027b0:	fa1f fe8e 	uxth.w	lr, lr
 80027b4:	f82c e007 	strh.w	lr, [ip, r7]
 80027b8:	e7e0      	b.n	800277c <HAL_PCD_IRQHandler+0x7d4>
 80027ba:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 80027be:	06d2      	lsls	r2, r2, #27
 80027c0:	bf08      	it	eq
 80027c2:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 80027c6:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 80027ca:	e7f1      	b.n	80027b0 <HAL_PCD_IRQHandler+0x808>
 80027cc:	2f01      	cmp	r7, #1
 80027ce:	d1d5      	bne.n	800277c <HAL_PCD_IRQHandler+0x7d4>
 80027d0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80027d4:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 80027d8:	4417      	add	r7, r2
 80027da:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	52bb      	strh	r3, [r7, r2]
 80027e2:	e7cb      	b.n	800277c <HAL_PCD_IRQHandler+0x7d4>
 80027e4:	ffff8f0f 	.word	0xffff8f0f
 80027e8:	ffff8000 	.word	0xffff8000

080027ec <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80027ec:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	f001 0507 	and.w	r5, r1, #7
 80027f6:	4604      	mov	r4, r0
 80027f8:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80027fc:	d01c      	beq.n	8002838 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fe:	fb05 1101 	mla	r1, r5, r1, r1
 8002802:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002804:	2001      	movs	r0, #1
 8002806:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8002808:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800280a:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800280c:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 800280e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002810:	b102      	cbz	r2, 8002814 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8002812:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8002814:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002816:	bf04      	itt	eq
 8002818:	2300      	moveq	r3, #0
 800281a:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800281c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002820:	2b01      	cmp	r3, #1
 8002822:	d013      	beq.n	800284c <HAL_PCD_EP_Open+0x60>
 8002824:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002826:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002828:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800282c:	f000 fd9a 	bl	8003364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002830:	2000      	movs	r0, #0
 8002832:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002836:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8002838:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800283a:	fb01 f005 	mul.w	r0, r1, r5
 800283e:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 8002842:	4420      	add	r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002844:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002846:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
 800284a:	e7dd      	b.n	8002808 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800284c:	2002      	movs	r0, #2
 800284e:	e7f2      	b.n	8002836 <HAL_PCD_EP_Open+0x4a>

08002850 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8002850:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002854:	b510      	push	{r4, lr}
 8002856:	f001 0207 	and.w	r2, r1, #7
 800285a:	4604      	mov	r4, r0
 800285c:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8002860:	d013      	beq.n	800288a <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8002862:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002864:	fb02 1101 	mla	r1, r2, r1, r1
 8002868:	4401      	add	r1, r0
    ep->is_in = 1U;
 800286a:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800286c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800286e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002872:	2b01      	cmp	r3, #1
 8002874:	d013      	beq.n	800289e <HAL_PCD_EP_Close+0x4e>
 8002876:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002878:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800287a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800287e:	f000 feaf 	bl	80035e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002882:	2000      	movs	r0, #0
 8002884:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002888:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288a:	fb01 f302 	mul.w	r3, r1, r2
 800288e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8002892:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002894:	4403      	add	r3, r0
 8002896:	2000      	movs	r0, #0
 8002898:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 800289c:	e7e6      	b.n	800286c <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 800289e:	2002      	movs	r0, #2
 80028a0:	e7f2      	b.n	8002888 <HAL_PCD_EP_Close+0x38>

080028a2 <HAL_PCD_EP_Receive>:
{
 80028a2:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80028a4:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 80028a6:	2600      	movs	r6, #0
 80028a8:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80028ac:	434c      	muls	r4, r1
 80028ae:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b0:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b4:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028b8:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80028ba:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 80028be:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 80028c2:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 80028c6:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028ca:	6800      	ldr	r0, [r0, #0]
 80028cc:	f000 ffcc 	bl	8003868 <USB_EPStartXfer>
}
 80028d0:	4630      	mov	r0, r6
 80028d2:	bd70      	pop	{r4, r5, r6, pc}

080028d4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028d4:	2328      	movs	r3, #40	; 0x28
 80028d6:	f001 0107 	and.w	r1, r1, #7
 80028da:	fb03 0101 	mla	r1, r3, r1, r0
}
 80028de:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80028e2:	4770      	bx	lr

080028e4 <HAL_PCD_EP_Transmit>:
{
 80028e4:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80028e6:	2528      	movs	r5, #40	; 0x28
 80028e8:	f001 0107 	and.w	r1, r1, #7
 80028ec:	fb05 0401 	mla	r4, r5, r1, r0
  ep->xfer_count = 0U;
 80028f0:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80028f2:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80028f6:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f8:	fb01 5505 	mla	r5, r1, r5, r5
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fc:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 8002900:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002904:	1941      	adds	r1, r0, r5
  ep->xfer_len_db = len;
 8002906:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8002908:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800290a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800290e:	6800      	ldr	r0, [r0, #0]
 8002910:	f000 ffaa 	bl	8003868 <USB_EPStartXfer>
}
 8002914:	4630      	mov	r0, r6
 8002916:	bd70      	pop	{r4, r5, r6, pc}

08002918 <HAL_PCD_EP_SetStall>:
{
 8002918:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800291a:	6843      	ldr	r3, [r0, #4]
 800291c:	f001 0507 	and.w	r5, r1, #7
 8002920:	429d      	cmp	r5, r3
{
 8002922:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002924:	d828      	bhi.n	8002978 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8002926:	f011 0f80 	tst.w	r1, #128	; 0x80
 800292a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800292e:	d01a      	beq.n	8002966 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002930:	fb05 3303 	mla	r3, r5, r3, r3
 8002934:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8002936:	2301      	movs	r3, #1
 8002938:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 800293a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800293c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800293e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002940:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8002944:	429a      	cmp	r2, r3
 8002946:	d019      	beq.n	800297c <HAL_PCD_EP_SetStall+0x64>
 8002948:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800294c:	6820      	ldr	r0, [r4, #0]
 800294e:	f000 ff0d 	bl	800376c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002952:	b925      	cbnz	r5, 800295e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002954:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002958:	6820      	ldr	r0, [r4, #0]
 800295a:	f000 ff73 	bl	8003844 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800295e:	2000      	movs	r0, #0
 8002960:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002964:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8002966:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002968:	434b      	muls	r3, r1
 800296a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800296e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8002970:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002972:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8002976:	e7e0      	b.n	800293a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8002978:	2001      	movs	r0, #1
 800297a:	e7f3      	b.n	8002964 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800297c:	2002      	movs	r0, #2
 800297e:	e7f1      	b.n	8002964 <HAL_PCD_EP_SetStall+0x4c>

08002980 <HAL_PCD_EP_ClrStall>:
{
 8002980:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002982:	6843      	ldr	r3, [r0, #4]
 8002984:	f001 020f 	and.w	r2, r1, #15
 8002988:	429a      	cmp	r2, r3
{
 800298a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800298c:	d826      	bhi.n	80029dc <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800298e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002992:	f001 0207 	and.w	r2, r1, #7
 8002996:	f04f 0128 	mov.w	r1, #40	; 0x28
 800299a:	d015      	beq.n	80029c8 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 800299c:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299e:	fb02 1101 	mla	r1, r2, r1, r1
 80029a2:	4401      	add	r1, r0
    ep->is_in = 1U;
 80029a4:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 80029a6:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a8:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80029aa:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80029ac:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d015      	beq.n	80029e0 <HAL_PCD_EP_ClrStall+0x60>
 80029b4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029b6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80029b8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029bc:	f000 fef2 	bl	80037a4 <USB_EPClearStall>
  return HAL_OK;
 80029c0:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80029c2:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c8:	fb01 f302 	mul.w	r3, r1, r2
 80029cc:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80029d0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80029d2:	4403      	add	r3, r0
 80029d4:	2000      	movs	r0, #0
 80029d6:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80029da:	e7e4      	b.n	80029a6 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
 80029de:	e7f2      	b.n	80029c6 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80029e0:	2002      	movs	r0, #2
 80029e2:	e7f0      	b.n	80029c6 <HAL_PCD_EP_ClrStall+0x46>

080029e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029e4:	b510      	push	{r4, lr}
 80029e6:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029e8:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ec:	bf1b      	ittet	ne
 80029ee:	f001 0107 	andne.w	r1, r1, #7
 80029f2:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029f6:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fa:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80029fc:	bf08      	it	eq
 80029fe:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
 8002a02:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a04:	b91a      	cbnz	r2, 8002a0e <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a06:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a08:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8002a0e:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a10:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8002a12:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a14:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a16:	8143      	strh	r3, [r0, #10]
 8002a18:	e7f7      	b.n	8002a0a <HAL_PCDEx_PMAConfig+0x26>
	...

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a20:	4605      	mov	r5, r0
 8002a22:	b908      	cbnz	r0, 8002a28 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002a24:	2001      	movs	r0, #1
 8002a26:	e03c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a28:	6803      	ldr	r3, [r0, #0]
 8002a2a:	07db      	lsls	r3, r3, #31
 8002a2c:	d410      	bmi.n	8002a50 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	682b      	ldr	r3, [r5, #0]
 8002a30:	079f      	lsls	r7, r3, #30
 8002a32:	d45d      	bmi.n	8002af0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	0719      	lsls	r1, r3, #28
 8002a38:	f100 8094 	bmi.w	8002b64 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	075a      	lsls	r2, r3, #29
 8002a40:	f100 80be 	bmi.w	8002bc0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a44:	69e8      	ldr	r0, [r5, #28]
 8002a46:	2800      	cmp	r0, #0
 8002a48:	f040 812c 	bne.w	8002ca4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	e028      	b.n	8002aa2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a50:	4c8f      	ldr	r4, [pc, #572]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a52:	6863      	ldr	r3, [r4, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d007      	beq.n	8002a6c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a5c:	6863      	ldr	r3, [r4, #4]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_OscConfig+0x5e>
 8002a66:	6863      	ldr	r3, [r4, #4]
 8002a68:	03de      	lsls	r6, r3, #15
 8002a6a:	d506      	bpl.n	8002a7a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	039c      	lsls	r4, r3, #14
 8002a70:	d5dd      	bpl.n	8002a2e <HAL_RCC_OscConfig+0x12>
 8002a72:	686b      	ldr	r3, [r5, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1da      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
 8002a78:	e7d4      	b.n	8002a24 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7a:	686b      	ldr	r3, [r5, #4]
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x8c>
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a88:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002a8a:	f7ff f871 	bl	8001b70 <HAL_GetTick>
 8002a8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	0398      	lsls	r0, r3, #14
 8002a94:	d4cb      	bmi.n	8002a2e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a96:	f7ff f86b 	bl	8001b70 <HAL_GetTick>
 8002a9a:	1b80      	subs	r0, r0, r6
 8002a9c:	2864      	cmp	r0, #100	; 0x64
 8002a9e:	d9f7      	bls.n	8002a90 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002aa0:	2003      	movs	r0, #3
}
 8002aa2:	b002      	add	sp, #8
 8002aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	b99b      	cbnz	r3, 8002ad2 <HAL_RCC_OscConfig+0xb6>
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab0:	6023      	str	r3, [r4, #0]
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002aba:	f7ff f859 	bl	8001b70 <HAL_GetTick>
 8002abe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	0399      	lsls	r1, r3, #14
 8002ac4:	d5b3      	bpl.n	8002a2e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac6:	f7ff f853 	bl	8001b70 <HAL_GetTick>
 8002aca:	1b80      	subs	r0, r0, r6
 8002acc:	2864      	cmp	r0, #100	; 0x64
 8002ace:	d9f7      	bls.n	8002ac0 <HAL_RCC_OscConfig+0xa4>
 8002ad0:	e7e6      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	d103      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xc6>
 8002ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ade:	6023      	str	r3, [r4, #0]
 8002ae0:	e7cf      	b.n	8002a82 <HAL_RCC_OscConfig+0x66>
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae6:	6023      	str	r3, [r4, #0]
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aee:	e7cb      	b.n	8002a88 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002af0:	4c67      	ldr	r4, [pc, #412]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002af2:	6863      	ldr	r3, [r4, #4]
 8002af4:	f013 0f0c 	tst.w	r3, #12
 8002af8:	d007      	beq.n	8002b0a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002afa:	6863      	ldr	r3, [r4, #4]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d110      	bne.n	8002b26 <HAL_RCC_OscConfig+0x10a>
 8002b04:	6863      	ldr	r3, [r4, #4]
 8002b06:	03da      	lsls	r2, r3, #15
 8002b08:	d40d      	bmi.n	8002b26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	079b      	lsls	r3, r3, #30
 8002b0e:	d502      	bpl.n	8002b16 <HAL_RCC_OscConfig+0xfa>
 8002b10:	692b      	ldr	r3, [r5, #16]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d186      	bne.n	8002a24 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	696a      	ldr	r2, [r5, #20]
 8002b1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b1e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002b22:	6023      	str	r3, [r4, #0]
 8002b24:	e786      	b.n	8002a34 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b26:	692a      	ldr	r2, [r5, #16]
 8002b28:	4b5a      	ldr	r3, [pc, #360]	; (8002c94 <HAL_RCC_OscConfig+0x278>)
 8002b2a:	b16a      	cbz	r2, 8002b48 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b30:	f7ff f81e 	bl	8001b70 <HAL_GetTick>
 8002b34:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	079f      	lsls	r7, r3, #30
 8002b3a:	d4ec      	bmi.n	8002b16 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7ff f818 	bl	8001b70 <HAL_GetTick>
 8002b40:	1b80      	subs	r0, r0, r6
 8002b42:	2802      	cmp	r0, #2
 8002b44:	d9f7      	bls.n	8002b36 <HAL_RCC_OscConfig+0x11a>
 8002b46:	e7ab      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002b48:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b4a:	f7ff f811 	bl	8001b70 <HAL_GetTick>
 8002b4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	0798      	lsls	r0, r3, #30
 8002b54:	f57f af6e 	bpl.w	8002a34 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b58:	f7ff f80a 	bl	8001b70 <HAL_GetTick>
 8002b5c:	1b80      	subs	r0, r0, r6
 8002b5e:	2802      	cmp	r0, #2
 8002b60:	d9f6      	bls.n	8002b50 <HAL_RCC_OscConfig+0x134>
 8002b62:	e79d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b64:	69aa      	ldr	r2, [r5, #24]
 8002b66:	4c4a      	ldr	r4, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	b1da      	cbz	r2, 8002ba4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b70:	f7fe fffe 	bl	8001b70 <HAL_GetTick>
 8002b74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b78:	079b      	lsls	r3, r3, #30
 8002b7a:	d50d      	bpl.n	8002b98 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b7c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002b80:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b88:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002b8a:	bf00      	nop
  }
  while (Delay --);
 8002b8c:	9b01      	ldr	r3, [sp, #4]
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	9201      	str	r2, [sp, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f9      	bne.n	8002b8a <HAL_RCC_OscConfig+0x16e>
 8002b96:	e751      	b.n	8002a3c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fe ffea 	bl	8001b70 <HAL_GetTick>
 8002b9c:	1b80      	subs	r0, r0, r6
 8002b9e:	2802      	cmp	r0, #2
 8002ba0:	d9e9      	bls.n	8002b76 <HAL_RCC_OscConfig+0x15a>
 8002ba2:	e77d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002ba4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002ba6:	f7fe ffe3 	bl	8001b70 <HAL_GetTick>
 8002baa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bae:	079f      	lsls	r7, r3, #30
 8002bb0:	f57f af44 	bpl.w	8002a3c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7fe ffdc 	bl	8001b70 <HAL_GetTick>
 8002bb8:	1b80      	subs	r0, r0, r6
 8002bba:	2802      	cmp	r0, #2
 8002bbc:	d9f6      	bls.n	8002bac <HAL_RCC_OscConfig+0x190>
 8002bbe:	e76f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc0:	4c33      	ldr	r4, [pc, #204]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bc2:	69e3      	ldr	r3, [r4, #28]
 8002bc4:	00d8      	lsls	r0, r3, #3
 8002bc6:	d424      	bmi.n	8002c12 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8002bc8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	69e3      	ldr	r3, [r4, #28]
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	61e3      	str	r3, [r4, #28]
 8002bd2:	69e3      	ldr	r3, [r4, #28]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4e30      	ldr	r6, [pc, #192]	; (8002ca0 <HAL_RCC_OscConfig+0x284>)
 8002bde:	6833      	ldr	r3, [r6, #0]
 8002be0:	05d9      	lsls	r1, r3, #23
 8002be2:	d518      	bpl.n	8002c16 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be4:	68eb      	ldr	r3, [r5, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d126      	bne.n	8002c38 <HAL_RCC_OscConfig+0x21c>
 8002bea:	6a23      	ldr	r3, [r4, #32]
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002bf2:	f7fe ffbd 	bl	8001b70 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002bfa:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	6a23      	ldr	r3, [r4, #32]
 8002bfe:	079b      	lsls	r3, r3, #30
 8002c00:	d53f      	bpl.n	8002c82 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8002c02:	2f00      	cmp	r7, #0
 8002c04:	f43f af1e 	beq.w	8002a44 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	69e3      	ldr	r3, [r4, #28]
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	61e3      	str	r3, [r4, #28]
 8002c10:	e718      	b.n	8002a44 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2700      	movs	r7, #0
 8002c14:	e7e2      	b.n	8002bdc <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	6833      	ldr	r3, [r6, #0]
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002c1e:	f7fe ffa7 	bl	8001b70 <HAL_GetTick>
 8002c22:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	6833      	ldr	r3, [r6, #0]
 8002c26:	05da      	lsls	r2, r3, #23
 8002c28:	d4dc      	bmi.n	8002be4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2a:	f7fe ffa1 	bl	8001b70 <HAL_GetTick>
 8002c2e:	eba0 0008 	sub.w	r0, r0, r8
 8002c32:	2864      	cmp	r0, #100	; 0x64
 8002c34:	d9f6      	bls.n	8002c24 <HAL_RCC_OscConfig+0x208>
 8002c36:	e733      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c38:	b9ab      	cbnz	r3, 8002c66 <HAL_RCC_OscConfig+0x24a>
 8002c3a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	6223      	str	r3, [r4, #32]
 8002c46:	6a23      	ldr	r3, [r4, #32]
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002c4e:	f7fe ff8f 	bl	8001b70 <HAL_GetTick>
 8002c52:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	6a23      	ldr	r3, [r4, #32]
 8002c56:	0798      	lsls	r0, r3, #30
 8002c58:	d5d3      	bpl.n	8002c02 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe ff89 	bl	8001b70 <HAL_GetTick>
 8002c5e:	1b80      	subs	r0, r0, r6
 8002c60:	4540      	cmp	r0, r8
 8002c62:	d9f7      	bls.n	8002c54 <HAL_RCC_OscConfig+0x238>
 8002c64:	e71c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	6a23      	ldr	r3, [r4, #32]
 8002c6a:	d103      	bne.n	8002c74 <HAL_RCC_OscConfig+0x258>
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6223      	str	r3, [r4, #32]
 8002c72:	e7ba      	b.n	8002bea <HAL_RCC_OscConfig+0x1ce>
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6223      	str	r3, [r4, #32]
 8002c7a:	6a23      	ldr	r3, [r4, #32]
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	e7b6      	b.n	8002bf0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe ff75 	bl	8001b70 <HAL_GetTick>
 8002c86:	eba0 0008 	sub.w	r0, r0, r8
 8002c8a:	42b0      	cmp	r0, r6
 8002c8c:	d9b6      	bls.n	8002bfc <HAL_RCC_OscConfig+0x1e0>
 8002c8e:	e707      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
 8002c90:	40021000 	.word	0x40021000
 8002c94:	42420000 	.word	0x42420000
 8002c98:	42420480 	.word	0x42420480
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <HAL_RCC_OscConfig+0x334>)
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	461c      	mov	r4, r3
 8002caa:	f002 020c 	and.w	r2, r2, #12
 8002cae:	2a08      	cmp	r2, #8
 8002cb0:	d03d      	beq.n	8002d2e <HAL_RCC_OscConfig+0x312>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	4e27      	ldr	r6, [pc, #156]	; (8002d54 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002cb8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cba:	d12b      	bne.n	8002d14 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8002cbc:	f7fe ff58 	bl	8001b70 <HAL_GetTick>
 8002cc0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	0199      	lsls	r1, r3, #6
 8002cc6:	d41f      	bmi.n	8002d08 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cc8:	6a2b      	ldr	r3, [r5, #32]
 8002cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cce:	d105      	bne.n	8002cdc <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cd0:	6862      	ldr	r2, [r4, #4]
 8002cd2:	68a9      	ldr	r1, [r5, #8]
 8002cd4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cdc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002cde:	6862      	ldr	r2, [r4, #4]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002cea:	2301      	movs	r3, #1
 8002cec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002cee:	f7fe ff3f 	bl	8001b70 <HAL_GetTick>
 8002cf2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	019a      	lsls	r2, r3, #6
 8002cf8:	f53f aea8 	bmi.w	8002a4c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe ff38 	bl	8001b70 <HAL_GetTick>
 8002d00:	1b40      	subs	r0, r0, r5
 8002d02:	2802      	cmp	r0, #2
 8002d04:	d9f6      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x2d8>
 8002d06:	e6cb      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe ff32 	bl	8001b70 <HAL_GetTick>
 8002d0c:	1bc0      	subs	r0, r0, r7
 8002d0e:	2802      	cmp	r0, #2
 8002d10:	d9d7      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x2a6>
 8002d12:	e6c5      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002d14:	f7fe ff2c 	bl	8001b70 <HAL_GetTick>
 8002d18:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	019b      	lsls	r3, r3, #6
 8002d1e:	f57f ae95 	bpl.w	8002a4c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d22:	f7fe ff25 	bl	8001b70 <HAL_GetTick>
 8002d26:	1b40      	subs	r0, r0, r5
 8002d28:	2802      	cmp	r0, #2
 8002d2a:	d9f6      	bls.n	8002d1a <HAL_RCC_OscConfig+0x2fe>
 8002d2c:	e6b8      	b.n	8002aa0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d2e:	2801      	cmp	r0, #1
 8002d30:	f43f aeb7 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8002d34:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	6a2b      	ldr	r3, [r5, #32]
 8002d38:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f47f ae71 	bne.w	8002a24 <HAL_RCC_OscConfig+0x8>
 8002d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d44:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002d48:	1ac0      	subs	r0, r0, r3
 8002d4a:	bf18      	it	ne
 8002d4c:	2001      	movne	r0, #1
 8002d4e:	e6a8      	b.n	8002aa2 <HAL_RCC_OscConfig+0x86>
 8002d50:	40021000 	.word	0x40021000
 8002d54:	42420060 	.word	0x42420060

08002d58 <HAL_RCC_GetSysClockFreq>:
{
 8002d58:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002d5c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d5e:	ac02      	add	r4, sp, #8
 8002d60:	f103 0510 	add.w	r5, r3, #16
 8002d64:	4622      	mov	r2, r4
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	c203      	stmia	r2!, {r0, r1}
 8002d6e:	42ab      	cmp	r3, r5
 8002d70:	4614      	mov	r4, r2
 8002d72:	d1f7      	bne.n	8002d64 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d74:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8002d78:	4911      	ldr	r1, [pc, #68]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d7a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002d7e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002d80:	f003 020c 	and.w	r2, r3, #12
 8002d84:	2a08      	cmp	r2, #8
 8002d86:	d117      	bne.n	8002db8 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d88:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002d8c:	a806      	add	r0, sp, #24
 8002d8e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d90:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d92:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d96:	d50c      	bpl.n	8002db2 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d98:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d9a:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d9c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002da0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002da2:	aa06      	add	r2, sp, #24
 8002da4:	4413      	add	r3, r2
 8002da6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002daa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002dae:	b007      	add	sp, #28
 8002db0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002db2:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x70>)
 8002db4:	4350      	muls	r0, r2
 8002db6:	e7fa      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002dba:	e7f8      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x56>
 8002dbc:	08006df8 	.word	0x08006df8
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	007a1200 	.word	0x007a1200
 8002dc8:	003d0900 	.word	0x003d0900

08002dcc <HAL_RCC_ClockConfig>:
{
 8002dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	b910      	cbnz	r0, 8002ddc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002dd6:	2001      	movs	r0, #1
}
 8002dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4a44      	ldr	r2, [pc, #272]	; (8002ef0 <HAL_RCC_ClockConfig+0x124>)
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	428b      	cmp	r3, r1
 8002de6:	d328      	bcc.n	8002e3a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	6821      	ldr	r1, [r4, #0]
 8002dea:	078e      	lsls	r6, r1, #30
 8002dec:	d430      	bmi.n	8002e50 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	07ca      	lsls	r2, r1, #31
 8002df0:	d443      	bmi.n	8002e7a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df2:	4a3f      	ldr	r2, [pc, #252]	; (8002ef0 <HAL_RCC_ClockConfig+0x124>)
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	42ab      	cmp	r3, r5
 8002dfc:	d865      	bhi.n	8002eca <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfe:	6822      	ldr	r2, [r4, #0]
 8002e00:	4d3c      	ldr	r5, [pc, #240]	; (8002ef4 <HAL_RCC_ClockConfig+0x128>)
 8002e02:	f012 0f04 	tst.w	r2, #4
 8002e06:	d16c      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	0713      	lsls	r3, r2, #28
 8002e0a:	d506      	bpl.n	8002e1a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e0c:	686b      	ldr	r3, [r5, #4]
 8002e0e:	6922      	ldr	r2, [r4, #16]
 8002e10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002e14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002e18:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e1a:	f7ff ff9d 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002e1e:	686b      	ldr	r3, [r5, #4]
 8002e20:	4a35      	ldr	r2, [pc, #212]	; (8002ef8 <HAL_RCC_ClockConfig+0x12c>)
 8002e22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	40d8      	lsrs	r0, r3
 8002e2a:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_ClockConfig+0x130>)
 8002e2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_RCC_ClockConfig+0x134>)
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	f7fe fe5b 	bl	8001aec <HAL_InitTick>
  return HAL_OK;
 8002e36:	2000      	movs	r0, #0
 8002e38:	e7ce      	b.n	8002dd8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	6813      	ldr	r3, [r2, #0]
 8002e3c:	f023 0307 	bic.w	r3, r3, #7
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e44:	6813      	ldr	r3, [r2, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	428b      	cmp	r3, r1
 8002e4c:	d1c3      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xa>
 8002e4e:	e7cb      	b.n	8002de8 <HAL_RCC_ClockConfig+0x1c>
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e52:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e56:	bf1e      	ittt	ne
 8002e58:	685a      	ldrne	r2, [r3, #4]
 8002e5a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002e5e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e60:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e62:	bf42      	ittt	mi
 8002e64:	685a      	ldrmi	r2, [r3, #4]
 8002e66:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002e6a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	68a0      	ldr	r0, [r4, #8]
 8002e70:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e74:	4302      	orrs	r2, r0
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	e7b9      	b.n	8002dee <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	6862      	ldr	r2, [r4, #4]
 8002e7c:	4e1d      	ldr	r6, [pc, #116]	; (8002ef4 <HAL_RCC_ClockConfig+0x128>)
 8002e7e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e80:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e82:	d11a      	bne.n	8002eba <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	d0a5      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e90:	f023 0303 	bic.w	r3, r3, #3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002e98:	f7fe fe6a 	bl	8001b70 <HAL_GetTick>
 8002e9c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	6873      	ldr	r3, [r6, #4]
 8002ea0:	6862      	ldr	r2, [r4, #4]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002eaa:	d0a2      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eac:	f7fe fe60 	bl	8001b70 <HAL_GetTick>
 8002eb0:	1bc0      	subs	r0, r0, r7
 8002eb2:	4540      	cmp	r0, r8
 8002eb4:	d9f3      	bls.n	8002e9e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002eb6:	2003      	movs	r0, #3
 8002eb8:	e78e      	b.n	8002dd8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eba:	2a02      	cmp	r2, #2
 8002ebc:	d102      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ec2:	e7e1      	b.n	8002e88 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec4:	f013 0f02 	tst.w	r3, #2
 8002ec8:	e7de      	b.n	8002e88 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	6813      	ldr	r3, [r2, #0]
 8002ecc:	f023 0307 	bic.w	r3, r3, #7
 8002ed0:	432b      	orrs	r3, r5
 8002ed2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	42ab      	cmp	r3, r5
 8002edc:	f47f af7b 	bne.w	8002dd6 <HAL_RCC_ClockConfig+0xa>
 8002ee0:	e78d      	b.n	8002dfe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee2:	686b      	ldr	r3, [r5, #4]
 8002ee4:	68e1      	ldr	r1, [r4, #12]
 8002ee6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002eea:	430b      	orrs	r3, r1
 8002eec:	606b      	str	r3, [r5, #4]
 8002eee:	e78b      	b.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	08006e45 	.word	0x08006e45
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000008 	.word	0x20000008

08002f04 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002f06:	4a05      	ldr	r2, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002f0e:	5cd3      	ldrb	r3, [r2, r3]
 8002f10:	4a03      	ldr	r2, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f12:	6810      	ldr	r0, [r2, #0]
}
 8002f14:	40d8      	lsrs	r0, r3
 8002f16:	4770      	bx	lr
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	08006e55 	.word	0x08006e55
 8002f20:	20000000 	.word	0x20000000

08002f24 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f24:	230f      	movs	r3, #15
 8002f26:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_GetClockConfig+0x34>)
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	f002 0203 	and.w	r2, r2, #3
 8002f30:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002f38:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002f40:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f4a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_GetClockConfig+0x38>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	600b      	str	r3, [r1, #0]
}
 8002f56:	4770      	bx	lr
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40022000 	.word	0x40022000

08002f60 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f60:	6803      	ldr	r3, [r0, #0]
{
 8002f62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f66:	07d9      	lsls	r1, r3, #31
{
 8002f68:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f6a:	d520      	bpl.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6c:	4c35      	ldr	r4, [pc, #212]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002f6e:	69e3      	ldr	r3, [r4, #28]
 8002f70:	00da      	lsls	r2, r3, #3
 8002f72:	d432      	bmi.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002f74:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	69e3      	ldr	r3, [r4, #28]
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	61e3      	str	r3, [r4, #28]
 8002f7e:	69e3      	ldr	r3, [r4, #28]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4e2f      	ldr	r6, [pc, #188]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f8a:	6833      	ldr	r3, [r6, #0]
 8002f8c:	05db      	lsls	r3, r3, #23
 8002f8e:	d526      	bpl.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f90:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f92:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f96:	d136      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f98:	6a23      	ldr	r3, [r4, #32]
 8002f9a:	686a      	ldr	r2, [r5, #4]
 8002f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa4:	b11f      	cbz	r7, 8002fae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa6:	69e3      	ldr	r3, [r4, #28]
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fae:	6828      	ldr	r0, [r5, #0]
 8002fb0:	0783      	lsls	r3, r0, #30
 8002fb2:	d506      	bpl.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fb4:	4a23      	ldr	r2, [pc, #140]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002fb6:	68a9      	ldr	r1, [r5, #8]
 8002fb8:	6853      	ldr	r3, [r2, #4]
 8002fba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fc2:	f010 0010 	ands.w	r0, r0, #16
 8002fc6:	d01b      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002fca:	68e9      	ldr	r1, [r5, #12]
 8002fcc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fce:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6053      	str	r3, [r2, #4]
 8002fd8:	e012      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002fda:	2700      	movs	r7, #0
 8002fdc:	e7d4      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	6833      	ldr	r3, [r6, #0]
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002fe6:	f7fe fdc3 	bl	8001b70 <HAL_GetTick>
 8002fea:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	6833      	ldr	r3, [r6, #0]
 8002fee:	05d8      	lsls	r0, r3, #23
 8002ff0:	d4ce      	bmi.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7fe fdbd 	bl	8001b70 <HAL_GetTick>
 8002ff6:	eba0 0008 	sub.w	r0, r0, r8
 8002ffa:	2864      	cmp	r0, #100	; 0x64
 8002ffc:	d9f6      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002ffe:	2003      	movs	r0, #3
}
 8003000:	b002      	add	sp, #8
 8003002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003006:	686a      	ldr	r2, [r5, #4]
 8003008:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800300c:	429a      	cmp	r2, r3
 800300e:	d0c3      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003010:	2001      	movs	r0, #1
 8003012:	4a0e      	ldr	r2, [pc, #56]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003014:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003016:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003018:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800301a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800301e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003020:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003022:	07d9      	lsls	r1, r3, #31
 8003024:	d5b8      	bpl.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003026:	f7fe fda3 	bl	8001b70 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800302e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003030:	6a23      	ldr	r3, [r4, #32]
 8003032:	079a      	lsls	r2, r3, #30
 8003034:	d4b0      	bmi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fe fd9b 	bl	8001b70 <HAL_GetTick>
 800303a:	1b80      	subs	r0, r0, r6
 800303c:	4540      	cmp	r0, r8
 800303e:	d9f7      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003040:	e7dd      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
 800304c:	42420440 	.word	0x42420440

08003050 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003050:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003054:	2b01      	cmp	r3, #1
 8003056:	d11c      	bne.n	8003092 <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305a:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003060:	6803      	ldr	r3, [r0, #0]
 8003062:	4293      	cmp	r3, r2
 8003064:	d00a      	beq.n	800307c <HAL_TIM_Base_Start+0x2c>
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306a:	d007      	beq.n	800307c <HAL_TIM_Base_Start+0x2c>
 800306c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <HAL_TIM_Base_Start+0x2c>
 8003074:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003078:	4293      	cmp	r3, r2
 800307a:	d104      	bne.n	8003086 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	2a06      	cmp	r2, #6
 8003084:	d003      	beq.n	800308e <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
}
 8003090:	4770      	bx	lr
    return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40012c00 	.word	0x40012c00

0800309c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800309e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a0:	4290      	cmp	r0, r2
 80030a2:	d00a      	beq.n	80030ba <TIM_Base_SetConfig+0x1e>
 80030a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030a8:	d007      	beq.n	80030ba <TIM_Base_SetConfig+0x1e>
 80030aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80030ae:	4290      	cmp	r0, r2
 80030b0:	d003      	beq.n	80030ba <TIM_Base_SetConfig+0x1e>
 80030b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030b6:	4290      	cmp	r0, r2
 80030b8:	d115      	bne.n	80030e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80030ba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030c0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c2:	4a11      	ldr	r2, [pc, #68]	; (8003108 <TIM_Base_SetConfig+0x6c>)
 80030c4:	4290      	cmp	r0, r2
 80030c6:	d00a      	beq.n	80030de <TIM_Base_SetConfig+0x42>
 80030c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030cc:	d007      	beq.n	80030de <TIM_Base_SetConfig+0x42>
 80030ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80030d2:	4290      	cmp	r0, r2
 80030d4:	d003      	beq.n	80030de <TIM_Base_SetConfig+0x42>
 80030d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030da:	4290      	cmp	r0, r2
 80030dc:	d103      	bne.n	80030e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030de:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e6:	694a      	ldr	r2, [r1, #20]
 80030e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ec:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80030ee:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f0:	688b      	ldr	r3, [r1, #8]
 80030f2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f4:	680b      	ldr	r3, [r1, #0]
 80030f6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <TIM_Base_SetConfig+0x6c>)
 80030fa:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030fc:	bf04      	itt	eq
 80030fe:	690b      	ldreq	r3, [r1, #16]
 8003100:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003102:	2301      	movs	r3, #1
 8003104:	6143      	str	r3, [r0, #20]
}
 8003106:	4770      	bx	lr
 8003108:	40012c00 	.word	0x40012c00

0800310c <HAL_TIM_Base_Init>:
{
 800310c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800310e:	4604      	mov	r4, r0
 8003110:	b330      	cbz	r0, 8003160 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003112:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003116:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800311a:	b91b      	cbnz	r3, 8003124 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800311c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003120:	f7fe fc6a 	bl	80019f8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003126:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312c:	1d21      	adds	r1, r4, #4
 800312e:	f7ff ffb5 	bl	800309c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003132:	2301      	movs	r3, #1
  return HAL_OK;
 8003134:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003136:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800313e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003142:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003146:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800314e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003152:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800315a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800315e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003160:	2001      	movs	r0, #1
 8003162:	e7fc      	b.n	800315e <HAL_TIM_Base_Init+0x52>

08003164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003164:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003166:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003168:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800316a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800316e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003172:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003174:	6083      	str	r3, [r0, #8]
}
 8003176:	bd10      	pop	{r4, pc}

08003178 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003178:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800317c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800317e:	2b01      	cmp	r3, #1
{
 8003180:	4604      	mov	r4, r0
 8003182:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003186:	d019      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x44>
 8003188:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800318a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800318e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003190:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003194:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800319a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800319e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80031a0:	680b      	ldr	r3, [r1, #0]
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d065      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0xfa>
 80031a6:	d815      	bhi.n	80031d4 <HAL_TIM_ConfigClockSource+0x5c>
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d00c      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x4e>
 80031ac:	d807      	bhi.n	80031be <HAL_TIM_ConfigClockSource+0x46>
 80031ae:	b153      	cbz	r3, 80031c6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80031b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031b8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80031bc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d001      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x4e>
 80031c2:	2b30      	cmp	r3, #48	; 0x30
 80031c4:	d1f4      	bne.n	80031b0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80031c6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031c8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80031cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031d0:	4313      	orrs	r3, r2
 80031d2:	e01a      	b.n	800320a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80031d4:	2b60      	cmp	r3, #96	; 0x60
 80031d6:	d034      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xca>
 80031d8:	d819      	bhi.n	800320e <HAL_TIM_ConfigClockSource+0x96>
 80031da:	2b50      	cmp	r3, #80	; 0x50
 80031dc:	d1e8      	bne.n	80031b0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	684a      	ldr	r2, [r1, #4]
 80031e0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80031e2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031e6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ea:	f025 0501 	bic.w	r5, r5, #1
 80031ee:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80031f2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031f8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80031fc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80031fe:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003200:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003206:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800320a:	6083      	str	r3, [r0, #8]
 800320c:	e7d0      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800320e:	2b70      	cmp	r3, #112	; 0x70
 8003210:	d00c      	beq.n	800322c <HAL_TIM_ConfigClockSource+0xb4>
 8003212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003216:	d1cb      	bne.n	80031b0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8003218:	68cb      	ldr	r3, [r1, #12]
 800321a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800321e:	f7ff ffa1 	bl	8003164 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003222:	6822      	ldr	r2, [r4, #0]
 8003224:	6893      	ldr	r3, [r2, #8]
 8003226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322a:	e008      	b.n	800323e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800322c:	68cb      	ldr	r3, [r1, #12]
 800322e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003232:	f7ff ff97 	bl	8003164 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003236:	6822      	ldr	r2, [r4, #0]
 8003238:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800323e:	6093      	str	r3, [r2, #8]
      break;
 8003240:	e7b6      	b.n	80031b0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	684d      	ldr	r5, [r1, #4]
 8003244:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003246:	6a01      	ldr	r1, [r0, #32]
 8003248:	f021 0110 	bic.w	r1, r1, #16
 800324c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003250:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003252:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800325a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800325e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003262:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003264:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003266:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800326c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003270:	e7cb      	b.n	800320a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	684a      	ldr	r2, [r1, #4]
 8003274:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003276:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003278:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800327a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327e:	f025 0501 	bic.w	r5, r5, #1
 8003282:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003284:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8003286:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800328c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003290:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003292:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003294:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800329a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800329e:	e7b4      	b.n	800320a <HAL_TIM_ConfigClockSource+0x92>

080032a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80032a4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	f04f 0302 	mov.w	r3, #2
 80032ac:	d025      	beq.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80032ae:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b4:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032b6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80032b8:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 80032ba:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 80032be:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80032c4:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c8:	4c0d      	ldr	r4, [pc, #52]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	d00a      	beq.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d007      	beq.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80032d4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80032d8:	42a3      	cmp	r3, r4
 80032da:	d003      	beq.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80032dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80032e0:	42a3      	cmp	r3, r4
 80032e2:	d104      	bne.n	80032ee <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032e4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ea:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f4:	2300      	movs	r3, #0
 80032f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80032fa:	4618      	mov	r0, r3

  return HAL_OK;
}
 80032fc:	bd30      	pop	{r4, r5, pc}
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00

08003304 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003304:	b084      	sub	sp, #16
 8003306:	a801      	add	r0, sp, #4
 8003308:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800330c:	b004      	add	sp, #16
 800330e:	2000      	movs	r0, #0
 8003310:	4770      	bx	lr

08003312 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003312:	2300      	movs	r3, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003314:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8003318:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800331c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003320:	4618      	mov	r0, r3
 8003322:	4770      	bx	lr

08003324 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003324:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003328:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800332c:	045b      	lsls	r3, r3, #17
 800332e:	0c5b      	lsrs	r3, r3, #17
 8003330:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003334:	2000      	movs	r0, #0
 8003336:	4770      	bx	lr

08003338 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003338:	2000      	movs	r0, #0
 800333a:	4770      	bx	lr

0800333c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800333c:	b084      	sub	sp, #16
 800333e:	b510      	push	{r4, lr}
 8003340:	ac03      	add	r4, sp, #12
 8003342:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8003346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800334a:	2301      	movs	r3, #1
 800334c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0U;
 8003350:	2300      	movs	r3, #0
}
 8003352:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8003354:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0U;
 8003358:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800335c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8003360:	4618      	mov	r0, r3
 8003362:	4770      	bx	lr

08003364 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003364:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003366:	780c      	ldrb	r4, [r1, #0]
{
 8003368:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800336a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800336e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003370:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003374:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8003378:	2803      	cmp	r0, #3
 800337a:	d803      	bhi.n	8003384 <USB_ActivateEndpoint+0x20>
 800337c:	e8df f000 	tbb	[pc, r0]
 8003380:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8003384:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003386:	f248 0580 	movw	r5, #32896	; 0x8080
 800338a:	432a      	orrs	r2, r5
 800338c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003390:	780e      	ldrb	r6, [r1, #0]
 8003392:	4a90      	ldr	r2, [pc, #576]	; (80035d4 <USB_ActivateEndpoint+0x270>)
 8003394:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8003398:	4335      	orrs	r5, r6
 800339a:	4014      	ands	r4, r2
 800339c:	432c      	orrs	r4, r5
 800339e:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 80033a2:	7b0d      	ldrb	r5, [r1, #12]
 80033a4:	780c      	ldrb	r4, [r1, #0]
 80033a6:	2d00      	cmp	r5, #0
 80033a8:	f040 8082 	bne.w	80034b0 <USB_ActivateEndpoint+0x14c>
 80033ac:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 80033ae:	784e      	ldrb	r6, [r1, #1]
 80033b0:	086d      	lsrs	r5, r5, #1
 80033b2:	006d      	lsls	r5, r5, #1
 80033b4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80033b8:	b376      	cbz	r6, 8003418 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80033ba:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80033be:	4434      	add	r4, r6
 80033c0:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033c4:	780d      	ldrb	r5, [r1, #0]
 80033c6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80033ca:	0667      	lsls	r7, r4, #25
 80033cc:	d508      	bpl.n	80033e0 <USB_ActivateEndpoint+0x7c>
 80033ce:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80033d2:	4022      	ands	r2, r4
 80033d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80033dc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80033e0:	78ca      	ldrb	r2, [r1, #3]
 80033e2:	780c      	ldrb	r4, [r1, #0]
 80033e4:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80033e6:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 80033ea:	4a7b      	ldr	r2, [pc, #492]	; (80035d8 <USB_ActivateEndpoint+0x274>)
 80033ec:	ea02 0201 	and.w	r2, r2, r1
 80033f0:	bf18      	it	ne
 80033f2:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033fe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8003402:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8003404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003408:	2000      	movs	r0, #0
 800340a:	e7bc      	b.n	8003386 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 800340c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8003410:	e7fa      	b.n	8003408 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003412:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003416:	e7f7      	b.n	8003408 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003418:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800341c:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800341e:	4414      	add	r4, r2
 8003420:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003424:	780a      	ldrb	r2, [r1, #0]
 8003426:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800342a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800342e:	b2a4      	uxth	r4, r4
 8003430:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8003434:	bb56      	cbnz	r6, 800348c <USB_ActivateEndpoint+0x128>
 8003436:	5b15      	ldrh	r5, [r2, r4]
 8003438:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800343c:	042d      	lsls	r5, r5, #16
 800343e:	0c2d      	lsrs	r5, r5, #16
 8003440:	5315      	strh	r5, [r2, r4]
 8003442:	5b15      	ldrh	r5, [r2, r4]
 8003444:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8003448:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800344a:	780c      	ldrb	r4, [r1, #0]
 800344c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003450:	0457      	lsls	r7, r2, #17
 8003452:	d50b      	bpl.n	800346c <USB_ActivateEndpoint+0x108>
 8003454:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003458:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800345c:	0512      	lsls	r2, r2, #20
 800345e:	0d12      	lsrs	r2, r2, #20
 8003460:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003464:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003468:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800346c:	7809      	ldrb	r1, [r1, #0]
 800346e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003472:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003476:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800347a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800347e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003486:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800348a:	e7ba      	b.n	8003402 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800348c:	2e3e      	cmp	r6, #62	; 0x3e
 800348e:	d806      	bhi.n	800349e <USB_ActivateEndpoint+0x13a>
 8003490:	0875      	lsrs	r5, r6, #1
 8003492:	07f6      	lsls	r6, r6, #31
 8003494:	bf48      	it	mi
 8003496:	3501      	addmi	r5, #1
 8003498:	02ad      	lsls	r5, r5, #10
 800349a:	b2ad      	uxth	r5, r5
 800349c:	e7d4      	b.n	8003448 <USB_ActivateEndpoint+0xe4>
 800349e:	0977      	lsrs	r7, r6, #5
 80034a0:	06f5      	lsls	r5, r6, #27
 80034a2:	4d4e      	ldr	r5, [pc, #312]	; (80035dc <USB_ActivateEndpoint+0x278>)
 80034a4:	bf08      	it	eq
 80034a6:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 80034aa:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80034ae:	e7f4      	b.n	800349a <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80034b0:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80034b4:	4015      	ands	r5, r2
 80034b6:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 80034ba:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80034be:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80034c2:	780c      	ldrb	r4, [r1, #0]
 80034c4:	890d      	ldrh	r5, [r1, #8]
 80034c6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80034ca:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80034ce:	086d      	lsrs	r5, r5, #1
 80034d0:	b2b6      	uxth	r6, r6
 80034d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80034d6:	006d      	lsls	r5, r5, #1
 80034d8:	53a5      	strh	r5, [r4, r6]
 80034da:	780c      	ldrb	r4, [r1, #0]
 80034dc:	894d      	ldrh	r5, [r1, #10]
 80034de:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80034e2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80034e6:	086d      	lsrs	r5, r5, #1
 80034e8:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 80034ec:	006d      	lsls	r5, r5, #1
 80034ee:	b2b6      	uxth	r6, r6
 80034f0:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 80034f2:	784c      	ldrb	r4, [r1, #1]
 80034f4:	780d      	ldrb	r5, [r1, #0]
 80034f6:	bbb4      	cbnz	r4, 8003566 <USB_ActivateEndpoint+0x202>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034f8:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80034fc:	0466      	lsls	r6, r4, #17
 80034fe:	d508      	bpl.n	8003512 <USB_ActivateEndpoint+0x1ae>
 8003500:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003504:	4022      	ands	r2, r4
 8003506:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800350a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800350e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003512:	780c      	ldrb	r4, [r1, #0]
 8003514:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003518:	0655      	lsls	r5, r2, #25
 800351a:	d50b      	bpl.n	8003534 <USB_ActivateEndpoint+0x1d0>
 800351c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003520:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003524:	0512      	lsls	r2, r2, #20
 8003526:	0d12      	lsrs	r2, r2, #20
 8003528:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800352c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003530:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003534:	f248 0480 	movw	r4, #32896	; 0x8080
 8003538:	780d      	ldrb	r5, [r1, #0]
 800353a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800353e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003542:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003546:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800354a:	4322      	orrs	r2, r4
 800354c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003550:	7809      	ldrb	r1, [r1, #0]
 8003552:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003556:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	4314      	orrs	r4, r2
 8003560:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8003564:	e74d      	b.n	8003402 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003566:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800356a:	0464      	lsls	r4, r4, #17
 800356c:	d508      	bpl.n	8003580 <USB_ActivateEndpoint+0x21c>
 800356e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003572:	4022      	ands	r2, r4
 8003574:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003578:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800357c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003580:	780c      	ldrb	r4, [r1, #0]
 8003582:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003586:	0652      	lsls	r2, r2, #25
 8003588:	d50b      	bpl.n	80035a2 <USB_ActivateEndpoint+0x23e>
 800358a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800358e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003592:	0512      	lsls	r2, r2, #20
 8003594:	0d12      	lsrs	r2, r2, #20
 8003596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800359e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80035a2:	78ca      	ldrb	r2, [r1, #3]
 80035a4:	780c      	ldrb	r4, [r1, #0]
 80035a6:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80035a8:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <USB_ActivateEndpoint+0x274>)
 80035ae:	ea02 0205 	and.w	r2, r2, r5
 80035b2:	bf18      	it	ne
 80035b4:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035c0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035c4:	7809      	ldrb	r1, [r1, #0]
 80035c6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80035ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80035ce:	0492      	lsls	r2, r2, #18
 80035d0:	0c92      	lsrs	r2, r2, #18
 80035d2:	e754      	b.n	800347e <USB_ActivateEndpoint+0x11a>
 80035d4:	ffff8f8f 	.word	0xffff8f8f
 80035d8:	ffff8fbf 	.word	0xffff8fbf
 80035dc:	ffff8000 	.word	0xffff8000

080035e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035e0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80035e2:	7b0c      	ldrb	r4, [r1, #12]
 80035e4:	784a      	ldrb	r2, [r1, #1]
 80035e6:	780b      	ldrb	r3, [r1, #0]
 80035e8:	bbbc      	cbnz	r4, 800365a <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 80035ea:	b1f2      	cbz	r2, 800362a <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80035f0:	0652      	lsls	r2, r2, #25
 80035f2:	d50b      	bpl.n	800360c <USB_DeactivateEndpoint+0x2c>
 80035f4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80035f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80035fc:	0512      	lsls	r2, r2, #20
 80035fe:	0d12      	lsrs	r2, r2, #20
 8003600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003604:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003608:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800360c:	780a      	ldrb	r2, [r1, #0]
 800360e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003612:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003616:	051b      	lsls	r3, r3, #20
 8003618:	0d1b      	lsrs	r3, r3, #20
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800361a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003622:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003626:	2000      	movs	r0, #0
 8003628:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800362a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800362e:	0454      	lsls	r4, r2, #17
 8003630:	d50b      	bpl.n	800364a <USB_DeactivateEndpoint+0x6a>
 8003632:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003636:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800363a:	0512      	lsls	r2, r2, #20
 800363c:	0d12      	lsrs	r2, r2, #20
 800363e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003642:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003646:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800364a:	780a      	ldrb	r2, [r1, #0]
 800364c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003654:	049b      	lsls	r3, r3, #18
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	e7df      	b.n	800361a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800365a:	2a00      	cmp	r2, #0
 800365c:	d144      	bne.n	80036e8 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800365e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003662:	0452      	lsls	r2, r2, #17
 8003664:	d50b      	bpl.n	800367e <USB_DeactivateEndpoint+0x9e>
 8003666:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800366a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800366e:	0512      	lsls	r2, r2, #20
 8003670:	0d12      	lsrs	r2, r2, #20
 8003672:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800367a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800367e:	780a      	ldrb	r2, [r1, #0]
 8003680:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003684:	065c      	lsls	r4, r3, #25
 8003686:	d50b      	bpl.n	80036a0 <USB_DeactivateEndpoint+0xc0>
 8003688:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800368c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003690:	051b      	lsls	r3, r3, #20
 8003692:	0d1b      	lsrs	r3, r3, #20
 8003694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003698:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800369c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80036a0:	780a      	ldrb	r2, [r1, #0]
 80036a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80036a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036aa:	051b      	lsls	r3, r3, #20
 80036ac:	0d1b      	lsrs	r3, r3, #20
 80036ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036ba:	f248 0280 	movw	r2, #32896	; 0x8080
 80036be:	780c      	ldrb	r4, [r1, #0]
 80036c0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80036c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036d2:	7809      	ldrb	r1, [r1, #0]
 80036d4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80036d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036e0:	431a      	orrs	r2, r3
 80036e2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 80036e6:	e79e      	b.n	8003626 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036e8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036ec:	0452      	lsls	r2, r2, #17
 80036ee:	d50b      	bpl.n	8003708 <USB_DeactivateEndpoint+0x128>
 80036f0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80036f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80036f8:	0512      	lsls	r2, r2, #20
 80036fa:	0d12      	lsrs	r2, r2, #20
 80036fc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003700:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003704:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003708:	780a      	ldrb	r2, [r1, #0]
 800370a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800370e:	065b      	lsls	r3, r3, #25
 8003710:	d50b      	bpl.n	800372a <USB_DeactivateEndpoint+0x14a>
 8003712:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800371a:	051b      	lsls	r3, r3, #20
 800371c:	0d1b      	lsrs	r3, r3, #20
 800371e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003722:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003726:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800372a:	780a      	ldrb	r2, [r1, #0]
 800372c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003730:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003734:	051b      	lsls	r3, r3, #20
 8003736:	0d1b      	lsrs	r3, r3, #20
 8003738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800373c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003740:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003744:	f248 0280 	movw	r2, #32896	; 0x8080
 8003748:	780c      	ldrb	r4, [r1, #0]
 800374a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003756:	4313      	orrs	r3, r2
 8003758:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800375c:	7809      	ldrb	r1, [r1, #0]
 800375e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	e7b9      	b.n	80036e0 <USB_DeactivateEndpoint+0x100>

0800376c <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800376c:	784b      	ldrb	r3, [r1, #1]
 800376e:	780a      	ldrb	r2, [r1, #0]
 8003770:	b17b      	cbz	r3, 8003792 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003772:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800377e:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800378e:	2000      	movs	r0, #0
 8003790:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003792:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800379a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80037a2:	e7ee      	b.n	8003782 <USB_EPSetStall+0x16>

080037a4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80037a4:	7b0b      	ldrb	r3, [r1, #12]
 80037a6:	bb23      	cbnz	r3, 80037f2 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 80037a8:	784b      	ldrb	r3, [r1, #1]
 80037aa:	780a      	ldrb	r2, [r1, #0]
 80037ac:	b31b      	cbz	r3, 80037f6 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037b2:	065b      	lsls	r3, r3, #25
 80037b4:	d50b      	bpl.n	80037ce <USB_EPClearStall+0x2a>
 80037b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037be:	051b      	lsls	r3, r3, #20
 80037c0:	0d1b      	lsrs	r3, r3, #20
 80037c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037ca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80037ce:	78cb      	ldrb	r3, [r1, #3]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d00e      	beq.n	80037f2 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037d4:	780a      	ldrb	r2, [r1, #0]
 80037d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e2:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80037f2:	2000      	movs	r0, #0
 80037f4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037fa:	045b      	lsls	r3, r3, #17
 80037fc:	d50b      	bpl.n	8003816 <USB_EPClearStall+0x72>
 80037fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003806:	051b      	lsls	r3, r3, #20
 8003808:	0d1b      	lsrs	r3, r3, #20
 800380a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800380e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003812:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003816:	780a      	ldrb	r2, [r1, #0]
 8003818:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800381c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003824:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003828:	e7dd      	b.n	80037e6 <USB_EPClearStall+0x42>

0800382a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800382a:	b911      	cbnz	r1, 8003832 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003832:	2000      	movs	r0, #0
 8003834:	4770      	bx	lr

08003836 <USB_DevConnect>:
 8003836:	2000      	movs	r0, #0
 8003838:	4770      	bx	lr

0800383a <USB_DevDisconnect>:
 800383a:	2000      	movs	r0, #0
 800383c:	4770      	bx	lr

0800383e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800383e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003842:	4770      	bx	lr

08003844 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003844:	2000      	movs	r0, #0
 8003846:	4770      	bx	lr

08003848 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003848:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800384c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800384e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8003858:	429a      	cmp	r2, r3
 800385a:	d100      	bne.n	800385e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800385c:	4770      	bx	lr
 800385e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8003862:	f822 0b04 	strh.w	r0, [r2], #4
 8003866:	e7f7      	b.n	8003858 <USB_WritePMA+0x10>

08003868 <USB_EPStartXfer>:
{
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800386c:	7849      	ldrb	r1, [r1, #1]
{
 800386e:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8003870:	2901      	cmp	r1, #1
 8003872:	7b27      	ldrb	r7, [r4, #12]
 8003874:	f040 8183 	bne.w	8003b7e <USB_EPStartXfer+0x316>
    if (ep->xfer_len > ep->maxpacket)
 8003878:	6922      	ldr	r2, [r4, #16]
 800387a:	69a6      	ldr	r6, [r4, #24]
 800387c:	6961      	ldr	r1, [r4, #20]
 800387e:	4296      	cmp	r6, r2
 8003880:	bf28      	it	cs
 8003882:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 8003884:	b9ef      	cbnz	r7, 80038c2 <USB_EPStartXfer+0x5a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003886:	b2b6      	uxth	r6, r6
 8003888:	4633      	mov	r3, r6
 800388a:	88e2      	ldrh	r2, [r4, #6]
 800388c:	f7ff ffdc 	bl	8003848 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003890:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003894:	7822      	ldrb	r2, [r4, #0]
 8003896:	f205 4304 	addw	r3, r5, #1028	; 0x404
 800389a:	0112      	lsls	r2, r2, #4
 800389c:	440b      	add	r3, r1
 800389e:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80038a0:	7822      	ldrb	r2, [r4, #0]
 80038a2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80038a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ae:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 80038b2:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038bc:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80038c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 80038c2:	78e3      	ldrb	r3, [r4, #3]
 80038c4:	7827      	ldrb	r7, [r4, #0]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	f040 8124 	bne.w	8003b14 <USB_EPStartXfer+0x2ac>
        if (ep->xfer_len_db > ep->maxpacket)
 80038cc:	6a23      	ldr	r3, [r4, #32]
 80038ce:	429a      	cmp	r2, r3
          PCD_SET_EP_DBUF(USBx, ep->num);
 80038d0:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 80038d4:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80038d8:	ea4f 5202 	mov.w	r2, r2, lsl #20
 80038dc:	ea4f 5212 	mov.w	r2, r2, lsr #20
        if (ep->xfer_len_db > ep->maxpacket)
 80038e0:	f080 8107 	bcs.w	8003af2 <USB_EPStartXfer+0x28a>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80038e4:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80038e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038ec:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038f0:	7822      	ldrb	r2, [r4, #0]
          ep->xfer_len_db -= len;
 80038f2:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038f4:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 80038f8:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038fe:	b2b3      	uxth	r3, r6
 8003900:	7860      	ldrb	r0, [r4, #1]
 8003902:	d07c      	beq.n	80039fe <USB_EPStartXfer+0x196>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003904:	2800      	cmp	r0, #0
 8003906:	d14d      	bne.n	80039a4 <USB_EPStartXfer+0x13c>
 8003908:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800390c:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8003910:	4407      	add	r7, r0
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	2e00      	cmp	r6, #0
 8003916:	d131      	bne.n	800397c <USB_EPStartXfer+0x114>
 8003918:	5ab8      	ldrh	r0, [r7, r2]
 800391a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800391e:	0400      	lsls	r0, r0, #16
 8003920:	0c00      	lsrs	r0, r0, #16
 8003922:	52b8      	strh	r0, [r7, r2]
 8003924:	5ab8      	ldrh	r0, [r7, r2]
 8003926:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800392a:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800392c:	8962      	ldrh	r2, [r4, #10]
 800392e:	4628      	mov	r0, r5
 8003930:	f7ff ff8a 	bl	8003848 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003934:	6a22      	ldr	r2, [r4, #32]
 8003936:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003938:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800393a:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800393c:	bf89      	itett	hi
 800393e:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8003940:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8003942:	6222      	strhi	r2, [r4, #32]
 8003944:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003946:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003948:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 800394a:	bf98      	it	ls
 800394c:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 800394e:	6161      	str	r1, [r4, #20]
 8003950:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003952:	2800      	cmp	r0, #0
 8003954:	d148      	bne.n	80039e8 <USB_EPStartXfer+0x180>
 8003956:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800395a:	7827      	ldrb	r7, [r4, #0]
 800395c:	f205 4604 	addw	r6, r5, #1028	; 0x404
 8003960:	013f      	lsls	r7, r7, #4
 8003962:	4406      	add	r6, r0
 8003964:	bb42      	cbnz	r2, 80039b8 <USB_EPStartXfer+0x150>
 8003966:	5bba      	ldrh	r2, [r7, r6]
 8003968:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800396c:	0412      	lsls	r2, r2, #16
 800396e:	0c12      	lsrs	r2, r2, #16
 8003970:	53ba      	strh	r2, [r7, r6]
 8003972:	5bba      	ldrh	r2, [r7, r6]
 8003974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003978:	53ba      	strh	r2, [r7, r6]
 800397a:	e026      	b.n	80039ca <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800397c:	2e3e      	cmp	r6, #62	; 0x3e
 800397e:	d807      	bhi.n	8003990 <USB_EPStartXfer+0x128>
 8003980:	0870      	lsrs	r0, r6, #1
 8003982:	f016 0f01 	tst.w	r6, #1
 8003986:	bf18      	it	ne
 8003988:	3001      	addne	r0, #1
 800398a:	0280      	lsls	r0, r0, #10
 800398c:	b280      	uxth	r0, r0
 800398e:	e7cc      	b.n	800392a <USB_EPStartXfer+0xc2>
 8003990:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8003994:	06f0      	lsls	r0, r6, #27
 8003996:	4897      	ldr	r0, [pc, #604]	; (8003bf4 <USB_EPStartXfer+0x38c>)
 8003998:	bf08      	it	eq
 800399a:	f10c 3cff 	addeq.w	ip, ip, #4294967295	; 0xffffffff
 800399e:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80039a2:	e7f3      	b.n	800398c <USB_EPStartXfer+0x124>
 80039a4:	2801      	cmp	r0, #1
 80039a6:	d1c1      	bne.n	800392c <USB_EPStartXfer+0xc4>
 80039a8:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 80039ac:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80039b0:	4438      	add	r0, r7
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	5283      	strh	r3, [r0, r2]
 80039b6:	e7b9      	b.n	800392c <USB_EPStartXfer+0xc4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039b8:	2a3e      	cmp	r2, #62	; 0x3e
 80039ba:	d80b      	bhi.n	80039d4 <USB_EPStartXfer+0x16c>
 80039bc:	0850      	lsrs	r0, r2, #1
 80039be:	07d2      	lsls	r2, r2, #31
 80039c0:	bf48      	it	mi
 80039c2:	3001      	addmi	r0, #1
 80039c4:	0280      	lsls	r0, r0, #10
 80039c6:	b280      	uxth	r0, r0
 80039c8:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039ca:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039cc:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039ce:	f7ff ff3b 	bl	8003848 <USB_WritePMA>
 80039d2:	e765      	b.n	80038a0 <USB_EPStartXfer+0x38>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039d4:	0950      	lsrs	r0, r2, #5
 80039d6:	06d2      	lsls	r2, r2, #27
 80039d8:	4a86      	ldr	r2, [pc, #536]	; (8003bf4 <USB_EPStartXfer+0x38c>)
 80039da:	bf08      	it	eq
 80039dc:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 80039e0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80039e4:	b292      	uxth	r2, r2
 80039e6:	e7c7      	b.n	8003978 <USB_EPStartXfer+0x110>
 80039e8:	2801      	cmp	r0, #1
 80039ea:	d1ee      	bne.n	80039ca <USB_EPStartXfer+0x162>
 80039ec:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 80039f0:	7820      	ldrb	r0, [r4, #0]
 80039f2:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80039f6:	0100      	lsls	r0, r0, #4
 80039f8:	4432      	add	r2, r6
 80039fa:	5283      	strh	r3, [r0, r2]
 80039fc:	e7e5      	b.n	80039ca <USB_EPStartXfer+0x162>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d14d      	bne.n	8003a9e <USB_EPStartXfer+0x236>
 8003a02:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003a06:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8003a0a:	4407      	add	r7, r0
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	d131      	bne.n	8003a76 <USB_EPStartXfer+0x20e>
 8003a12:	5ab8      	ldrh	r0, [r7, r2]
 8003a14:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003a18:	0400      	lsls	r0, r0, #16
 8003a1a:	0c00      	lsrs	r0, r0, #16
 8003a1c:	52b8      	strh	r0, [r7, r2]
 8003a1e:	5ab8      	ldrh	r0, [r7, r2]
 8003a20:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003a24:	52b8      	strh	r0, [r7, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a26:	8922      	ldrh	r2, [r4, #8]
 8003a28:	4628      	mov	r0, r5
 8003a2a:	f7ff ff0d 	bl	8003848 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8003a2e:	6a22      	ldr	r2, [r4, #32]
 8003a30:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8003a32:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003a34:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8003a36:	bf89      	itett	hi
 8003a38:	1b92      	subhi	r2, r2, r6
              ep->xfer_len_db = 0U;
 8003a3a:	2300      	movls	r3, #0
              ep->xfer_len_db -= len;
 8003a3c:	6222      	strhi	r2, [r4, #32]
 8003a3e:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a40:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8003a42:	4431      	add	r1, r6
              ep->xfer_len_db = 0U;
 8003a44:	bf98      	it	ls
 8003a46:	6223      	strls	r3, [r4, #32]
            ep->xfer_buff += len;
 8003a48:	6161      	str	r1, [r4, #20]
 8003a4a:	b293      	uxth	r3, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d145      	bne.n	8003adc <USB_EPStartXfer+0x274>
 8003a50:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003a54:	7827      	ldrb	r7, [r4, #0]
 8003a56:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8003a5a:	013f      	lsls	r7, r7, #4
 8003a5c:	4406      	add	r6, r0
 8003a5e:	bb42      	cbnz	r2, 8003ab2 <USB_EPStartXfer+0x24a>
 8003a60:	5bba      	ldrh	r2, [r7, r6]
 8003a62:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003a66:	0412      	lsls	r2, r2, #16
 8003a68:	0c12      	lsrs	r2, r2, #16
 8003a6a:	53ba      	strh	r2, [r7, r6]
 8003a6c:	5bba      	ldrh	r2, [r7, r6]
 8003a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a72:	53ba      	strh	r2, [r7, r6]
 8003a74:	e026      	b.n	8003ac4 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a76:	2e3e      	cmp	r6, #62	; 0x3e
 8003a78:	d807      	bhi.n	8003a8a <USB_EPStartXfer+0x222>
 8003a7a:	0870      	lsrs	r0, r6, #1
 8003a7c:	f016 0f01 	tst.w	r6, #1
 8003a80:	bf18      	it	ne
 8003a82:	3001      	addne	r0, #1
 8003a84:	0280      	lsls	r0, r0, #10
 8003a86:	b280      	uxth	r0, r0
 8003a88:	e7cc      	b.n	8003a24 <USB_EPStartXfer+0x1bc>
 8003a8a:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8003a8e:	06f0      	lsls	r0, r6, #27
 8003a90:	4858      	ldr	r0, [pc, #352]	; (8003bf4 <USB_EPStartXfer+0x38c>)
 8003a92:	bf08      	it	eq
 8003a94:	f10c 3cff 	addeq.w	ip, ip, #4294967295	; 0xffffffff
 8003a98:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8003a9c:	e7f3      	b.n	8003a86 <USB_EPStartXfer+0x21e>
 8003a9e:	2801      	cmp	r0, #1
 8003aa0:	d1c1      	bne.n	8003a26 <USB_EPStartXfer+0x1be>
 8003aa2:	f8b5 7050 	ldrh.w	r7, [r5, #80]	; 0x50
 8003aa6:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8003aaa:	4438      	add	r0, r7
 8003aac:	0112      	lsls	r2, r2, #4
 8003aae:	5283      	strh	r3, [r0, r2]
 8003ab0:	e7b9      	b.n	8003a26 <USB_EPStartXfer+0x1be>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ab2:	2a3e      	cmp	r2, #62	; 0x3e
 8003ab4:	d808      	bhi.n	8003ac8 <USB_EPStartXfer+0x260>
 8003ab6:	0850      	lsrs	r0, r2, #1
 8003ab8:	07d2      	lsls	r2, r2, #31
 8003aba:	bf48      	it	mi
 8003abc:	3001      	addmi	r0, #1
 8003abe:	0280      	lsls	r0, r0, #10
 8003ac0:	b280      	uxth	r0, r0
 8003ac2:	53b8      	strh	r0, [r7, r6]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ac4:	8962      	ldrh	r2, [r4, #10]
 8003ac6:	e781      	b.n	80039cc <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ac8:	0950      	lsrs	r0, r2, #5
 8003aca:	06d2      	lsls	r2, r2, #27
 8003acc:	4a49      	ldr	r2, [pc, #292]	; (8003bf4 <USB_EPStartXfer+0x38c>)
 8003ace:	bf08      	it	eq
 8003ad0:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8003ad4:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	e7ca      	b.n	8003a72 <USB_EPStartXfer+0x20a>
 8003adc:	2801      	cmp	r0, #1
 8003ade:	d1f1      	bne.n	8003ac4 <USB_EPStartXfer+0x25c>
 8003ae0:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8003ae4:	7820      	ldrb	r0, [r4, #0]
 8003ae6:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003aea:	0100      	lsls	r0, r0, #4
 8003aec:	4432      	add	r2, r6
 8003aee:	5283      	strh	r3, [r0, r2]
 8003af0:	e7e8      	b.n	8003ac4 <USB_EPStartXfer+0x25c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003afa:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003afe:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003b02:	7826      	ldrb	r6, [r4, #0]
 8003b04:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003b08:	443a      	add	r2, r7
 8003b0a:	0136      	lsls	r6, r6, #4
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b10:	8922      	ldrh	r2, [r4, #8]
 8003b12:	e75c      	b.n	80039ce <USB_EPStartXfer+0x166>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b14:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b18:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b1c:	0652      	lsls	r2, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b1e:	bf4b      	itete	mi
 8003b20:	f205 420c 	addwmi	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b24:	f205 4204 	addwpl	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b28:	1812      	addmi	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b2a:	1812      	addpl	r2, r2, r0
 8003b2c:	b2b3      	uxth	r3, r6
 8003b2e:	ea4f 1707 	mov.w	r7, r7, lsl #4
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b32:	bf4b      	itete	mi
 8003b34:	53d3      	strhmi	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b36:	53d3      	strhpl	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8003b38:	8962      	ldrhmi	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8003b3a:	8922      	ldrhpl	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f7ff fe83 	bl	8003848 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003b42:	7863      	ldrb	r3, [r4, #1]
 8003b44:	7822      	ldrb	r2, [r4, #0]
 8003b46:	b963      	cbnz	r3, 8003b62 <USB_EPStartXfer+0x2fa>
 8003b48:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003b4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b50:	051b      	lsls	r3, r3, #20
 8003b52:	0d1b      	lsrs	r3, r3, #20
 8003b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b5c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003b60:	e69e      	b.n	80038a0 <USB_EPStartXfer+0x38>
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	f47f ae9c 	bne.w	80038a0 <USB_EPStartXfer+0x38>
 8003b68:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b70:	051b      	lsls	r3, r3, #20
 8003b72:	0d1b      	lsrs	r3, r3, #20
 8003b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7c:	e7ee      	b.n	8003b5c <USB_EPStartXfer+0x2f4>
    if (ep->doublebuffer == 0U)
 8003b7e:	2f00      	cmp	r7, #0
 8003b80:	d13a      	bne.n	8003bf8 <USB_EPStartXfer+0x390>
      if (ep->xfer_len > ep->maxpacket)
 8003b82:	69a2      	ldr	r2, [r4, #24]
 8003b84:	6923      	ldr	r3, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003b86:	f205 410c 	addw	r1, r5, #1036	; 0x40c
      if (ep->xfer_len > ep->maxpacket)
 8003b8a:	429a      	cmp	r2, r3
        ep->xfer_len = 0U;
 8003b8c:	bf92      	itee	ls
 8003b8e:	4613      	movls	r3, r2
        ep->xfer_len -= len;
 8003b90:	1ad2      	subhi	r2, r2, r3
 8003b92:	61a2      	strhi	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003b94:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b98:	7820      	ldrb	r0, [r4, #0]
        ep->xfer_len = 0U;
 8003b9a:	bf98      	it	ls
 8003b9c:	61a7      	strls	r7, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003b9e:	0100      	lsls	r0, r0, #4
 8003ba0:	4411      	add	r1, r2
 8003ba2:	b953      	cbnz	r3, 8003bba <USB_EPStartXfer+0x352>
 8003ba4:	5a43      	ldrh	r3, [r0, r1]
 8003ba6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	5243      	strh	r3, [r0, r1]
 8003bb0:	5a43      	ldrh	r3, [r0, r1]
 8003bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb6:	5243      	strh	r3, [r0, r1]
 8003bb8:	e008      	b.n	8003bcc <USB_EPStartXfer+0x364>
 8003bba:	2b3e      	cmp	r3, #62	; 0x3e
 8003bbc:	d810      	bhi.n	8003be0 <USB_EPStartXfer+0x378>
 8003bbe:	085a      	lsrs	r2, r3, #1
 8003bc0:	07df      	lsls	r7, r3, #31
 8003bc2:	bf48      	it	mi
 8003bc4:	3201      	addmi	r2, #1
 8003bc6:	0292      	lsls	r2, r2, #10
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bcc:	7822      	ldrb	r2, [r4, #0]
 8003bce:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003bde:	e668      	b.n	80038b2 <USB_EPStartXfer+0x4a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003be0:	095a      	lsrs	r2, r3, #5
 8003be2:	06de      	lsls	r6, r3, #27
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <USB_EPStartXfer+0x38c>)
 8003be6:	bf08      	it	eq
 8003be8:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8003bec:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	e7e0      	b.n	8003bb6 <USB_EPStartXfer+0x34e>
 8003bf4:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8003bf8:	78e3      	ldrb	r3, [r4, #3]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d174      	bne.n	8003ce8 <USB_EPStartXfer+0x480>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003bfe:	b999      	cbnz	r1, 8003c28 <USB_EPStartXfer+0x3c0>
 8003c00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003c04:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003c08:	7821      	ldrb	r1, [r4, #0]
 8003c0a:	6920      	ldr	r0, [r4, #16]
 8003c0c:	0109      	lsls	r1, r1, #4
 8003c0e:	441a      	add	r2, r3
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d13a      	bne.n	8003c8a <USB_EPStartXfer+0x422>
 8003c14:	5a8b      	ldrh	r3, [r1, r2]
 8003c16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c1a:	041b      	lsls	r3, r3, #16
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	528b      	strh	r3, [r1, r2]
 8003c20:	5a8b      	ldrh	r3, [r1, r2]
 8003c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c26:	528b      	strh	r3, [r1, r2]
 8003c28:	7862      	ldrb	r2, [r4, #1]
 8003c2a:	7823      	ldrb	r3, [r4, #0]
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	d150      	bne.n	8003cd2 <USB_EPStartXfer+0x46a>
 8003c30:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003c34:	6920      	ldr	r0, [r4, #16]
 8003c36:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003c3a:	4411      	add	r1, r2
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d135      	bne.n	8003cae <USB_EPStartXfer+0x446>
 8003c42:	5aca      	ldrh	r2, [r1, r3]
 8003c44:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003c48:	0412      	lsls	r2, r2, #16
 8003c4a:	0c12      	lsrs	r2, r2, #16
 8003c4c:	52ca      	strh	r2, [r1, r3]
 8003c4e:	5aca      	ldrh	r2, [r1, r3]
 8003c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c54:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8003c56:	69e3      	ldr	r3, [r4, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0b7      	beq.n	8003bcc <USB_EPStartXfer+0x364>
 8003c5c:	f244 0140 	movw	r1, #16448	; 0x4040
 8003c60:	7822      	ldrb	r2, [r4, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8003c62:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003c66:	400b      	ands	r3, r1
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	d001      	beq.n	8003c70 <USB_EPStartXfer+0x408>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ad      	bne.n	8003bcc <USB_EPStartXfer+0x364>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8003c70:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c78:	051b      	lsls	r3, r3, #20
 8003c7a:	0d1b      	lsrs	r3, r3, #20
 8003c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c84:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003c88:	e7a0      	b.n	8003bcc <USB_EPStartXfer+0x364>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003c8a:	283e      	cmp	r0, #62	; 0x3e
 8003c8c:	d806      	bhi.n	8003c9c <USB_EPStartXfer+0x434>
 8003c8e:	0843      	lsrs	r3, r0, #1
 8003c90:	07c0      	lsls	r0, r0, #31
 8003c92:	bf48      	it	mi
 8003c94:	3301      	addmi	r3, #1
 8003c96:	029b      	lsls	r3, r3, #10
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	e7c4      	b.n	8003c26 <USB_EPStartXfer+0x3be>
 8003c9c:	0946      	lsrs	r6, r0, #5
 8003c9e:	06c7      	lsls	r7, r0, #27
 8003ca0:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <USB_EPStartXfer+0x554>)
 8003ca2:	bf08      	it	eq
 8003ca4:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8003ca8:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8003cac:	e7f4      	b.n	8003c98 <USB_EPStartXfer+0x430>
 8003cae:	283e      	cmp	r0, #62	; 0x3e
 8003cb0:	d806      	bhi.n	8003cc0 <USB_EPStartXfer+0x458>
 8003cb2:	0842      	lsrs	r2, r0, #1
 8003cb4:	07c0      	lsls	r0, r0, #31
 8003cb6:	bf48      	it	mi
 8003cb8:	3201      	addmi	r2, #1
 8003cba:	0292      	lsls	r2, r2, #10
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	e7c9      	b.n	8003c54 <USB_EPStartXfer+0x3ec>
 8003cc0:	0946      	lsrs	r6, r0, #5
 8003cc2:	06c7      	lsls	r7, r0, #27
 8003cc4:	4a3d      	ldr	r2, [pc, #244]	; (8003dbc <USB_EPStartXfer+0x554>)
 8003cc6:	bf08      	it	eq
 8003cc8:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8003ccc:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003cd0:	e7f4      	b.n	8003cbc <USB_EPStartXfer+0x454>
 8003cd2:	2a01      	cmp	r2, #1
 8003cd4:	d1bf      	bne.n	8003c56 <USB_EPStartXfer+0x3ee>
 8003cd6:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003cda:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8003cde:	440a      	add	r2, r1
 8003ce0:	8a21      	ldrh	r1, [r4, #16]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	52d1      	strh	r1, [r2, r3]
 8003ce6:	e7b6      	b.n	8003c56 <USB_EPStartXfer+0x3ee>
      else if (ep->type == EP_TYPE_ISOC)
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d164      	bne.n	8003db6 <USB_EPStartXfer+0x54e>
        if (ep->xfer_len > ep->maxpacket)
 8003cec:	69a2      	ldr	r2, [r4, #24]
 8003cee:	6923      	ldr	r3, [r4, #16]
 8003cf0:	429a      	cmp	r2, r3
          ep->xfer_len = 0U;
 8003cf2:	bf95      	itete	ls
 8003cf4:	2300      	movls	r3, #0
          ep->xfer_len -= len;
 8003cf6:	1ad2      	subhi	r2, r2, r3
          ep->xfer_len = 0U;
 8003cf8:	61a3      	strls	r3, [r4, #24]
          ep->xfer_len -= len;
 8003cfa:	61a2      	strhi	r2, [r4, #24]
          ep->xfer_len = 0U;
 8003cfc:	bf98      	it	ls
 8003cfe:	4613      	movls	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003d00:	b989      	cbnz	r1, 8003d26 <USB_EPStartXfer+0x4be>
 8003d02:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d06:	7820      	ldrb	r0, [r4, #0]
 8003d08:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8003d0c:	0100      	lsls	r0, r0, #4
 8003d0e:	4411      	add	r1, r2
 8003d10:	b9fb      	cbnz	r3, 8003d52 <USB_EPStartXfer+0x4ea>
 8003d12:	5a42      	ldrh	r2, [r0, r1]
 8003d14:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003d18:	0412      	lsls	r2, r2, #16
 8003d1a:	0c12      	lsrs	r2, r2, #16
 8003d1c:	5242      	strh	r2, [r0, r1]
 8003d1e:	5a42      	ldrh	r2, [r0, r1]
 8003d20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d24:	5242      	strh	r2, [r0, r1]
 8003d26:	7861      	ldrb	r1, [r4, #1]
 8003d28:	7822      	ldrb	r2, [r4, #0]
 8003d2a:	2900      	cmp	r1, #0
 8003d2c:	d137      	bne.n	8003d9e <USB_EPStartXfer+0x536>
 8003d2e:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003d32:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8003d36:	4408      	add	r0, r1
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	b9e3      	cbnz	r3, 8003d76 <USB_EPStartXfer+0x50e>
 8003d3c:	5a83      	ldrh	r3, [r0, r2]
 8003d3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	5283      	strh	r3, [r0, r2]
 8003d48:	5a83      	ldrh	r3, [r0, r2]
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4e:	5283      	strh	r3, [r0, r2]
 8003d50:	e73c      	b.n	8003bcc <USB_EPStartXfer+0x364>
 8003d52:	2b3e      	cmp	r3, #62	; 0x3e
 8003d54:	d806      	bhi.n	8003d64 <USB_EPStartXfer+0x4fc>
 8003d56:	085a      	lsrs	r2, r3, #1
 8003d58:	07de      	lsls	r6, r3, #31
 8003d5a:	bf48      	it	mi
 8003d5c:	3201      	addmi	r2, #1
 8003d5e:	0292      	lsls	r2, r2, #10
 8003d60:	b292      	uxth	r2, r2
 8003d62:	e7df      	b.n	8003d24 <USB_EPStartXfer+0x4bc>
 8003d64:	095e      	lsrs	r6, r3, #5
 8003d66:	06df      	lsls	r7, r3, #27
 8003d68:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <USB_EPStartXfer+0x554>)
 8003d6a:	bf08      	it	eq
 8003d6c:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8003d70:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8003d74:	e7f4      	b.n	8003d60 <USB_EPStartXfer+0x4f8>
 8003d76:	2b3e      	cmp	r3, #62	; 0x3e
 8003d78:	d807      	bhi.n	8003d8a <USB_EPStartXfer+0x522>
 8003d7a:	0859      	lsrs	r1, r3, #1
 8003d7c:	07de      	lsls	r6, r3, #31
 8003d7e:	bf48      	it	mi
 8003d80:	3101      	addmi	r1, #1
 8003d82:	0289      	lsls	r1, r1, #10
 8003d84:	b289      	uxth	r1, r1
 8003d86:	5281      	strh	r1, [r0, r2]
 8003d88:	e720      	b.n	8003bcc <USB_EPStartXfer+0x364>
 8003d8a:	0959      	lsrs	r1, r3, #5
 8003d8c:	06db      	lsls	r3, r3, #27
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <USB_EPStartXfer+0x554>)
 8003d90:	bf08      	it	eq
 8003d92:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8003d96:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	e7d7      	b.n	8003d4e <USB_EPStartXfer+0x4e6>
 8003d9e:	2901      	cmp	r1, #1
 8003da0:	f47f af14 	bne.w	8003bcc <USB_EPStartXfer+0x364>
 8003da4:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8003da8:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8003dac:	4401      	add	r1, r0
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	528b      	strh	r3, [r1, r2]
 8003db4:	e70a      	b.n	8003bcc <USB_EPStartXfer+0x364>
        return HAL_ERROR;
 8003db6:	2001      	movs	r0, #1
 8003db8:	e582      	b.n	80038c0 <USB_EPStartXfer+0x58>
 8003dba:	bf00      	nop
 8003dbc:	ffff8000 	.word	0xffff8000

08003dc0 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dc0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8003dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003dca:	085d      	lsrs	r5, r3, #1
 8003dcc:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dce:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8003dd0:	462e      	mov	r6, r5
 8003dd2:	3002      	adds	r0, #2
 8003dd4:	b936      	cbnz	r6, 8003de4 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003dd6:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003dd8:	bf44      	itt	mi
 8003dda:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003dde:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003de4:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003de8:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003dea:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003dec:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003df0:	0a24      	lsrs	r4, r4, #8
 8003df2:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003df6:	e7ec      	b.n	8003dd2 <USB_ReadPMA+0x12>

08003df8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003df8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003dfc:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003dfe:	b16b      	cbz	r3, 8003e1c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e00:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e04:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003e08:	28ff      	cmp	r0, #255	; 0xff
 8003e0a:	d007      	beq.n	8003e1c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003e12:	4621      	mov	r1, r4
 8003e14:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003e16:	23ff      	movs	r3, #255	; 0xff
 8003e18:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	bd10      	pop	{r4, pc}

08003e20 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003e20:	2343      	movs	r3, #67	; 0x43
 8003e22:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003e24:	4800      	ldr	r0, [pc, #0]	; (8003e28 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003e26:	4770      	bx	lr
 8003e28:	20000044 	.word	0x20000044

08003e2c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003e2c:	2343      	movs	r3, #67	; 0x43
 8003e2e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003e30:	4800      	ldr	r0, [pc, #0]	; (8003e34 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003e32:	4770      	bx	lr
 8003e34:	20000088 	.word	0x20000088

08003e38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003e38:	2343      	movs	r3, #67	; 0x43
 8003e3a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003e3c:	4800      	ldr	r0, [pc, #0]	; (8003e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003e3e:	4770      	bx	lr
 8003e40:	200000d8 	.word	0x200000d8

08003e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003e44:	230a      	movs	r3, #10
 8003e46:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003e48:	4800      	ldr	r0, [pc, #0]	; (8003e4c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003e4a:	4770      	bx	lr
 8003e4c:	200000cc 	.word	0x200000cc

08003e50 <USBD_CDC_DataOut>:
{
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e54:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003e58:	f000 feea 	bl	8004c30 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003e5c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003e60:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003e64:	b14b      	cbz	r3, 8003e7a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003e66:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003e6a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003e74:	4798      	blx	r3
    return USBD_OK;
 8003e76:	2000      	movs	r0, #0
}
 8003e78:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003e7a:	2002      	movs	r0, #2
 8003e7c:	e7fc      	b.n	8003e78 <USBD_CDC_DataOut+0x28>

08003e7e <USBD_CDC_DataIn>:
{
 8003e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003e80:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003e84:	b1d6      	cbz	r6, 8003ebc <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003e86:	2314      	movs	r3, #20
 8003e88:	fb03 0301 	mla	r3, r3, r1, r0
 8003e8c:	69dd      	ldr	r5, [r3, #28]
 8003e8e:	b18d      	cbz	r5, 8003eb4 <USBD_CDC_DataIn+0x36>
 8003e90:	2728      	movs	r7, #40	; 0x28
 8003e92:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003e96:	fb07 4201 	mla	r2, r7, r1, r4
 8003e9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e9c:	fbb5 f4f2 	udiv	r4, r5, r2
 8003ea0:	fb02 5414 	mls	r4, r2, r4, r5
 8003ea4:	b934      	cbnz	r4, 8003eb4 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 8003ea6:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003ea8:	4622      	mov	r2, r4
 8003eaa:	4623      	mov	r3, r4
 8003eac:	f000 fea4 	bl	8004bf8 <USBD_LL_Transmit>
    return USBD_OK;
 8003eb0:	4620      	mov	r0, r4
}
 8003eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003eba:	e7fa      	b.n	8003eb2 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8003ebc:	2002      	movs	r0, #2
 8003ebe:	e7f8      	b.n	8003eb2 <USBD_CDC_DataIn+0x34>

08003ec0 <USBD_CDC_Setup>:
{
 8003ec0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003ec4:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ec8:	780a      	ldrb	r2, [r1, #0]
{
 8003eca:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ecc:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003ed0:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ed2:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003ed6:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003eda:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ede:	d028      	beq.n	8003f32 <USBD_CDC_Setup+0x72>
 8003ee0:	2c20      	cmp	r4, #32
 8003ee2:	d145      	bne.n	8003f70 <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8003ee4:	88cc      	ldrh	r4, [r1, #6]
 8003ee6:	784b      	ldrb	r3, [r1, #1]
 8003ee8:	b1e4      	cbz	r4, 8003f24 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003eea:	0612      	lsls	r2, r2, #24
 8003eec:	d511      	bpl.n	8003f12 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003eee:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	4622      	mov	r2, r4
 8003efc:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003efe:	88f2      	ldrh	r2, [r6, #6]
 8003f00:	4639      	mov	r1, r7
 8003f02:	4628      	mov	r0, r5
 8003f04:	f000 fc45 	bl	8004792 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003f08:	4644      	mov	r4, r8
}
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	b003      	add	sp, #12
 8003f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003f12:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003f16:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	4639      	mov	r1, r7
 8003f1e:	f000 fc4d 	bl	80047bc <USBD_CtlPrepareRx>
 8003f22:	e7f1      	b.n	8003f08 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f24:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003f28:	4618      	mov	r0, r3
 8003f2a:	6895      	ldr	r5, [r2, #8]
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	47a8      	blx	r5
 8003f30:	e7eb      	b.n	8003f0a <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003f32:	784f      	ldrb	r7, [r1, #1]
 8003f34:	2f0a      	cmp	r7, #10
 8003f36:	d00d      	beq.n	8003f54 <USBD_CDC_Setup+0x94>
 8003f38:	2f0b      	cmp	r7, #11
 8003f3a:	d015      	beq.n	8003f68 <USBD_CDC_Setup+0xa8>
 8003f3c:	b9c7      	cbnz	r7, 8003f70 <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f3e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d114      	bne.n	8003f70 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003f46:	2202      	movs	r2, #2
 8003f48:	f10d 0106 	add.w	r1, sp, #6
 8003f4c:	f000 fc21 	bl	8004792 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003f50:	463c      	mov	r4, r7
 8003f52:	e7da      	b.n	8003f0a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d109      	bne.n	8003f70 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f10d 0105 	add.w	r1, sp, #5
 8003f62:	f000 fc16 	bl	8004792 <USBD_CtlSendData>
 8003f66:	e7d0      	b.n	8003f0a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003f68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d0cc      	beq.n	8003f0a <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8003f70:	4631      	mov	r1, r6
 8003f72:	4628      	mov	r0, r5
 8003f74:	f000 fbe6 	bl	8004744 <USBD_CtlError>
          ret = USBD_FAIL;
 8003f78:	2402      	movs	r4, #2
          break;
 8003f7a:	e7c6      	b.n	8003f0a <USBD_CDC_Setup+0x4a>

08003f7c <USBD_CDC_DeInit>:
{
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003f80:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003f82:	2181      	movs	r1, #129	; 0x81
 8003f84:	f000 fdee 	bl	8004b64 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003f88:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003f8a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f000 fde9 	bl	8004b64 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003f92:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003f96:	2182      	movs	r1, #130	; 0x82
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f000 fde3 	bl	8004b64 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8003f9e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003fa2:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003fa4:	b14b      	cbz	r3, 8003fba <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003fa6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003fae:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003fb2:	f000 fe45 	bl	8004c40 <USBD_static_free>
    pdev->pClassData = NULL;
 8003fb6:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003fba:	2000      	movs	r0, #0
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}

08003fbe <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003fbe:	7c03      	ldrb	r3, [r0, #16]
{
 8003fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc4:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003fc6:	bbcb      	cbnz	r3, 800403c <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fcc:	2202      	movs	r2, #2
 8003fce:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003fd0:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003fd2:	f000 fdb7 	bl	8004b44 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003fda:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003fdc:	4629      	mov	r1, r5
 8003fde:	2202      	movs	r2, #2
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f000 fdaf 	bl	8004b44 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003fe6:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003fea:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003fec:	2308      	movs	r3, #8
 8003fee:	2203      	movs	r2, #3
 8003ff0:	2182      	movs	r1, #130	; 0x82
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f000 fda6 	bl	8004b44 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003ff8:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003ffa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003ffe:	f000 fe1b 	bl	8004c38 <USBD_static_malloc>
 8004002:	4606      	mov	r6, r0
 8004004:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004008:	b350      	cbz	r0, 8004060 <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 800400a:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800400c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004014:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8004018:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 800401c:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004020:	f1b8 0f00 	cmp.w	r8, #0
 8004024:	d113      	bne.n	800404e <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800402a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800402e:	4629      	mov	r1, r5
 8004030:	4620      	mov	r0, r4
 8004032:	f000 fdef 	bl	8004c14 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004036:	4640      	mov	r0, r8
}
 8004038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800403c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800403e:	2340      	movs	r3, #64	; 0x40
 8004040:	2202      	movs	r2, #2
 8004042:	2181      	movs	r1, #129	; 0x81
 8004044:	f000 fd7e 	bl	8004b44 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004048:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	e7c6      	b.n	8003fdc <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004054:	4629      	mov	r1, r5
 8004056:	4620      	mov	r0, r4
 8004058:	f000 fddc 	bl	8004c14 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800405c:	4638      	mov	r0, r7
 800405e:	e7eb      	b.n	8004038 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8004060:	4628      	mov	r0, r5
 8004062:	e7e9      	b.n	8004038 <USBD_CDC_Init+0x7a>

08004064 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004064:	b119      	cbz	r1, 800406e <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004066:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 800406a:	2000      	movs	r0, #0
 800406c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800406e:	2002      	movs	r0, #2
  }

  return ret;
}
 8004070:	4770      	bx	lr

08004072 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004072:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8004076:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004078:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800407c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004080:	4770      	bx	lr

08004082 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004082:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8004086:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004088:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800408c:	4770      	bx	lr

0800408e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800408e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004092:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8004094:	b182      	cbz	r2, 80040b8 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8004096:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800409a:	2301      	movs	r3, #1
 800409c:	b974      	cbnz	r4, 80040bc <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800409e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80040a2:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040a6:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80040a8:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040aa:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f000 fda2 	bl	8004bf8 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80040b4:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80040b6:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80040b8:	2002      	movs	r0, #2
 80040ba:	e7fc      	b.n	80040b6 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80040bc:	4618      	mov	r0, r3
 80040be:	e7fa      	b.n	80040b6 <USBD_CDC_TransmitPacket+0x28>

080040c0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040c0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80040c4:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80040c6:	b162      	cbz	r2, 80040e2 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040c8:	7c04      	ldrb	r4, [r0, #16]
 80040ca:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80040ce:	b934      	cbnz	r4, 80040de <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040d0:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040d4:	2101      	movs	r1, #1
 80040d6:	f000 fd9d 	bl	8004c14 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80040da:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80040dc:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80040de:	2340      	movs	r3, #64	; 0x40
 80040e0:	e7f8      	b.n	80040d4 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 80040e2:	2002      	movs	r0, #2
 80040e4:	e7fa      	b.n	80040dc <USBD_CDC_ReceivePacket+0x1c>

080040e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80040e6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80040e8:	b180      	cbz	r0, 800410c <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80040ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80040ee:	b113      	cbz	r3, 80040f6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80040f6:	b109      	cbz	r1, 80040fc <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80040f8:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80040fc:	2301      	movs	r3, #1
  pdev->id = id;
 80040fe:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004100:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004104:	f000 fcce 	bl	8004aa4 <USBD_LL_Init>

  return USBD_OK;
 8004108:	2000      	movs	r0, #0
}
 800410a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800410c:	2002      	movs	r0, #2
 800410e:	e7fc      	b.n	800410a <USBD_Init+0x24>

08004110 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004110:	b119      	cbz	r1, 800411a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004112:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004116:	2000      	movs	r0, #0
 8004118:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800411a:	2002      	movs	r0, #2
  }

  return status;
}
 800411c:	4770      	bx	lr

0800411e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800411e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004120:	f000 fd02 	bl	8004b28 <USBD_LL_Start>

  return USBD_OK;
}
 8004124:	2000      	movs	r0, #0
 8004126:	bd08      	pop	{r3, pc}

08004128 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004128:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800412a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800412e:	b90b      	cbnz	r3, 8004134 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004130:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004132:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4798      	blx	r3
 8004138:	2800      	cmp	r0, #0
 800413a:	d0fa      	beq.n	8004132 <USBD_SetClassConfig+0xa>
 800413c:	e7f8      	b.n	8004130 <USBD_SetClassConfig+0x8>

0800413e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800413e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004140:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4798      	blx	r3

  return USBD_OK;
}
 8004148:	2000      	movs	r0, #0
 800414a:	bd08      	pop	{r3, pc}

0800414c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800414c:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800414e:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8004152:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004154:	4628      	mov	r0, r5
 8004156:	f000 fae1 	bl	800471c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800415a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800415c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8004160:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004164:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8004168:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800416c:	f001 031f 	and.w	r3, r1, #31
 8004170:	2b01      	cmp	r3, #1
 8004172:	d00e      	beq.n	8004192 <USBD_LL_SetupStage+0x46>
 8004174:	d307      	bcc.n	8004186 <USBD_LL_SetupStage+0x3a>
 8004176:	2b02      	cmp	r3, #2
 8004178:	d010      	beq.n	800419c <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800417a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800417e:	4620      	mov	r0, r4
 8004180:	f000 fcfe 	bl	8004b80 <USBD_LL_StallEP>
      break;
 8004184:	e003      	b.n	800418e <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004186:	4629      	mov	r1, r5
 8004188:	4620      	mov	r0, r4
 800418a:	f000 f8f5 	bl	8004378 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800418e:	2000      	movs	r0, #0
 8004190:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004192:	4629      	mov	r1, r5
 8004194:	4620      	mov	r0, r4
 8004196:	f000 fa13 	bl	80045c0 <USBD_StdItfReq>
      break;
 800419a:	e7f8      	b.n	800418e <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 800419c:	4629      	mov	r1, r5
 800419e:	4620      	mov	r0, r4
 80041a0:	f000 fa33 	bl	800460a <USBD_StdEPReq>
      break;
 80041a4:	e7f3      	b.n	800418e <USBD_LL_SetupStage+0x42>

080041a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80041a6:	b570      	push	{r4, r5, r6, lr}
 80041a8:	4605      	mov	r5, r0
 80041aa:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80041ac:	bb49      	cbnz	r1, 8004202 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80041ae:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d11e      	bne.n	80041f4 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80041b6:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80041ba:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80041be:	4293      	cmp	r3, r2
 80041c0:	d90b      	bls.n	80041da <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 80041c2:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 80041c4:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80041c6:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80041ca:	bf8c      	ite	hi
 80041cc:	b29a      	uxthhi	r2, r3
 80041ce:	b292      	uxthls	r2, r2
 80041d0:	4631      	mov	r1, r6
 80041d2:	f000 fb02 	bl	80047da <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80041d6:	2000      	movs	r0, #0
}
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80041da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	b123      	cbz	r3, 80041ec <USBD_LL_DataOutStage+0x46>
 80041e2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80041e6:	2a03      	cmp	r2, #3
 80041e8:	d100      	bne.n	80041ec <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80041ea:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 fafc 	bl	80047ea <USBD_CtlSendStatus>
 80041f2:	e7f0      	b.n	80041d6 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80041f4:	2b05      	cmp	r3, #5
 80041f6:	d1ee      	bne.n	80041d6 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 80041f8:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80041fc:	f000 fcc0 	bl	8004b80 <USBD_LL_StallEP>
 8004200:	e7e9      	b.n	80041d6 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004202:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	b12b      	cbz	r3, 8004216 <USBD_LL_DataOutStage+0x70>
 800420a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800420e:	2a03      	cmp	r2, #3
 8004210:	d101      	bne.n	8004216 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8004212:	4798      	blx	r3
 8004214:	e7df      	b.n	80041d6 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8004216:	2002      	movs	r0, #2
 8004218:	e7de      	b.n	80041d8 <USBD_LL_DataOutStage+0x32>

0800421a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800421a:	b570      	push	{r4, r5, r6, lr}
 800421c:	4613      	mov	r3, r2
 800421e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004220:	460e      	mov	r6, r1
 8004222:	2900      	cmp	r1, #0
 8004224:	d147      	bne.n	80042b6 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004226:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800422a:	2a02      	cmp	r2, #2
 800422c:	d13c      	bne.n	80042a8 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800422e:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8004232:	4295      	cmp	r5, r2
 8004234:	d913      	bls.n	800425e <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8004236:	1aaa      	subs	r2, r5, r2
 8004238:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800423a:	4619      	mov	r1, r3
 800423c:	b292      	uxth	r2, r2
 800423e:	f000 fab5 	bl	80047ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004242:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004244:	461a      	mov	r2, r3
 8004246:	4619      	mov	r1, r3
 8004248:	4620      	mov	r0, r4
 800424a:	f000 fce3 	bl	8004c14 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800424e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004252:	2000      	movs	r0, #0
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004258:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800425c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800425e:	69c3      	ldr	r3, [r0, #28]
 8004260:	fbb3 f5f2 	udiv	r5, r3, r2
 8004264:	fb02 3515 	mls	r5, r2, r5, r3
 8004268:	b965      	cbnz	r5, 8004284 <USBD_LL_DataInStage+0x6a>
 800426a:	429a      	cmp	r2, r3
 800426c:	d80a      	bhi.n	8004284 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800426e:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004272:	4293      	cmp	r3, r2
 8004274:	d206      	bcs.n	8004284 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004276:	462a      	mov	r2, r5
 8004278:	f000 fa98 	bl	80047ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800427c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004280:	462b      	mov	r3, r5
 8004282:	e7df      	b.n	8004244 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004284:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	b12b      	cbz	r3, 8004298 <USBD_LL_DataInStage+0x7e>
 800428c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004290:	2a03      	cmp	r2, #3
 8004292:	d101      	bne.n	8004298 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8004294:	4620      	mov	r0, r4
 8004296:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004298:	2180      	movs	r1, #128	; 0x80
 800429a:	4620      	mov	r0, r4
 800429c:	f000 fc70 	bl	8004b80 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80042a0:	4620      	mov	r0, r4
 80042a2:	f000 faad 	bl	8004800 <USBD_CtlReceiveStatus>
 80042a6:	e7d2      	b.n	800424e <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80042a8:	f032 0304 	bics.w	r3, r2, #4
 80042ac:	d1cf      	bne.n	800424e <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	f000 fc66 	bl	8004b80 <USBD_LL_StallEP>
 80042b4:	e7cb      	b.n	800424e <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80042b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	b133      	cbz	r3, 80042cc <USBD_LL_DataInStage+0xb2>
 80042be:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80042c2:	2a03      	cmp	r2, #3
 80042c4:	d102      	bne.n	80042cc <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 80042c6:	4798      	blx	r3
  return USBD_OK;
 80042c8:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80042ca:	e7c7      	b.n	800425c <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 80042cc:	2002      	movs	r0, #2
 80042ce:	e7c5      	b.n	800425c <USBD_LL_DataInStage+0x42>

080042d0 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042d0:	2200      	movs	r2, #0
{
 80042d2:	b570      	push	{r4, r5, r6, lr}
 80042d4:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80042d6:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80042d8:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042da:	4611      	mov	r1, r2
 80042dc:	2340      	movs	r3, #64	; 0x40
 80042de:	f000 fc31 	bl	8004b44 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042e2:	4633      	mov	r3, r6
 80042e4:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80042e6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80042ea:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042ee:	2200      	movs	r2, #0
 80042f0:	4620      	mov	r0, r4
 80042f2:	f000 fc27 	bl	8004b44 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80042f6:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80042f8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80042fc:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80042fe:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004300:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004304:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004308:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800430a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800430e:	b123      	cbz	r3, 800431a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004310:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004314:	4620      	mov	r0, r4
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4798      	blx	r3
  }

  return USBD_OK;
}
 800431a:	2000      	movs	r0, #0
 800431c:	bd70      	pop	{r4, r5, r6, pc}

0800431e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800431e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004320:	2000      	movs	r0, #0
 8004322:	4770      	bx	lr

08004324 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004324:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004328:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800432c:	2304      	movs	r3, #4
 800432e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004332:	2000      	movs	r0, #0
 8004334:	4770      	bx	lr

08004336 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004336:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800433a:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800433c:	bf04      	itt	eq
 800433e:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004342:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004346:	2000      	movs	r0, #0
 8004348:	4770      	bx	lr

0800434a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800434a:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800434c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004350:	2a03      	cmp	r2, #3
 8004352:	d104      	bne.n	800435e <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8004354:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	b103      	cbz	r3, 800435e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800435c:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800435e:	2000      	movs	r0, #0
 8004360:	bd08      	pop	{r3, pc}

08004362 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8004362:	b510      	push	{r4, lr}
 8004364:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8004366:	2180      	movs	r1, #128	; 0x80
 8004368:	f000 fc0a 	bl	8004b80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800436c:	4620      	mov	r0, r4
}
 800436e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004372:	2100      	movs	r1, #0
 8004374:	f000 bc04 	b.w	8004b80 <USBD_LL_StallEP>

08004378 <USBD_StdDevReq>:
{
 8004378:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800437a:	780b      	ldrb	r3, [r1, #0]
{
 800437c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800437e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004382:	2b20      	cmp	r3, #32
{
 8004384:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004386:	d012      	beq.n	80043ae <USBD_StdDevReq+0x36>
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d010      	beq.n	80043ae <USBD_StdDevReq+0x36>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d15b      	bne.n	8004448 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8004390:	784b      	ldrb	r3, [r1, #1]
 8004392:	2b09      	cmp	r3, #9
 8004394:	d858      	bhi.n	8004448 <USBD_StdDevReq+0xd0>
 8004396:	e8df f013 	tbh	[pc, r3, lsl #1]
 800439a:	00e9      	.short	0x00e9
 800439c:	00570105 	.word	0x00570105
 80043a0:	005700fe 	.word	0x005700fe
 80043a4:	00130084 	.word	0x00130084
 80043a8:	00d20057 	.word	0x00d20057
 80043ac:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80043ae:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80043b2:	4629      	mov	r1, r5
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	4620      	mov	r0, r4
 80043b8:	4798      	blx	r3
}
 80043ba:	2000      	movs	r0, #0
 80043bc:	b003      	add	sp, #12
 80043be:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80043c6:	884b      	ldrh	r3, [r1, #2]
 80043c8:	0a1a      	lsrs	r2, r3, #8
 80043ca:	3a01      	subs	r2, #1
 80043cc:	2a06      	cmp	r2, #6
 80043ce:	d83b      	bhi.n	8004448 <USBD_StdDevReq+0xd0>
 80043d0:	e8df f002 	tbb	[pc, r2]
 80043d4:	3a2d2004 	.word	0x3a2d2004
 80043d8:	523a      	.short	0x523a
 80043da:	5c          	.byte	0x5c
 80043db:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80043dc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80043e0:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80043e2:	f10d 0106 	add.w	r1, sp, #6
 80043e6:	7c20      	ldrb	r0, [r4, #16]
 80043e8:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80043ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80043ee:	b152      	cbz	r2, 8004406 <USBD_StdDevReq+0x8e>
 80043f0:	88eb      	ldrh	r3, [r5, #6]
 80043f2:	b143      	cbz	r3, 8004406 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 80043f4:	429a      	cmp	r2, r3
 80043f6:	bf28      	it	cs
 80043f8:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80043fa:	4601      	mov	r1, r0
 80043fc:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80043fe:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004402:	f000 f9c6 	bl	8004792 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004406:	88eb      	ldrh	r3, [r5, #6]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1d6      	bne.n	80043ba <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 800440c:	4620      	mov	r0, r4
 800440e:	f000 f9ec 	bl	80047ea <USBD_CtlSendStatus>
 8004412:	e7d2      	b.n	80043ba <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004414:	7c02      	ldrb	r2, [r0, #16]
 8004416:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800441a:	b932      	cbnz	r2, 800442a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800441e:	f10d 0006 	add.w	r0, sp, #6
 8004422:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004424:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004426:	7043      	strb	r3, [r0, #1]
 8004428:	e7df      	b.n	80043ea <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	e7f7      	b.n	800441e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b05      	cmp	r3, #5
 8004432:	d809      	bhi.n	8004448 <USBD_StdDevReq+0xd0>
 8004434:	e8df f003 	tbb	[pc, r3]
 8004438:	14100c03 	.word	0x14100c03
 800443c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800443e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004442:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1cc      	bne.n	80043e2 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff ff8a 	bl	8004362 <USBD_CtlError.constprop.1>
 800444e:	e7b4      	b.n	80043ba <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004450:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	e7f5      	b.n	8004444 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004458:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	e7f1      	b.n	8004444 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004460:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	e7ed      	b.n	8004444 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004468:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	e7e9      	b.n	8004444 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004470:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	e7e5      	b.n	8004444 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004478:	7c03      	ldrb	r3, [r0, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e4      	bne.n	8004448 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800447e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004482:	f10d 0006 	add.w	r0, sp, #6
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	4798      	blx	r3
 800448a:	e7ae      	b.n	80043ea <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800448c:	7c03      	ldrb	r3, [r0, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1da      	bne.n	8004448 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004492:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004496:	f10d 0006 	add.w	r0, sp, #6
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800449e:	2307      	movs	r3, #7
 80044a0:	e7c1      	b.n	8004426 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80044a2:	888b      	ldrh	r3, [r1, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1cf      	bne.n	8004448 <USBD_StdDevReq+0xd0>
 80044a8:	88cb      	ldrh	r3, [r1, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1cc      	bne.n	8004448 <USBD_StdDevReq+0xd0>
 80044ae:	884d      	ldrh	r5, [r1, #2]
 80044b0:	2d7f      	cmp	r5, #127	; 0x7f
 80044b2:	d8c9      	bhi.n	8004448 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d0c5      	beq.n	8004448 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80044bc:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80044be:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80044c2:	f000 fb8b 	bl	8004bdc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80044c6:	4620      	mov	r0, r4
 80044c8:	f000 f98f 	bl	80047ea <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80044cc:	b11d      	cbz	r5, 80044d6 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80044ce:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80044d0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80044d4:	e771      	b.n	80043ba <USBD_StdDevReq+0x42>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e7fa      	b.n	80044d0 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 80044da:	7889      	ldrb	r1, [r1, #2]
 80044dc:	4d37      	ldr	r5, [pc, #220]	; (80045bc <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80044de:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80044e0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80044e2:	d8b1      	bhi.n	8004448 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80044e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d008      	beq.n	80044fe <USBD_StdDevReq+0x186>
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d014      	beq.n	800451a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 80044f0:	f7ff ff37 	bl	8004362 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 80044f4:	7829      	ldrb	r1, [r5, #0]
 80044f6:	4620      	mov	r0, r4
 80044f8:	f7ff fe21 	bl	800413e <USBD_ClrClassConfig>
 80044fc:	e75d      	b.n	80043ba <USBD_StdDevReq+0x42>
        if (cfgidx)
 80044fe:	2900      	cmp	r1, #0
 8004500:	d084      	beq.n	800440c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8004502:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004504:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8004506:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004508:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800450c:	4620      	mov	r0, r4
 800450e:	f7ff fe0b 	bl	8004128 <USBD_SetClassConfig>
 8004512:	2802      	cmp	r0, #2
 8004514:	f47f af7a 	bne.w	800440c <USBD_StdDevReq+0x94>
 8004518:	e796      	b.n	8004448 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800451a:	b931      	cbnz	r1, 800452a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800451c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800451e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004520:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8004524:	f7ff fe0b 	bl	800413e <USBD_ClrClassConfig>
 8004528:	e770      	b.n	800440c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800452a:	6841      	ldr	r1, [r0, #4]
 800452c:	2901      	cmp	r1, #1
 800452e:	f43f af6d 	beq.w	800440c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004532:	b2c9      	uxtb	r1, r1
 8004534:	f7ff fe03 	bl	800413e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004538:	7829      	ldrb	r1, [r5, #0]
 800453a:	6061      	str	r1, [r4, #4]
 800453c:	e7e6      	b.n	800450c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800453e:	88ca      	ldrh	r2, [r1, #6]
 8004540:	2a01      	cmp	r2, #1
 8004542:	d181      	bne.n	8004448 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8004544:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004548:	2b00      	cmp	r3, #0
 800454a:	f43f af7d 	beq.w	8004448 <USBD_StdDevReq+0xd0>
 800454e:	2b02      	cmp	r3, #2
 8004550:	d904      	bls.n	800455c <USBD_StdDevReq+0x1e4>
 8004552:	2b03      	cmp	r3, #3
 8004554:	f47f af78 	bne.w	8004448 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004558:	1d01      	adds	r1, r0, #4
 800455a:	e003      	b.n	8004564 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 800455c:	4601      	mov	r1, r0
 800455e:	2300      	movs	r3, #0
 8004560:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004564:	4620      	mov	r0, r4
 8004566:	f000 f914 	bl	8004792 <USBD_CtlSendData>
 800456a:	e726      	b.n	80043ba <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 800456c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004570:	3b01      	subs	r3, #1
 8004572:	2b02      	cmp	r3, #2
 8004574:	f63f af68 	bhi.w	8004448 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8004578:	88cb      	ldrh	r3, [r1, #6]
 800457a:	2b02      	cmp	r3, #2
 800457c:	f47f af64 	bne.w	8004448 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004580:	2301      	movs	r3, #1
 8004582:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004584:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8004588:	b10b      	cbz	r3, 800458e <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800458a:	2303      	movs	r3, #3
 800458c:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800458e:	2202      	movs	r2, #2
 8004590:	f104 010c 	add.w	r1, r4, #12
 8004594:	e7e6      	b.n	8004564 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004596:	884b      	ldrh	r3, [r1, #2]
 8004598:	2b01      	cmp	r3, #1
 800459a:	f47f af0e 	bne.w	80043ba <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800459e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80045a2:	e733      	b.n	800440c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80045a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045a8:	3b01      	subs	r3, #1
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	f63f af4c 	bhi.w	8004448 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045b0:	884b      	ldrh	r3, [r1, #2]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	f47f af01 	bne.w	80043ba <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e7f0      	b.n	800459e <USBD_StdDevReq+0x226>
 80045bc:	20000444 	.word	0x20000444

080045c0 <USBD_StdItfReq>:
{
 80045c0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045c2:	780b      	ldrb	r3, [r1, #0]
{
 80045c4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045ca:	2b20      	cmp	r3, #32
{
 80045cc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045ce:	d002      	beq.n	80045d6 <USBD_StdItfReq+0x16>
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d000      	beq.n	80045d6 <USBD_StdItfReq+0x16>
 80045d4:	b9ab      	cbnz	r3, 8004602 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 80045d6:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80045da:	3b01      	subs	r3, #1
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d810      	bhi.n	8004602 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80045e0:	792b      	ldrb	r3, [r5, #4]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d80d      	bhi.n	8004602 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80045e6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80045ea:	4629      	mov	r1, r5
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	4620      	mov	r0, r4
 80045f0:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80045f2:	88eb      	ldrh	r3, [r5, #6]
 80045f4:	b91b      	cbnz	r3, 80045fe <USBD_StdItfReq+0x3e>
 80045f6:	b910      	cbnz	r0, 80045fe <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 f8f6 	bl	80047ea <USBD_CtlSendStatus>
}
 80045fe:	2000      	movs	r0, #0
 8004600:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff fead 	bl	8004362 <USBD_CtlError.constprop.1>
          break;
 8004608:	e7f9      	b.n	80045fe <USBD_StdItfReq+0x3e>

0800460a <USBD_StdEPReq>:
{
 800460a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800460c:	780a      	ldrb	r2, [r1, #0]
{
 800460e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004610:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004614:	2a20      	cmp	r2, #32
{
 8004616:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004618:	d014      	beq.n	8004644 <USBD_StdEPReq+0x3a>
 800461a:	2a40      	cmp	r2, #64	; 0x40
 800461c:	d012      	beq.n	8004644 <USBD_StdEPReq+0x3a>
 800461e:	b96a      	cbnz	r2, 800463c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8004620:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004622:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8004624:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8004626:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8004628:	d020      	beq.n	800466c <USBD_StdEPReq+0x62>
 800462a:	d336      	bcc.n	800469a <USBD_StdEPReq+0x90>
 800462c:	2a03      	cmp	r2, #3
 800462e:	d105      	bne.n	800463c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004630:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004634:	2a02      	cmp	r2, #2
 8004636:	d027      	beq.n	8004688 <USBD_StdEPReq+0x7e>
 8004638:	2a03      	cmp	r2, #3
 800463a:	d00b      	beq.n	8004654 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 800463c:	4620      	mov	r0, r4
 800463e:	f7ff fe90 	bl	8004362 <USBD_CtlError.constprop.1>
              break;
 8004642:	e005      	b.n	8004650 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8004644:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8004648:	4619      	mov	r1, r3
 800464a:	6892      	ldr	r2, [r2, #8]
 800464c:	4620      	mov	r0, r4
 800464e:	4790      	blx	r2
}
 8004650:	2000      	movs	r0, #0
 8004652:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004654:	885a      	ldrh	r2, [r3, #2]
 8004656:	b92a      	cbnz	r2, 8004664 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8004658:	064a      	lsls	r2, r1, #25
 800465a:	d003      	beq.n	8004664 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800465c:	88db      	ldrh	r3, [r3, #6]
 800465e:	b90b      	cbnz	r3, 8004664 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004660:	f000 fa8e 	bl	8004b80 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8004664:	4620      	mov	r0, r4
 8004666:	f000 f8c0 	bl	80047ea <USBD_CtlSendStatus>
              break;
 800466a:	e7f1      	b.n	8004650 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 800466c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004670:	2a02      	cmp	r2, #2
 8004672:	d009      	beq.n	8004688 <USBD_StdEPReq+0x7e>
 8004674:	2a03      	cmp	r2, #3
 8004676:	d1e1      	bne.n	800463c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004678:	885b      	ldrh	r3, [r3, #2]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e8      	bne.n	8004650 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 800467e:	064d      	lsls	r5, r1, #25
 8004680:	d0f0      	beq.n	8004664 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004682:	f000 fa8b 	bl	8004b9c <USBD_LL_ClearStallEP>
 8004686:	e7ed      	b.n	8004664 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004688:	064b      	lsls	r3, r1, #25
 800468a:	d0d7      	beq.n	800463c <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 800468c:	f000 fa78 	bl	8004b80 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	4620      	mov	r0, r4
 8004694:	f000 fa74 	bl	8004b80 <USBD_LL_StallEP>
 8004698:	e7da      	b.n	8004650 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 800469a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d018      	beq.n	80046d4 <USBD_StdEPReq+0xca>
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d1ca      	bne.n	800463c <USBD_StdEPReq+0x32>
 80046a6:	2314      	movs	r3, #20
 80046a8:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80046ac:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80046b0:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80046b4:	d01f      	beq.n	80046f6 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80046b6:	6992      	ldr	r2, [r2, #24]
 80046b8:	2a00      	cmp	r2, #0
 80046ba:	d0bf      	beq.n	800463c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046bc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80046c0:	fb05 3503 	mla	r5, r5, r3, r3
 80046c4:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80046c6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80046ca:	d11f      	bne.n	800470c <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80046cc:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80046ce:	2202      	movs	r2, #2
 80046d0:	4629      	mov	r1, r5
 80046d2:	e00c      	b.n	80046ee <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80046d4:	064a      	lsls	r2, r1, #25
 80046d6:	d1b1      	bne.n	800463c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046d8:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80046da:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80046de:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046e2:	bf4c      	ite	mi
 80046e4:	f100 0114 	addmi.w	r1, r0, #20
 80046e8:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80046ec:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 f84f 	bl	8004792 <USBD_CtlSendData>
              break;
 80046f4:	e7ac      	b.n	8004650 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80046f6:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	d09e      	beq.n	800463c <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80046fe:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004702:	fb03 0505 	mla	r5, r3, r5, r0
 8004706:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800470a:	e7dc      	b.n	80046c6 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800470c:	4620      	mov	r0, r4
 800470e:	f000 fa53 	bl	8004bb8 <USBD_LL_IsStallEP>
 8004712:	b108      	cbz	r0, 8004718 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8004714:	2301      	movs	r3, #1
 8004716:	e7d9      	b.n	80046cc <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8004718:	6028      	str	r0, [r5, #0]
 800471a:	e7d8      	b.n	80046ce <USBD_StdEPReq+0xc4>

0800471c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800471c:	780b      	ldrb	r3, [r1, #0]
 800471e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004720:	784b      	ldrb	r3, [r1, #1]
 8004722:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004724:	78ca      	ldrb	r2, [r1, #3]
 8004726:	788b      	ldrb	r3, [r1, #2]
 8004728:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800472c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800472e:	794a      	ldrb	r2, [r1, #5]
 8004730:	790b      	ldrb	r3, [r1, #4]
 8004732:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004736:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004738:	79ca      	ldrb	r2, [r1, #7]
 800473a:	798b      	ldrb	r3, [r1, #6]
 800473c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004740:	80c3      	strh	r3, [r0, #6]
}
 8004742:	4770      	bx	lr

08004744 <USBD_CtlError>:
{
 8004744:	b510      	push	{r4, lr}
 8004746:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	f000 fa19 	bl	8004b80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800474e:	4620      	mov	r0, r4
}
 8004750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004754:	2100      	movs	r1, #0
 8004756:	f000 ba13 	b.w	8004b80 <USBD_LL_StallEP>

0800475a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800475a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800475c:	b188      	cbz	r0, 8004782 <USBD_GetString+0x28>
 800475e:	4605      	mov	r5, r0
 8004760:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8004762:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2c00      	cmp	r4, #0
 800476a:	d1f9      	bne.n	8004760 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800476c:	3301      	adds	r3, #1
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004772:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004774:	2303      	movs	r3, #3
 8004776:	704b      	strb	r3, [r1, #1]
 8004778:	2302      	movs	r3, #2
 800477a:	3801      	subs	r0, #1
    while (*desc != '\0')
 800477c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004780:	b905      	cbnz	r5, 8004784 <USBD_GetString+0x2a>
}
 8004782:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	54cd      	strb	r5, [r1, r3]
 8004788:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800478a:	3302      	adds	r3, #2
 800478c:	b2db      	uxtb	r3, r3
 800478e:	548c      	strb	r4, [r1, r2]
 8004790:	e7f4      	b.n	800477c <USBD_GetString+0x22>

08004792 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004792:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004794:	2202      	movs	r2, #2
{
 8004796:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004798:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800479c:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80047a0:	460a      	mov	r2, r1
 80047a2:	2100      	movs	r1, #0
 80047a4:	f000 fa28 	bl	8004bf8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80047a8:	2000      	movs	r0, #0
 80047aa:	bd10      	pop	{r4, pc}

080047ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80047ac:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80047ae:	4613      	mov	r3, r2
 80047b0:	460a      	mov	r2, r1
 80047b2:	2100      	movs	r1, #0
 80047b4:	f000 fa20 	bl	8004bf8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80047b8:	2000      	movs	r0, #0
 80047ba:	bd08      	pop	{r3, pc}

080047bc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80047bc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80047be:	2203      	movs	r2, #3
{
 80047c0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80047c2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80047c6:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047ca:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80047cc:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047d0:	2100      	movs	r1, #0
 80047d2:	f000 fa1f 	bl	8004c14 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80047d6:	2000      	movs	r0, #0
 80047d8:	bd10      	pop	{r4, pc}

080047da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80047da:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047dc:	4613      	mov	r3, r2
 80047de:	460a      	mov	r2, r1
 80047e0:	2100      	movs	r1, #0
 80047e2:	f000 fa17 	bl	8004c14 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80047e6:	2000      	movs	r0, #0
 80047e8:	bd08      	pop	{r3, pc}

080047ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80047ea:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80047ec:	2304      	movs	r3, #4
 80047ee:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80047f2:	2300      	movs	r3, #0
 80047f4:	461a      	mov	r2, r3
 80047f6:	4619      	mov	r1, r3
 80047f8:	f000 f9fe 	bl	8004bf8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80047fc:	2000      	movs	r0, #0
 80047fe:	bd08      	pop	{r3, pc}

08004800 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004800:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004802:	2305      	movs	r3, #5
 8004804:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004808:	2300      	movs	r3, #0
 800480a:	461a      	mov	r2, r3
 800480c:	4619      	mov	r1, r3
 800480e:	f000 fa01 	bl	8004c14 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004812:	2000      	movs	r0, #0
 8004814:	bd08      	pop	{r3, pc}
	...

08004818 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004818:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800481a:	2200      	movs	r2, #0
 800481c:	490e      	ldr	r1, [pc, #56]	; (8004858 <MX_USB_DEVICE_Init+0x40>)
 800481e:	480f      	ldr	r0, [pc, #60]	; (800485c <MX_USB_DEVICE_Init+0x44>)
 8004820:	f7ff fc61 	bl	80040e6 <USBD_Init>
 8004824:	b108      	cbz	r0, 800482a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8004826:	f7fd f8bd 	bl	80019a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800482a:	490d      	ldr	r1, [pc, #52]	; (8004860 <MX_USB_DEVICE_Init+0x48>)
 800482c:	480b      	ldr	r0, [pc, #44]	; (800485c <MX_USB_DEVICE_Init+0x44>)
 800482e:	f7ff fc6f 	bl	8004110 <USBD_RegisterClass>
 8004832:	b108      	cbz	r0, 8004838 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8004834:	f7fd f8b6 	bl	80019a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004838:	490a      	ldr	r1, [pc, #40]	; (8004864 <MX_USB_DEVICE_Init+0x4c>)
 800483a:	4808      	ldr	r0, [pc, #32]	; (800485c <MX_USB_DEVICE_Init+0x44>)
 800483c:	f7ff fc12 	bl	8004064 <USBD_CDC_RegisterInterface>
 8004840:	b108      	cbz	r0, 8004846 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8004842:	f7fd f8af 	bl	80019a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004846:	4805      	ldr	r0, [pc, #20]	; (800485c <MX_USB_DEVICE_Init+0x44>)
 8004848:	f7ff fc69 	bl	800411e <USBD_Start>
 800484c:	b118      	cbz	r0, 8004856 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800484e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004852:	f7fd b8a7 	b.w	80019a4 <Error_Handler>
}
 8004856:	bd08      	pop	{r3, pc}
 8004858:	2000012c 	.word	0x2000012c
 800485c:	20000674 	.word	0x20000674
 8004860:	2000000c 	.word	0x2000000c
 8004864:	2000011c 	.word	0x2000011c

08004868 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004868:	2000      	movs	r0, #0
 800486a:	4770      	bx	lr

0800486c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800486c:	2000      	movs	r0, #0
 800486e:	4770      	bx	lr

08004870 <CDC_Init_FS>:
{
 8004870:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004872:	4c06      	ldr	r4, [pc, #24]	; (800488c <CDC_Init_FS+0x1c>)
 8004874:	2200      	movs	r2, #0
 8004876:	4906      	ldr	r1, [pc, #24]	; (8004890 <CDC_Init_FS+0x20>)
 8004878:	4620      	mov	r0, r4
 800487a:	f7ff fbfa 	bl	8004072 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800487e:	4905      	ldr	r1, [pc, #20]	; (8004894 <CDC_Init_FS+0x24>)
 8004880:	4620      	mov	r0, r4
 8004882:	f7ff fbfe 	bl	8004082 <USBD_CDC_SetRxBuffer>
}
 8004886:	2000      	movs	r0, #0
 8004888:	bd10      	pop	{r4, pc}
 800488a:	bf00      	nop
 800488c:	20000674 	.word	0x20000674
 8004890:	20000d20 	.word	0x20000d20
 8004894:	20000938 	.word	0x20000938

08004898 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004898:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800489a:	4c09      	ldr	r4, [pc, #36]	; (80048c0 <CDC_Transmit_FS+0x28>)
{
 800489c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800489e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80048a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80048a6:	b943      	cbnz	r3, 80048ba <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80048a8:	4601      	mov	r1, r0
 80048aa:	4620      	mov	r0, r4
 80048ac:	f7ff fbe1 	bl	8004072 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80048b0:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 80048b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80048b6:	f7ff bbea 	b.w	800408e <USBD_CDC_TransmitPacket>
}
 80048ba:	2001      	movs	r0, #1
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	bf00      	nop
 80048c0:	20000674 	.word	0x20000674

080048c4 <CDC_Receive_FS>:
{
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	4604      	mov	r4, r0
 80048c8:	460e      	mov	r6, r1
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80048ca:	4d07      	ldr	r5, [pc, #28]	; (80048e8 <CDC_Receive_FS+0x24>)
 80048cc:	4601      	mov	r1, r0
 80048ce:	4628      	mov	r0, r5
 80048d0:	f7ff fbd7 	bl	8004082 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80048d4:	4628      	mov	r0, r5
 80048d6:	f7ff fbf3 	bl	80040c0 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack( Buf, *Len );
 80048da:	4620      	mov	r0, r4
 80048dc:	8831      	ldrh	r1, [r6, #0]
 80048de:	f7fd f84f 	bl	8001980 <CDC_ReceiveCallBack>
}
 80048e2:	2000      	movs	r0, #0
 80048e4:	bd70      	pop	{r4, r5, r6, pc}
 80048e6:	bf00      	nop
 80048e8:	20000674 	.word	0x20000674

080048ec <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80048ec:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80048ee:	4801      	ldr	r0, [pc, #4]	; (80048f4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80048f0:	800b      	strh	r3, [r1, #0]
}
 80048f2:	4770      	bx	lr
 80048f4:	20000148 	.word	0x20000148

080048f8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80048f8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80048fa:	4801      	ldr	r0, [pc, #4]	; (8004900 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80048fc:	800b      	strh	r3, [r1, #0]
}
 80048fe:	4770      	bx	lr
 8004900:	2000015c 	.word	0x2000015c

08004904 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004904:	2300      	movs	r3, #0
 8004906:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004908:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 800490a:	0f05      	lsrs	r5, r0, #28
 800490c:	b2ec      	uxtb	r4, r5
 800490e:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8004910:	bf94      	ite	ls
 8004912:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004914:	3437      	addhi	r4, #55	; 0x37
 8004916:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800491a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800491e:	3301      	adds	r3, #1
 8004920:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8004922:	b2dc      	uxtb	r4, r3
 8004924:	42a2      	cmp	r2, r4
    value = value << 4;
 8004926:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800492a:	d8ee      	bhi.n	800490a <IntToUnicode+0x6>
  }
}
 800492c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004930 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004930:	231a      	movs	r3, #26
{
 8004932:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004934:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004936:	4b09      	ldr	r3, [pc, #36]	; (800495c <USBD_FS_SerialStrDescriptor+0x2c>)
 8004938:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800493a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800493c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800493e:	18c0      	adds	r0, r0, r3
 8004940:	d00a      	beq.n	8004958 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004944:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004946:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004948:	4906      	ldr	r1, [pc, #24]	; (8004964 <USBD_FS_SerialStrDescriptor+0x34>)
 800494a:	f7ff ffdb 	bl	8004904 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800494e:	2204      	movs	r2, #4
 8004950:	4905      	ldr	r1, [pc, #20]	; (8004968 <USBD_FS_SerialStrDescriptor+0x38>)
 8004952:	4620      	mov	r0, r4
 8004954:	f7ff ffd6 	bl	8004904 <IntToUnicode>
}
 8004958:	4804      	ldr	r0, [pc, #16]	; (800496c <USBD_FS_SerialStrDescriptor+0x3c>)
 800495a:	bd10      	pop	{r4, pc}
 800495c:	1ffff7e8 	.word	0x1ffff7e8
 8004960:	1ffff7ec 	.word	0x1ffff7ec
 8004964:	20000162 	.word	0x20000162
 8004968:	20000172 	.word	0x20000172
 800496c:	20000160 	.word	0x20000160

08004970 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004970:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004972:	4c04      	ldr	r4, [pc, #16]	; (8004984 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004974:	460a      	mov	r2, r1
 8004976:	4804      	ldr	r0, [pc, #16]	; (8004988 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004978:	4621      	mov	r1, r4
 800497a:	f7ff feee 	bl	800475a <USBD_GetString>
}
 800497e:	4620      	mov	r0, r4
 8004980:	bd10      	pop	{r4, pc}
 8004982:	bf00      	nop
 8004984:	20001108 	.word	0x20001108
 8004988:	08006e76 	.word	0x08006e76

0800498c <USBD_FS_ProductStrDescriptor>:
{
 800498c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800498e:	4c04      	ldr	r4, [pc, #16]	; (80049a0 <USBD_FS_ProductStrDescriptor+0x14>)
 8004990:	460a      	mov	r2, r1
 8004992:	4804      	ldr	r0, [pc, #16]	; (80049a4 <USBD_FS_ProductStrDescriptor+0x18>)
 8004994:	4621      	mov	r1, r4
 8004996:	f7ff fee0 	bl	800475a <USBD_GetString>
}
 800499a:	4620      	mov	r0, r4
 800499c:	bd10      	pop	{r4, pc}
 800499e:	bf00      	nop
 80049a0:	20001108 	.word	0x20001108
 80049a4:	08006e89 	.word	0x08006e89

080049a8 <USBD_FS_ConfigStrDescriptor>:
{
 80049a8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80049aa:	4c04      	ldr	r4, [pc, #16]	; (80049bc <USBD_FS_ConfigStrDescriptor+0x14>)
 80049ac:	460a      	mov	r2, r1
 80049ae:	4804      	ldr	r0, [pc, #16]	; (80049c0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80049b0:	4621      	mov	r1, r4
 80049b2:	f7ff fed2 	bl	800475a <USBD_GetString>
}
 80049b6:	4620      	mov	r0, r4
 80049b8:	bd10      	pop	{r4, pc}
 80049ba:	bf00      	nop
 80049bc:	20001108 	.word	0x20001108
 80049c0:	08006e5d 	.word	0x08006e5d

080049c4 <USBD_FS_InterfaceStrDescriptor>:
{
 80049c4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80049c6:	4c04      	ldr	r4, [pc, #16]	; (80049d8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80049c8:	460a      	mov	r2, r1
 80049ca:	4804      	ldr	r0, [pc, #16]	; (80049dc <USBD_FS_InterfaceStrDescriptor+0x18>)
 80049cc:	4621      	mov	r1, r4
 80049ce:	f7ff fec4 	bl	800475a <USBD_GetString>
}
 80049d2:	4620      	mov	r0, r4
 80049d4:	bd10      	pop	{r4, pc}
 80049d6:	bf00      	nop
 80049d8:	20001108 	.word	0x20001108
 80049dc:	08006e68 	.word	0x08006e68

080049e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80049e0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80049e2:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <HAL_PCD_MspInit+0x3c>)
 80049e4:	6802      	ldr	r2, [r0, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d115      	bne.n	8004a16 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80049ea:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049ee:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80049f0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80049f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80049f6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80049f8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80049fa:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80049fc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80049fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004a06:	f7fd f8dd 	bl	8001bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004a0a:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004a0c:	b003      	add	sp, #12
 8004a0e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004a12:	f7fd b90b 	b.w	8001c2c <HAL_NVIC_EnableIRQ>
}
 8004a16:	b003      	add	sp, #12
 8004a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a1c:	40005c00 	.word	0x40005c00

08004a20 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004a20:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8004a24:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004a28:	f7ff bb90 	b.w	800414c <USBD_LL_SetupStage>

08004a2c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004a2c:	2328      	movs	r3, #40	; 0x28
 8004a2e:	fb03 0301 	mla	r3, r3, r1, r0
 8004a32:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004a36:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004a3a:	f7ff bbb4 	b.w	80041a6 <USBD_LL_DataOutStage>

08004a3e <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004a3e:	2328      	movs	r3, #40	; 0x28
 8004a40:	fb03 0301 	mla	r3, r3, r1, r0
 8004a44:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4a:	f7ff bbe6 	b.w	800421a <USBD_LL_DataInStage>

08004a4e <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004a4e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004a52:	f7ff bc7a 	b.w	800434a <USBD_LL_SOF>

08004a56 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004a56:	6883      	ldr	r3, [r0, #8]
{
 8004a58:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004a5a:	2b02      	cmp	r3, #2
{
 8004a5c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004a5e:	d001      	beq.n	8004a64 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004a60:	f7fc ffa0 	bl	80019a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004a64:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004a68:	2101      	movs	r1, #1
 8004a6a:	f7ff fc58 	bl	800431e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004a6e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8004a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004a76:	f7ff bc2b 	b.w	80042d0 <USBD_LL_Reset>
	...

08004a7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004a80:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004a84:	f7ff fc4e 	bl	8004324 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004a88:	69a3      	ldr	r3, [r4, #24]
 8004a8a:	b123      	cbz	r3, 8004a96 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004a8c:	4a02      	ldr	r2, [pc, #8]	; (8004a98 <HAL_PCD_SuspendCallback+0x1c>)
 8004a8e:	6913      	ldr	r3, [r2, #16]
 8004a90:	f043 0306 	orr.w	r3, r3, #6
 8004a94:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004a96:	bd10      	pop	{r4, pc}
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004a9c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004aa0:	f7ff bc49 	b.w	8004336 <USBD_LL_Resume>

08004aa4 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004aa4:	2308      	movs	r3, #8
{
 8004aa6:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <USBD_LL_Init+0x7c>)
{
 8004aaa:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004aac:	481d      	ldr	r0, [pc, #116]	; (8004b24 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004aae:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004ab6:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8004ab8:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004abc:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004ac0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004ac4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004ac6:	f7fd f9c9 	bl	8001e5c <HAL_PCD_Init>
 8004aca:	b108      	cbz	r0, 8004ad0 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8004acc:	f7fc ff6a 	bl	80019a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2318      	movs	r3, #24
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004ada:	f7fd ff83 	bl	80029e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004ade:	2358      	movs	r3, #88	; 0x58
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004ae8:	f7fd ff7c 	bl	80029e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004aec:	23c0      	movs	r3, #192	; 0xc0
 8004aee:	2200      	movs	r2, #0
 8004af0:	2181      	movs	r1, #129	; 0x81
 8004af2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004af6:	f7fd ff75 	bl	80029e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004afa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8004afe:	2200      	movs	r2, #0
 8004b00:	2101      	movs	r1, #1
 8004b02:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b06:	f7fd ff6d 	bl	80029e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2182      	movs	r1, #130	; 0x82
 8004b12:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8004b16:	f7fd ff65 	bl	80029e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	bd10      	pop	{r4, pc}
 8004b1e:	bf00      	nop
 8004b20:	40005c00 	.word	0x40005c00
 8004b24:	20001308 	.word	0x20001308

08004b28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004b28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8004b2a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b2e:	f7fd fa0d 	bl	8001f4c <HAL_PCD_Start>
 8004b32:	2803      	cmp	r0, #3
 8004b34:	bf96      	itet	ls
 8004b36:	4b02      	ldrls	r3, [pc, #8]	; (8004b40 <USBD_LL_Start+0x18>)
 8004b38:	2002      	movhi	r0, #2
 8004b3a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004b3c:	bd08      	pop	{r3, pc}
 8004b3e:	bf00      	nop
 8004b40:	08006e9f 	.word	0x08006e9f

08004b44 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004b44:	b510      	push	{r4, lr}
 8004b46:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004b48:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	4622      	mov	r2, r4
 8004b50:	f7fd fe4c 	bl	80027ec <HAL_PCD_EP_Open>
 8004b54:	2803      	cmp	r0, #3
 8004b56:	bf96      	itet	ls
 8004b58:	4b01      	ldrls	r3, [pc, #4]	; (8004b60 <USBD_LL_OpenEP+0x1c>)
 8004b5a:	2002      	movhi	r0, #2
 8004b5c:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004b5e:	bd10      	pop	{r4, pc}
 8004b60:	08006e9f 	.word	0x08006e9f

08004b64 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004b66:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b6a:	f7fd fe71 	bl	8002850 <HAL_PCD_EP_Close>
 8004b6e:	2803      	cmp	r0, #3
 8004b70:	bf96      	itet	ls
 8004b72:	4b02      	ldrls	r3, [pc, #8]	; (8004b7c <USBD_LL_CloseEP+0x18>)
 8004b74:	2002      	movhi	r0, #2
 8004b76:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004b78:	bd08      	pop	{r3, pc}
 8004b7a:	bf00      	nop
 8004b7c:	08006e9f 	.word	0x08006e9f

08004b80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004b82:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b86:	f7fd fec7 	bl	8002918 <HAL_PCD_EP_SetStall>
 8004b8a:	2803      	cmp	r0, #3
 8004b8c:	bf96      	itet	ls
 8004b8e:	4b02      	ldrls	r3, [pc, #8]	; (8004b98 <USBD_LL_StallEP+0x18>)
 8004b90:	2002      	movhi	r0, #2
 8004b92:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004b94:	bd08      	pop	{r3, pc}
 8004b96:	bf00      	nop
 8004b98:	08006e9f 	.word	0x08006e9f

08004b9c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004b9e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ba2:	f7fd feed 	bl	8002980 <HAL_PCD_EP_ClrStall>
 8004ba6:	2803      	cmp	r0, #3
 8004ba8:	bf96      	itet	ls
 8004baa:	4b02      	ldrls	r3, [pc, #8]	; (8004bb4 <USBD_LL_ClearStallEP+0x18>)
 8004bac:	2002      	movhi	r0, #2
 8004bae:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004bb0:	bd08      	pop	{r3, pc}
 8004bb2:	bf00      	nop
 8004bb4:	08006e9f 	.word	0x08006e9f

08004bb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004bb8:	2228      	movs	r2, #40	; 0x28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8004bba:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004bbe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004bc2:	bf1b      	ittet	ne
 8004bc4:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8004bc8:	fb03 2102 	mlane	r1, r3, r2, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004bcc:	fb02 0101 	mlaeq	r1, r2, r1, r0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004bd0:	1809      	addne	r1, r1, r0
 8004bd2:	bf14      	ite	ne
 8004bd4:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004bd6:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
  }
}
 8004bda:	4770      	bx	lr

08004bdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004bdc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004bde:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004be2:	f7fd f9cc 	bl	8001f7e <HAL_PCD_SetAddress>
 8004be6:	2803      	cmp	r0, #3
 8004be8:	bf96      	itet	ls
 8004bea:	4b02      	ldrls	r3, [pc, #8]	; (8004bf4 <USBD_LL_SetUSBAddress+0x18>)
 8004bec:	2002      	movhi	r0, #2
 8004bee:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004bf0:	bd08      	pop	{r3, pc}
 8004bf2:	bf00      	nop
 8004bf4:	08006e9f 	.word	0x08006e9f

08004bf8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004bf8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004bfa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004bfe:	f7fd fe71 	bl	80028e4 <HAL_PCD_EP_Transmit>
 8004c02:	2803      	cmp	r0, #3
 8004c04:	bf96      	itet	ls
 8004c06:	4b02      	ldrls	r3, [pc, #8]	; (8004c10 <USBD_LL_Transmit+0x18>)
 8004c08:	2002      	movhi	r0, #2
 8004c0a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004c0c:	bd08      	pop	{r3, pc}
 8004c0e:	bf00      	nop
 8004c10:	08006e9f 	.word	0x08006e9f

08004c14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004c14:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004c16:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c1a:	f7fd fe42 	bl	80028a2 <HAL_PCD_EP_Receive>
 8004c1e:	2803      	cmp	r0, #3
 8004c20:	bf96      	itet	ls
 8004c22:	4b02      	ldrls	r3, [pc, #8]	; (8004c2c <USBD_LL_PrepareReceive+0x18>)
 8004c24:	2002      	movhi	r0, #2
 8004c26:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8004c28:	bd08      	pop	{r3, pc}
 8004c2a:	bf00      	nop
 8004c2c:	08006e9f 	.word	0x08006e9f

08004c30 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004c30:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004c34:	f7fd be4e 	b.w	80028d4 <HAL_PCD_EP_GetRxCount>

08004c38 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004c38:	4800      	ldr	r0, [pc, #0]	; (8004c3c <USBD_static_malloc+0x4>)
 8004c3a:	4770      	bx	lr
 8004c3c:	20000448 	.word	0x20000448

08004c40 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004c40:	4770      	bx	lr

08004c42 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8004c42:	4770      	bx	lr

08004c44 <__cxa_pure_virtual>:
 8004c44:	b508      	push	{r3, lr}
 8004c46:	f000 f80d 	bl	8004c64 <_ZSt9terminatev>

08004c4a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004c4a:	b508      	push	{r3, lr}
 8004c4c:	4780      	blx	r0
 8004c4e:	f000 f80e 	bl	8004c6e <abort>
	...

08004c54 <_ZSt13get_terminatev>:
 8004c54:	4b02      	ldr	r3, [pc, #8]	; (8004c60 <_ZSt13get_terminatev+0xc>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	f3bf 8f5b 	dmb	ish
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	2000017c 	.word	0x2000017c

08004c64 <_ZSt9terminatev>:
 8004c64:	b508      	push	{r3, lr}
 8004c66:	f7ff fff5 	bl	8004c54 <_ZSt13get_terminatev>
 8004c6a:	f7ff ffee 	bl	8004c4a <_ZN10__cxxabiv111__terminateEPFvvE>

08004c6e <abort>:
 8004c6e:	b508      	push	{r3, lr}
 8004c70:	2006      	movs	r0, #6
 8004c72:	f000 fcb7 	bl	80055e4 <raise>
 8004c76:	2001      	movs	r0, #1
 8004c78:	f7fc feea 	bl	8001a50 <_exit>

08004c7c <__errno>:
 8004c7c:	4b01      	ldr	r3, [pc, #4]	; (8004c84 <__errno+0x8>)
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000180 	.word	0x20000180

08004c88 <__libc_init_array>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	2500      	movs	r5, #0
 8004c8c:	4e0c      	ldr	r6, [pc, #48]	; (8004cc0 <__libc_init_array+0x38>)
 8004c8e:	4c0d      	ldr	r4, [pc, #52]	; (8004cc4 <__libc_init_array+0x3c>)
 8004c90:	1ba4      	subs	r4, r4, r6
 8004c92:	10a4      	asrs	r4, r4, #2
 8004c94:	42a5      	cmp	r5, r4
 8004c96:	d109      	bne.n	8004cac <__libc_init_array+0x24>
 8004c98:	f002 f8a0 	bl	8006ddc <_init>
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	4e0a      	ldr	r6, [pc, #40]	; (8004cc8 <__libc_init_array+0x40>)
 8004ca0:	4c0a      	ldr	r4, [pc, #40]	; (8004ccc <__libc_init_array+0x44>)
 8004ca2:	1ba4      	subs	r4, r4, r6
 8004ca4:	10a4      	asrs	r4, r4, #2
 8004ca6:	42a5      	cmp	r5, r4
 8004ca8:	d105      	bne.n	8004cb6 <__libc_init_array+0x2e>
 8004caa:	bd70      	pop	{r4, r5, r6, pc}
 8004cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cb0:	4798      	blx	r3
 8004cb2:	3501      	adds	r5, #1
 8004cb4:	e7ee      	b.n	8004c94 <__libc_init_array+0xc>
 8004cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cba:	4798      	blx	r3
 8004cbc:	3501      	adds	r5, #1
 8004cbe:	e7f2      	b.n	8004ca6 <__libc_init_array+0x1e>
 8004cc0:	08007100 	.word	0x08007100
 8004cc4:	08007100 	.word	0x08007100
 8004cc8:	08007100 	.word	0x08007100
 8004ccc:	08007108 	.word	0x08007108

08004cd0 <memcpy>:
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	1e43      	subs	r3, r0, #1
 8004cd4:	440a      	add	r2, r1
 8004cd6:	4291      	cmp	r1, r2
 8004cd8:	d100      	bne.n	8004cdc <memcpy+0xc>
 8004cda:	bd10      	pop	{r4, pc}
 8004cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce4:	e7f7      	b.n	8004cd6 <memcpy+0x6>

08004ce6 <memset>:
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4402      	add	r2, r0
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d100      	bne.n	8004cf0 <memset+0xa>
 8004cee:	4770      	bx	lr
 8004cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf4:	e7f9      	b.n	8004cea <memset+0x4>

08004cf6 <__cvt>:
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfc:	461e      	mov	r6, r3
 8004cfe:	bfbb      	ittet	lt
 8004d00:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d04:	461e      	movlt	r6, r3
 8004d06:	2300      	movge	r3, #0
 8004d08:	232d      	movlt	r3, #45	; 0x2d
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d0e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004d12:	f027 0720 	bic.w	r7, r7, #32
 8004d16:	2f46      	cmp	r7, #70	; 0x46
 8004d18:	4614      	mov	r4, r2
 8004d1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d1c:	700b      	strb	r3, [r1, #0]
 8004d1e:	d004      	beq.n	8004d2a <__cvt+0x34>
 8004d20:	2f45      	cmp	r7, #69	; 0x45
 8004d22:	d100      	bne.n	8004d26 <__cvt+0x30>
 8004d24:	3501      	adds	r5, #1
 8004d26:	2302      	movs	r3, #2
 8004d28:	e000      	b.n	8004d2c <__cvt+0x36>
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	aa07      	add	r2, sp, #28
 8004d2e:	9204      	str	r2, [sp, #16]
 8004d30:	aa06      	add	r2, sp, #24
 8004d32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d36:	e9cd 3500 	strd	r3, r5, [sp]
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	4633      	mov	r3, r6
 8004d3e:	f000 fd1b 	bl	8005778 <_dtoa_r>
 8004d42:	2f47      	cmp	r7, #71	; 0x47
 8004d44:	4680      	mov	r8, r0
 8004d46:	d102      	bne.n	8004d4e <__cvt+0x58>
 8004d48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d4a:	07db      	lsls	r3, r3, #31
 8004d4c:	d526      	bpl.n	8004d9c <__cvt+0xa6>
 8004d4e:	2f46      	cmp	r7, #70	; 0x46
 8004d50:	eb08 0905 	add.w	r9, r8, r5
 8004d54:	d111      	bne.n	8004d7a <__cvt+0x84>
 8004d56:	f898 3000 	ldrb.w	r3, [r8]
 8004d5a:	2b30      	cmp	r3, #48	; 0x30
 8004d5c:	d10a      	bne.n	8004d74 <__cvt+0x7e>
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2300      	movs	r3, #0
 8004d62:	4620      	mov	r0, r4
 8004d64:	4631      	mov	r1, r6
 8004d66:	f7fb fe1f 	bl	80009a8 <__aeabi_dcmpeq>
 8004d6a:	b918      	cbnz	r0, 8004d74 <__cvt+0x7e>
 8004d6c:	f1c5 0501 	rsb	r5, r5, #1
 8004d70:	f8ca 5000 	str.w	r5, [sl]
 8004d74:	f8da 3000 	ldr.w	r3, [sl]
 8004d78:	4499      	add	r9, r3
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4620      	mov	r0, r4
 8004d80:	4631      	mov	r1, r6
 8004d82:	f7fb fe11 	bl	80009a8 <__aeabi_dcmpeq>
 8004d86:	b938      	cbnz	r0, 8004d98 <__cvt+0xa2>
 8004d88:	2230      	movs	r2, #48	; 0x30
 8004d8a:	9b07      	ldr	r3, [sp, #28]
 8004d8c:	454b      	cmp	r3, r9
 8004d8e:	d205      	bcs.n	8004d9c <__cvt+0xa6>
 8004d90:	1c59      	adds	r1, r3, #1
 8004d92:	9107      	str	r1, [sp, #28]
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	e7f8      	b.n	8004d8a <__cvt+0x94>
 8004d98:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	9b07      	ldr	r3, [sp, #28]
 8004da0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004da2:	eba3 0308 	sub.w	r3, r3, r8
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	b008      	add	sp, #32
 8004daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004dae <__exponent>:
 8004dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004db0:	2900      	cmp	r1, #0
 8004db2:	bfb4      	ite	lt
 8004db4:	232d      	movlt	r3, #45	; 0x2d
 8004db6:	232b      	movge	r3, #43	; 0x2b
 8004db8:	4604      	mov	r4, r0
 8004dba:	bfb8      	it	lt
 8004dbc:	4249      	neglt	r1, r1
 8004dbe:	2909      	cmp	r1, #9
 8004dc0:	f804 2b02 	strb.w	r2, [r4], #2
 8004dc4:	7043      	strb	r3, [r0, #1]
 8004dc6:	dd21      	ble.n	8004e0c <__exponent+0x5e>
 8004dc8:	f10d 0307 	add.w	r3, sp, #7
 8004dcc:	461f      	mov	r7, r3
 8004dce:	260a      	movs	r6, #10
 8004dd0:	fb91 f5f6 	sdiv	r5, r1, r6
 8004dd4:	fb06 1115 	mls	r1, r6, r5, r1
 8004dd8:	2d09      	cmp	r5, #9
 8004dda:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004dde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004de2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004de6:	4629      	mov	r1, r5
 8004de8:	dc09      	bgt.n	8004dfe <__exponent+0x50>
 8004dea:	3130      	adds	r1, #48	; 0x30
 8004dec:	3b02      	subs	r3, #2
 8004dee:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004df2:	42bb      	cmp	r3, r7
 8004df4:	4622      	mov	r2, r4
 8004df6:	d304      	bcc.n	8004e02 <__exponent+0x54>
 8004df8:	1a10      	subs	r0, r2, r0
 8004dfa:	b003      	add	sp, #12
 8004dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfe:	4613      	mov	r3, r2
 8004e00:	e7e6      	b.n	8004dd0 <__exponent+0x22>
 8004e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e06:	f804 2b01 	strb.w	r2, [r4], #1
 8004e0a:	e7f2      	b.n	8004df2 <__exponent+0x44>
 8004e0c:	2330      	movs	r3, #48	; 0x30
 8004e0e:	4419      	add	r1, r3
 8004e10:	7083      	strb	r3, [r0, #2]
 8004e12:	1d02      	adds	r2, r0, #4
 8004e14:	70c1      	strb	r1, [r0, #3]
 8004e16:	e7ef      	b.n	8004df8 <__exponent+0x4a>

08004e18 <_printf_float>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	b091      	sub	sp, #68	; 0x44
 8004e1e:	460c      	mov	r4, r1
 8004e20:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004e22:	4693      	mov	fp, r2
 8004e24:	461e      	mov	r6, r3
 8004e26:	4605      	mov	r5, r0
 8004e28:	f001 fa5a 	bl	80062e0 <_localeconv_r>
 8004e2c:	6803      	ldr	r3, [r0, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	9309      	str	r3, [sp, #36]	; 0x24
 8004e32:	f7fb f98d 	bl	8000150 <strlen>
 8004e36:	2300      	movs	r3, #0
 8004e38:	930e      	str	r3, [sp, #56]	; 0x38
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e3e:	3307      	adds	r3, #7
 8004e40:	f023 0307 	bic.w	r3, r3, #7
 8004e44:	f103 0208 	add.w	r2, r3, #8
 8004e48:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004e4c:	f8d4 a000 	ldr.w	sl, [r4]
 8004e50:	603a      	str	r2, [r7, #0]
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e5a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004e5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e68:	4ba6      	ldr	r3, [pc, #664]	; (8005104 <_printf_float+0x2ec>)
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e6e:	f7fb fdcd 	bl	8000a0c <__aeabi_dcmpun>
 8004e72:	bb68      	cbnz	r0, 8004ed0 <_printf_float+0xb8>
 8004e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e78:	4ba2      	ldr	r3, [pc, #648]	; (8005104 <_printf_float+0x2ec>)
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e7e:	f7fb fda7 	bl	80009d0 <__aeabi_dcmple>
 8004e82:	bb28      	cbnz	r0, 8004ed0 <_printf_float+0xb8>
 8004e84:	2200      	movs	r2, #0
 8004e86:	2300      	movs	r3, #0
 8004e88:	4638      	mov	r0, r7
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	f7fb fd96 	bl	80009bc <__aeabi_dcmplt>
 8004e90:	b110      	cbz	r0, 8004e98 <_printf_float+0x80>
 8004e92:	232d      	movs	r3, #45	; 0x2d
 8004e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e98:	4f9b      	ldr	r7, [pc, #620]	; (8005108 <_printf_float+0x2f0>)
 8004e9a:	4b9c      	ldr	r3, [pc, #624]	; (800510c <_printf_float+0x2f4>)
 8004e9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ea0:	bf98      	it	ls
 8004ea2:	461f      	movls	r7, r3
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	f04f 0900 	mov.w	r9, #0
 8004eaa:	6123      	str	r3, [r4, #16]
 8004eac:	f02a 0304 	bic.w	r3, sl, #4
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	9600      	str	r6, [sp, #0]
 8004eb4:	465b      	mov	r3, fp
 8004eb6:	aa0f      	add	r2, sp, #60	; 0x3c
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 f9e2 	bl	8005284 <_printf_common>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f040 8090 	bne.w	8004fe6 <_printf_float+0x1ce>
 8004ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eca:	b011      	add	sp, #68	; 0x44
 8004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed0:	463a      	mov	r2, r7
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	f7fb fd98 	bl	8000a0c <__aeabi_dcmpun>
 8004edc:	b110      	cbz	r0, 8004ee4 <_printf_float+0xcc>
 8004ede:	4f8c      	ldr	r7, [pc, #560]	; (8005110 <_printf_float+0x2f8>)
 8004ee0:	4b8c      	ldr	r3, [pc, #560]	; (8005114 <_printf_float+0x2fc>)
 8004ee2:	e7db      	b.n	8004e9c <_printf_float+0x84>
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	a80d      	add	r0, sp, #52	; 0x34
 8004eee:	a90e      	add	r1, sp, #56	; 0x38
 8004ef0:	d140      	bne.n	8004f74 <_printf_float+0x15c>
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	f04f 0c00 	mov.w	ip, #0
 8004efa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004efe:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004f02:	6863      	ldr	r3, [r4, #4]
 8004f04:	6022      	str	r2, [r4, #0]
 8004f06:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	463a      	mov	r2, r7
 8004f0e:	464b      	mov	r3, r9
 8004f10:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004f14:	4628      	mov	r0, r5
 8004f16:	f7ff feee 	bl	8004cf6 <__cvt>
 8004f1a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004f1e:	2b47      	cmp	r3, #71	; 0x47
 8004f20:	4607      	mov	r7, r0
 8004f22:	d109      	bne.n	8004f38 <_printf_float+0x120>
 8004f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f26:	1cd8      	adds	r0, r3, #3
 8004f28:	db02      	blt.n	8004f30 <_printf_float+0x118>
 8004f2a:	6862      	ldr	r2, [r4, #4]
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	dd47      	ble.n	8004fc0 <_printf_float+0x1a8>
 8004f30:	f1a8 0802 	sub.w	r8, r8, #2
 8004f34:	fa5f f888 	uxtb.w	r8, r8
 8004f38:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004f3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f3e:	d824      	bhi.n	8004f8a <_printf_float+0x172>
 8004f40:	3901      	subs	r1, #1
 8004f42:	4642      	mov	r2, r8
 8004f44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f48:	910d      	str	r1, [sp, #52]	; 0x34
 8004f4a:	f7ff ff30 	bl	8004dae <__exponent>
 8004f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f50:	4681      	mov	r9, r0
 8004f52:	1813      	adds	r3, r2, r0
 8004f54:	2a01      	cmp	r2, #1
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	dc02      	bgt.n	8004f60 <_printf_float+0x148>
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	07d1      	lsls	r1, r2, #31
 8004f5e:	d501      	bpl.n	8004f64 <_printf_float+0x14c>
 8004f60:	3301      	adds	r3, #1
 8004f62:	6123      	str	r3, [r4, #16]
 8004f64:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0a2      	beq.n	8004eb2 <_printf_float+0x9a>
 8004f6c:	232d      	movs	r3, #45	; 0x2d
 8004f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f72:	e79e      	b.n	8004eb2 <_printf_float+0x9a>
 8004f74:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004f78:	f000 816e 	beq.w	8005258 <_printf_float+0x440>
 8004f7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f80:	d1b9      	bne.n	8004ef6 <_printf_float+0xde>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1b7      	bne.n	8004ef6 <_printf_float+0xde>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e7b4      	b.n	8004ef4 <_printf_float+0xdc>
 8004f8a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004f8e:	d119      	bne.n	8004fc4 <_printf_float+0x1ac>
 8004f90:	2900      	cmp	r1, #0
 8004f92:	6863      	ldr	r3, [r4, #4]
 8004f94:	dd0c      	ble.n	8004fb0 <_printf_float+0x198>
 8004f96:	6121      	str	r1, [r4, #16]
 8004f98:	b913      	cbnz	r3, 8004fa0 <_printf_float+0x188>
 8004f9a:	6822      	ldr	r2, [r4, #0]
 8004f9c:	07d2      	lsls	r2, r2, #31
 8004f9e:	d502      	bpl.n	8004fa6 <_printf_float+0x18e>
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	440b      	add	r3, r1
 8004fa4:	6123      	str	r3, [r4, #16]
 8004fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fa8:	f04f 0900 	mov.w	r9, #0
 8004fac:	65a3      	str	r3, [r4, #88]	; 0x58
 8004fae:	e7d9      	b.n	8004f64 <_printf_float+0x14c>
 8004fb0:	b913      	cbnz	r3, 8004fb8 <_printf_float+0x1a0>
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	07d0      	lsls	r0, r2, #31
 8004fb6:	d501      	bpl.n	8004fbc <_printf_float+0x1a4>
 8004fb8:	3302      	adds	r3, #2
 8004fba:	e7f3      	b.n	8004fa4 <_printf_float+0x18c>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e7f1      	b.n	8004fa4 <_printf_float+0x18c>
 8004fc0:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004fc4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	db05      	blt.n	8004fd8 <_printf_float+0x1c0>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	07d1      	lsls	r1, r2, #31
 8004fd2:	d5e8      	bpl.n	8004fa6 <_printf_float+0x18e>
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	e7e5      	b.n	8004fa4 <_printf_float+0x18c>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bfcc      	ite	gt
 8004fdc:	2301      	movgt	r3, #1
 8004fde:	f1c3 0302 	rsble	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	e7de      	b.n	8004fa4 <_printf_float+0x18c>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	055a      	lsls	r2, r3, #21
 8004fea:	d407      	bmi.n	8004ffc <_printf_float+0x1e4>
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	463a      	mov	r2, r7
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b0      	blx	r6
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d129      	bne.n	800504e <_printf_float+0x236>
 8004ffa:	e764      	b.n	8004ec6 <_printf_float+0xae>
 8004ffc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005000:	f240 80d7 	bls.w	80051b2 <_printf_float+0x39a>
 8005004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005008:	2200      	movs	r2, #0
 800500a:	2300      	movs	r3, #0
 800500c:	f7fb fccc 	bl	80009a8 <__aeabi_dcmpeq>
 8005010:	b388      	cbz	r0, 8005076 <_printf_float+0x25e>
 8005012:	2301      	movs	r3, #1
 8005014:	4a40      	ldr	r2, [pc, #256]	; (8005118 <_printf_float+0x300>)
 8005016:	4659      	mov	r1, fp
 8005018:	4628      	mov	r0, r5
 800501a:	47b0      	blx	r6
 800501c:	3001      	adds	r0, #1
 800501e:	f43f af52 	beq.w	8004ec6 <_printf_float+0xae>
 8005022:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005026:	429a      	cmp	r2, r3
 8005028:	db02      	blt.n	8005030 <_printf_float+0x218>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	07d8      	lsls	r0, r3, #31
 800502e:	d50e      	bpl.n	800504e <_printf_float+0x236>
 8005030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005034:	4659      	mov	r1, fp
 8005036:	4628      	mov	r0, r5
 8005038:	47b0      	blx	r6
 800503a:	3001      	adds	r0, #1
 800503c:	f43f af43 	beq.w	8004ec6 <_printf_float+0xae>
 8005040:	2700      	movs	r7, #0
 8005042:	f104 081a 	add.w	r8, r4, #26
 8005046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005048:	3b01      	subs	r3, #1
 800504a:	42bb      	cmp	r3, r7
 800504c:	dc09      	bgt.n	8005062 <_printf_float+0x24a>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	079f      	lsls	r7, r3, #30
 8005052:	f100 80fd 	bmi.w	8005250 <_printf_float+0x438>
 8005056:	68e0      	ldr	r0, [r4, #12]
 8005058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800505a:	4298      	cmp	r0, r3
 800505c:	bfb8      	it	lt
 800505e:	4618      	movlt	r0, r3
 8005060:	e733      	b.n	8004eca <_printf_float+0xb2>
 8005062:	2301      	movs	r3, #1
 8005064:	4642      	mov	r2, r8
 8005066:	4659      	mov	r1, fp
 8005068:	4628      	mov	r0, r5
 800506a:	47b0      	blx	r6
 800506c:	3001      	adds	r0, #1
 800506e:	f43f af2a 	beq.w	8004ec6 <_printf_float+0xae>
 8005072:	3701      	adds	r7, #1
 8005074:	e7e7      	b.n	8005046 <_printf_float+0x22e>
 8005076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005078:	2b00      	cmp	r3, #0
 800507a:	dc2b      	bgt.n	80050d4 <_printf_float+0x2bc>
 800507c:	2301      	movs	r3, #1
 800507e:	4a26      	ldr	r2, [pc, #152]	; (8005118 <_printf_float+0x300>)
 8005080:	4659      	mov	r1, fp
 8005082:	4628      	mov	r0, r5
 8005084:	47b0      	blx	r6
 8005086:	3001      	adds	r0, #1
 8005088:	f43f af1d 	beq.w	8004ec6 <_printf_float+0xae>
 800508c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800508e:	b923      	cbnz	r3, 800509a <_printf_float+0x282>
 8005090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005092:	b913      	cbnz	r3, 800509a <_printf_float+0x282>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	07d9      	lsls	r1, r3, #31
 8005098:	d5d9      	bpl.n	800504e <_printf_float+0x236>
 800509a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800509e:	4659      	mov	r1, fp
 80050a0:	4628      	mov	r0, r5
 80050a2:	47b0      	blx	r6
 80050a4:	3001      	adds	r0, #1
 80050a6:	f43f af0e 	beq.w	8004ec6 <_printf_float+0xae>
 80050aa:	f04f 0800 	mov.w	r8, #0
 80050ae:	f104 091a 	add.w	r9, r4, #26
 80050b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050b4:	425b      	negs	r3, r3
 80050b6:	4543      	cmp	r3, r8
 80050b8:	dc01      	bgt.n	80050be <_printf_float+0x2a6>
 80050ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050bc:	e797      	b.n	8004fee <_printf_float+0x1d6>
 80050be:	2301      	movs	r3, #1
 80050c0:	464a      	mov	r2, r9
 80050c2:	4659      	mov	r1, fp
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b0      	blx	r6
 80050c8:	3001      	adds	r0, #1
 80050ca:	f43f aefc 	beq.w	8004ec6 <_printf_float+0xae>
 80050ce:	f108 0801 	add.w	r8, r8, #1
 80050d2:	e7ee      	b.n	80050b2 <_printf_float+0x29a>
 80050d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050d8:	429a      	cmp	r2, r3
 80050da:	bfa8      	it	ge
 80050dc:	461a      	movge	r2, r3
 80050de:	2a00      	cmp	r2, #0
 80050e0:	4690      	mov	r8, r2
 80050e2:	dd07      	ble.n	80050f4 <_printf_float+0x2dc>
 80050e4:	4613      	mov	r3, r2
 80050e6:	4659      	mov	r1, fp
 80050e8:	463a      	mov	r2, r7
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b0      	blx	r6
 80050ee:	3001      	adds	r0, #1
 80050f0:	f43f aee9 	beq.w	8004ec6 <_printf_float+0xae>
 80050f4:	f104 031a 	add.w	r3, r4, #26
 80050f8:	f04f 0a00 	mov.w	sl, #0
 80050fc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005100:	930b      	str	r3, [sp, #44]	; 0x2c
 8005102:	e015      	b.n	8005130 <_printf_float+0x318>
 8005104:	7fefffff 	.word	0x7fefffff
 8005108:	08006ea7 	.word	0x08006ea7
 800510c:	08006ea3 	.word	0x08006ea3
 8005110:	08006eaf 	.word	0x08006eaf
 8005114:	08006eab 	.word	0x08006eab
 8005118:	08006eb3 	.word	0x08006eb3
 800511c:	2301      	movs	r3, #1
 800511e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005120:	4659      	mov	r1, fp
 8005122:	4628      	mov	r0, r5
 8005124:	47b0      	blx	r6
 8005126:	3001      	adds	r0, #1
 8005128:	f43f aecd 	beq.w	8004ec6 <_printf_float+0xae>
 800512c:	f10a 0a01 	add.w	sl, sl, #1
 8005130:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005134:	eba9 0308 	sub.w	r3, r9, r8
 8005138:	4553      	cmp	r3, sl
 800513a:	dcef      	bgt.n	800511c <_printf_float+0x304>
 800513c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005140:	429a      	cmp	r2, r3
 8005142:	444f      	add	r7, r9
 8005144:	db14      	blt.n	8005170 <_printf_float+0x358>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	07da      	lsls	r2, r3, #31
 800514a:	d411      	bmi.n	8005170 <_printf_float+0x358>
 800514c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800514e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005150:	eba3 0209 	sub.w	r2, r3, r9
 8005154:	eba3 0901 	sub.w	r9, r3, r1
 8005158:	4591      	cmp	r9, r2
 800515a:	bfa8      	it	ge
 800515c:	4691      	movge	r9, r2
 800515e:	f1b9 0f00 	cmp.w	r9, #0
 8005162:	dc0d      	bgt.n	8005180 <_printf_float+0x368>
 8005164:	2700      	movs	r7, #0
 8005166:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800516a:	f104 081a 	add.w	r8, r4, #26
 800516e:	e018      	b.n	80051a2 <_printf_float+0x38a>
 8005170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005174:	4659      	mov	r1, fp
 8005176:	4628      	mov	r0, r5
 8005178:	47b0      	blx	r6
 800517a:	3001      	adds	r0, #1
 800517c:	d1e6      	bne.n	800514c <_printf_float+0x334>
 800517e:	e6a2      	b.n	8004ec6 <_printf_float+0xae>
 8005180:	464b      	mov	r3, r9
 8005182:	463a      	mov	r2, r7
 8005184:	4659      	mov	r1, fp
 8005186:	4628      	mov	r0, r5
 8005188:	47b0      	blx	r6
 800518a:	3001      	adds	r0, #1
 800518c:	d1ea      	bne.n	8005164 <_printf_float+0x34c>
 800518e:	e69a      	b.n	8004ec6 <_printf_float+0xae>
 8005190:	2301      	movs	r3, #1
 8005192:	4642      	mov	r2, r8
 8005194:	4659      	mov	r1, fp
 8005196:	4628      	mov	r0, r5
 8005198:	47b0      	blx	r6
 800519a:	3001      	adds	r0, #1
 800519c:	f43f ae93 	beq.w	8004ec6 <_printf_float+0xae>
 80051a0:	3701      	adds	r7, #1
 80051a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	eba3 0309 	sub.w	r3, r3, r9
 80051ac:	42bb      	cmp	r3, r7
 80051ae:	dcef      	bgt.n	8005190 <_printf_float+0x378>
 80051b0:	e74d      	b.n	800504e <_printf_float+0x236>
 80051b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051b4:	2a01      	cmp	r2, #1
 80051b6:	dc01      	bgt.n	80051bc <_printf_float+0x3a4>
 80051b8:	07db      	lsls	r3, r3, #31
 80051ba:	d538      	bpl.n	800522e <_printf_float+0x416>
 80051bc:	2301      	movs	r3, #1
 80051be:	463a      	mov	r2, r7
 80051c0:	4659      	mov	r1, fp
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b0      	blx	r6
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f ae7d 	beq.w	8004ec6 <_printf_float+0xae>
 80051cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051d0:	4659      	mov	r1, fp
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b0      	blx	r6
 80051d6:	3001      	adds	r0, #1
 80051d8:	f107 0701 	add.w	r7, r7, #1
 80051dc:	f43f ae73 	beq.w	8004ec6 <_printf_float+0xae>
 80051e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051e6:	2200      	movs	r2, #0
 80051e8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80051ec:	2300      	movs	r3, #0
 80051ee:	f7fb fbdb 	bl	80009a8 <__aeabi_dcmpeq>
 80051f2:	b9c0      	cbnz	r0, 8005226 <_printf_float+0x40e>
 80051f4:	4643      	mov	r3, r8
 80051f6:	463a      	mov	r2, r7
 80051f8:	4659      	mov	r1, fp
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b0      	blx	r6
 80051fe:	3001      	adds	r0, #1
 8005200:	d10d      	bne.n	800521e <_printf_float+0x406>
 8005202:	e660      	b.n	8004ec6 <_printf_float+0xae>
 8005204:	2301      	movs	r3, #1
 8005206:	4642      	mov	r2, r8
 8005208:	4659      	mov	r1, fp
 800520a:	4628      	mov	r0, r5
 800520c:	47b0      	blx	r6
 800520e:	3001      	adds	r0, #1
 8005210:	f43f ae59 	beq.w	8004ec6 <_printf_float+0xae>
 8005214:	3701      	adds	r7, #1
 8005216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005218:	3b01      	subs	r3, #1
 800521a:	42bb      	cmp	r3, r7
 800521c:	dcf2      	bgt.n	8005204 <_printf_float+0x3ec>
 800521e:	464b      	mov	r3, r9
 8005220:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005224:	e6e4      	b.n	8004ff0 <_printf_float+0x1d8>
 8005226:	2700      	movs	r7, #0
 8005228:	f104 081a 	add.w	r8, r4, #26
 800522c:	e7f3      	b.n	8005216 <_printf_float+0x3fe>
 800522e:	2301      	movs	r3, #1
 8005230:	e7e1      	b.n	80051f6 <_printf_float+0x3de>
 8005232:	2301      	movs	r3, #1
 8005234:	4642      	mov	r2, r8
 8005236:	4659      	mov	r1, fp
 8005238:	4628      	mov	r0, r5
 800523a:	47b0      	blx	r6
 800523c:	3001      	adds	r0, #1
 800523e:	f43f ae42 	beq.w	8004ec6 <_printf_float+0xae>
 8005242:	3701      	adds	r7, #1
 8005244:	68e3      	ldr	r3, [r4, #12]
 8005246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	42bb      	cmp	r3, r7
 800524c:	dcf1      	bgt.n	8005232 <_printf_float+0x41a>
 800524e:	e702      	b.n	8005056 <_printf_float+0x23e>
 8005250:	2700      	movs	r7, #0
 8005252:	f104 0819 	add.w	r8, r4, #25
 8005256:	e7f5      	b.n	8005244 <_printf_float+0x42c>
 8005258:	2b00      	cmp	r3, #0
 800525a:	f43f ae94 	beq.w	8004f86 <_printf_float+0x16e>
 800525e:	f04f 0c00 	mov.w	ip, #0
 8005262:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005266:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800526a:	6022      	str	r2, [r4, #0]
 800526c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005270:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	463a      	mov	r2, r7
 8005278:	464b      	mov	r3, r9
 800527a:	4628      	mov	r0, r5
 800527c:	f7ff fd3b 	bl	8004cf6 <__cvt>
 8005280:	4607      	mov	r7, r0
 8005282:	e64f      	b.n	8004f24 <_printf_float+0x10c>

08005284 <_printf_common>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	4691      	mov	r9, r2
 800528a:	461f      	mov	r7, r3
 800528c:	688a      	ldr	r2, [r1, #8]
 800528e:	690b      	ldr	r3, [r1, #16]
 8005290:	4606      	mov	r6, r0
 8005292:	4293      	cmp	r3, r2
 8005294:	bfb8      	it	lt
 8005296:	4613      	movlt	r3, r2
 8005298:	f8c9 3000 	str.w	r3, [r9]
 800529c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052a0:	460c      	mov	r4, r1
 80052a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a6:	b112      	cbz	r2, 80052ae <_printf_common+0x2a>
 80052a8:	3301      	adds	r3, #1
 80052aa:	f8c9 3000 	str.w	r3, [r9]
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	0699      	lsls	r1, r3, #26
 80052b2:	bf42      	ittt	mi
 80052b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052b8:	3302      	addmi	r3, #2
 80052ba:	f8c9 3000 	strmi.w	r3, [r9]
 80052be:	6825      	ldr	r5, [r4, #0]
 80052c0:	f015 0506 	ands.w	r5, r5, #6
 80052c4:	d107      	bne.n	80052d6 <_printf_common+0x52>
 80052c6:	f104 0a19 	add.w	sl, r4, #25
 80052ca:	68e3      	ldr	r3, [r4, #12]
 80052cc:	f8d9 2000 	ldr.w	r2, [r9]
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	42ab      	cmp	r3, r5
 80052d4:	dc29      	bgt.n	800532a <_printf_common+0xa6>
 80052d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052da:	6822      	ldr	r2, [r4, #0]
 80052dc:	3300      	adds	r3, #0
 80052de:	bf18      	it	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	0692      	lsls	r2, r2, #26
 80052e4:	d42e      	bmi.n	8005344 <_printf_common+0xc0>
 80052e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ea:	4639      	mov	r1, r7
 80052ec:	4630      	mov	r0, r6
 80052ee:	47c0      	blx	r8
 80052f0:	3001      	adds	r0, #1
 80052f2:	d021      	beq.n	8005338 <_printf_common+0xb4>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	68e5      	ldr	r5, [r4, #12]
 80052f8:	f003 0306 	and.w	r3, r3, #6
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	bf18      	it	ne
 8005300:	2500      	movne	r5, #0
 8005302:	f8d9 2000 	ldr.w	r2, [r9]
 8005306:	f04f 0900 	mov.w	r9, #0
 800530a:	bf08      	it	eq
 800530c:	1aad      	subeq	r5, r5, r2
 800530e:	68a3      	ldr	r3, [r4, #8]
 8005310:	6922      	ldr	r2, [r4, #16]
 8005312:	bf08      	it	eq
 8005314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005318:	4293      	cmp	r3, r2
 800531a:	bfc4      	itt	gt
 800531c:	1a9b      	subgt	r3, r3, r2
 800531e:	18ed      	addgt	r5, r5, r3
 8005320:	341a      	adds	r4, #26
 8005322:	454d      	cmp	r5, r9
 8005324:	d11a      	bne.n	800535c <_printf_common+0xd8>
 8005326:	2000      	movs	r0, #0
 8005328:	e008      	b.n	800533c <_printf_common+0xb8>
 800532a:	2301      	movs	r3, #1
 800532c:	4652      	mov	r2, sl
 800532e:	4639      	mov	r1, r7
 8005330:	4630      	mov	r0, r6
 8005332:	47c0      	blx	r8
 8005334:	3001      	adds	r0, #1
 8005336:	d103      	bne.n	8005340 <_printf_common+0xbc>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	3501      	adds	r5, #1
 8005342:	e7c2      	b.n	80052ca <_printf_common+0x46>
 8005344:	2030      	movs	r0, #48	; 0x30
 8005346:	18e1      	adds	r1, r4, r3
 8005348:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005352:	4422      	add	r2, r4
 8005354:	3302      	adds	r3, #2
 8005356:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800535a:	e7c4      	b.n	80052e6 <_printf_common+0x62>
 800535c:	2301      	movs	r3, #1
 800535e:	4622      	mov	r2, r4
 8005360:	4639      	mov	r1, r7
 8005362:	4630      	mov	r0, r6
 8005364:	47c0      	blx	r8
 8005366:	3001      	adds	r0, #1
 8005368:	d0e6      	beq.n	8005338 <_printf_common+0xb4>
 800536a:	f109 0901 	add.w	r9, r9, #1
 800536e:	e7d8      	b.n	8005322 <_printf_common+0x9e>

08005370 <_printf_i>:
 8005370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005374:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005378:	460c      	mov	r4, r1
 800537a:	7e09      	ldrb	r1, [r1, #24]
 800537c:	b085      	sub	sp, #20
 800537e:	296e      	cmp	r1, #110	; 0x6e
 8005380:	4617      	mov	r7, r2
 8005382:	4606      	mov	r6, r0
 8005384:	4698      	mov	r8, r3
 8005386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005388:	f000 80b3 	beq.w	80054f2 <_printf_i+0x182>
 800538c:	d822      	bhi.n	80053d4 <_printf_i+0x64>
 800538e:	2963      	cmp	r1, #99	; 0x63
 8005390:	d036      	beq.n	8005400 <_printf_i+0x90>
 8005392:	d80a      	bhi.n	80053aa <_printf_i+0x3a>
 8005394:	2900      	cmp	r1, #0
 8005396:	f000 80b9 	beq.w	800550c <_printf_i+0x19c>
 800539a:	2958      	cmp	r1, #88	; 0x58
 800539c:	f000 8083 	beq.w	80054a6 <_printf_i+0x136>
 80053a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80053a8:	e032      	b.n	8005410 <_printf_i+0xa0>
 80053aa:	2964      	cmp	r1, #100	; 0x64
 80053ac:	d001      	beq.n	80053b2 <_printf_i+0x42>
 80053ae:	2969      	cmp	r1, #105	; 0x69
 80053b0:	d1f6      	bne.n	80053a0 <_printf_i+0x30>
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	6813      	ldr	r3, [r2, #0]
 80053b6:	0605      	lsls	r5, r0, #24
 80053b8:	f103 0104 	add.w	r1, r3, #4
 80053bc:	d52a      	bpl.n	8005414 <_printf_i+0xa4>
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6011      	str	r1, [r2, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da03      	bge.n	80053ce <_printf_i+0x5e>
 80053c6:	222d      	movs	r2, #45	; 0x2d
 80053c8:	425b      	negs	r3, r3
 80053ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053ce:	486f      	ldr	r0, [pc, #444]	; (800558c <_printf_i+0x21c>)
 80053d0:	220a      	movs	r2, #10
 80053d2:	e039      	b.n	8005448 <_printf_i+0xd8>
 80053d4:	2973      	cmp	r1, #115	; 0x73
 80053d6:	f000 809d 	beq.w	8005514 <_printf_i+0x1a4>
 80053da:	d808      	bhi.n	80053ee <_printf_i+0x7e>
 80053dc:	296f      	cmp	r1, #111	; 0x6f
 80053de:	d020      	beq.n	8005422 <_printf_i+0xb2>
 80053e0:	2970      	cmp	r1, #112	; 0x70
 80053e2:	d1dd      	bne.n	80053a0 <_printf_i+0x30>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	f043 0320 	orr.w	r3, r3, #32
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	e003      	b.n	80053f6 <_printf_i+0x86>
 80053ee:	2975      	cmp	r1, #117	; 0x75
 80053f0:	d017      	beq.n	8005422 <_printf_i+0xb2>
 80053f2:	2978      	cmp	r1, #120	; 0x78
 80053f4:	d1d4      	bne.n	80053a0 <_printf_i+0x30>
 80053f6:	2378      	movs	r3, #120	; 0x78
 80053f8:	4865      	ldr	r0, [pc, #404]	; (8005590 <_printf_i+0x220>)
 80053fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053fe:	e055      	b.n	80054ac <_printf_i+0x13c>
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005406:	1d19      	adds	r1, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6011      	str	r1, [r2, #0]
 800540c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005410:	2301      	movs	r3, #1
 8005412:	e08c      	b.n	800552e <_printf_i+0x1be>
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f010 0f40 	tst.w	r0, #64	; 0x40
 800541a:	6011      	str	r1, [r2, #0]
 800541c:	bf18      	it	ne
 800541e:	b21b      	sxthne	r3, r3
 8005420:	e7cf      	b.n	80053c2 <_printf_i+0x52>
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	6825      	ldr	r5, [r4, #0]
 8005426:	1d18      	adds	r0, r3, #4
 8005428:	6010      	str	r0, [r2, #0]
 800542a:	0628      	lsls	r0, r5, #24
 800542c:	d501      	bpl.n	8005432 <_printf_i+0xc2>
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	e002      	b.n	8005438 <_printf_i+0xc8>
 8005432:	0668      	lsls	r0, r5, #25
 8005434:	d5fb      	bpl.n	800542e <_printf_i+0xbe>
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	296f      	cmp	r1, #111	; 0x6f
 800543a:	bf14      	ite	ne
 800543c:	220a      	movne	r2, #10
 800543e:	2208      	moveq	r2, #8
 8005440:	4852      	ldr	r0, [pc, #328]	; (800558c <_printf_i+0x21c>)
 8005442:	2100      	movs	r1, #0
 8005444:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005448:	6865      	ldr	r5, [r4, #4]
 800544a:	2d00      	cmp	r5, #0
 800544c:	60a5      	str	r5, [r4, #8]
 800544e:	f2c0 8095 	blt.w	800557c <_printf_i+0x20c>
 8005452:	6821      	ldr	r1, [r4, #0]
 8005454:	f021 0104 	bic.w	r1, r1, #4
 8005458:	6021      	str	r1, [r4, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d13d      	bne.n	80054da <_printf_i+0x16a>
 800545e:	2d00      	cmp	r5, #0
 8005460:	f040 808e 	bne.w	8005580 <_printf_i+0x210>
 8005464:	4665      	mov	r5, ip
 8005466:	2a08      	cmp	r2, #8
 8005468:	d10b      	bne.n	8005482 <_printf_i+0x112>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	07db      	lsls	r3, r3, #31
 800546e:	d508      	bpl.n	8005482 <_printf_i+0x112>
 8005470:	6923      	ldr	r3, [r4, #16]
 8005472:	6862      	ldr	r2, [r4, #4]
 8005474:	429a      	cmp	r2, r3
 8005476:	bfde      	ittt	le
 8005478:	2330      	movle	r3, #48	; 0x30
 800547a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800547e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005482:	ebac 0305 	sub.w	r3, ip, r5
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	f8cd 8000 	str.w	r8, [sp]
 800548c:	463b      	mov	r3, r7
 800548e:	aa03      	add	r2, sp, #12
 8005490:	4621      	mov	r1, r4
 8005492:	4630      	mov	r0, r6
 8005494:	f7ff fef6 	bl	8005284 <_printf_common>
 8005498:	3001      	adds	r0, #1
 800549a:	d14d      	bne.n	8005538 <_printf_i+0x1c8>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a0:	b005      	add	sp, #20
 80054a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054a6:	4839      	ldr	r0, [pc, #228]	; (800558c <_printf_i+0x21c>)
 80054a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80054ac:	6813      	ldr	r3, [r2, #0]
 80054ae:	6821      	ldr	r1, [r4, #0]
 80054b0:	1d1d      	adds	r5, r3, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6015      	str	r5, [r2, #0]
 80054b6:	060a      	lsls	r2, r1, #24
 80054b8:	d50b      	bpl.n	80054d2 <_printf_i+0x162>
 80054ba:	07ca      	lsls	r2, r1, #31
 80054bc:	bf44      	itt	mi
 80054be:	f041 0120 	orrmi.w	r1, r1, #32
 80054c2:	6021      	strmi	r1, [r4, #0]
 80054c4:	b91b      	cbnz	r3, 80054ce <_printf_i+0x15e>
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	f022 0220 	bic.w	r2, r2, #32
 80054cc:	6022      	str	r2, [r4, #0]
 80054ce:	2210      	movs	r2, #16
 80054d0:	e7b7      	b.n	8005442 <_printf_i+0xd2>
 80054d2:	064d      	lsls	r5, r1, #25
 80054d4:	bf48      	it	mi
 80054d6:	b29b      	uxthmi	r3, r3
 80054d8:	e7ef      	b.n	80054ba <_printf_i+0x14a>
 80054da:	4665      	mov	r5, ip
 80054dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80054e0:	fb02 3311 	mls	r3, r2, r1, r3
 80054e4:	5cc3      	ldrb	r3, [r0, r3]
 80054e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054ea:	460b      	mov	r3, r1
 80054ec:	2900      	cmp	r1, #0
 80054ee:	d1f5      	bne.n	80054dc <_printf_i+0x16c>
 80054f0:	e7b9      	b.n	8005466 <_printf_i+0xf6>
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	1d18      	adds	r0, r3, #4
 80054f8:	6961      	ldr	r1, [r4, #20]
 80054fa:	6010      	str	r0, [r2, #0]
 80054fc:	0628      	lsls	r0, r5, #24
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	d501      	bpl.n	8005506 <_printf_i+0x196>
 8005502:	6019      	str	r1, [r3, #0]
 8005504:	e002      	b.n	800550c <_printf_i+0x19c>
 8005506:	066a      	lsls	r2, r5, #25
 8005508:	d5fb      	bpl.n	8005502 <_printf_i+0x192>
 800550a:	8019      	strh	r1, [r3, #0]
 800550c:	2300      	movs	r3, #0
 800550e:	4665      	mov	r5, ip
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	e7b9      	b.n	8005488 <_printf_i+0x118>
 8005514:	6813      	ldr	r3, [r2, #0]
 8005516:	1d19      	adds	r1, r3, #4
 8005518:	6011      	str	r1, [r2, #0]
 800551a:	681d      	ldr	r5, [r3, #0]
 800551c:	6862      	ldr	r2, [r4, #4]
 800551e:	2100      	movs	r1, #0
 8005520:	4628      	mov	r0, r5
 8005522:	f000 fef3 	bl	800630c <memchr>
 8005526:	b108      	cbz	r0, 800552c <_printf_i+0x1bc>
 8005528:	1b40      	subs	r0, r0, r5
 800552a:	6060      	str	r0, [r4, #4]
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	2300      	movs	r3, #0
 8005532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005536:	e7a7      	b.n	8005488 <_printf_i+0x118>
 8005538:	6923      	ldr	r3, [r4, #16]
 800553a:	462a      	mov	r2, r5
 800553c:	4639      	mov	r1, r7
 800553e:	4630      	mov	r0, r6
 8005540:	47c0      	blx	r8
 8005542:	3001      	adds	r0, #1
 8005544:	d0aa      	beq.n	800549c <_printf_i+0x12c>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	079b      	lsls	r3, r3, #30
 800554a:	d413      	bmi.n	8005574 <_printf_i+0x204>
 800554c:	68e0      	ldr	r0, [r4, #12]
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	4298      	cmp	r0, r3
 8005552:	bfb8      	it	lt
 8005554:	4618      	movlt	r0, r3
 8005556:	e7a3      	b.n	80054a0 <_printf_i+0x130>
 8005558:	2301      	movs	r3, #1
 800555a:	464a      	mov	r2, r9
 800555c:	4639      	mov	r1, r7
 800555e:	4630      	mov	r0, r6
 8005560:	47c0      	blx	r8
 8005562:	3001      	adds	r0, #1
 8005564:	d09a      	beq.n	800549c <_printf_i+0x12c>
 8005566:	3501      	adds	r5, #1
 8005568:	68e3      	ldr	r3, [r4, #12]
 800556a:	9a03      	ldr	r2, [sp, #12]
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	42ab      	cmp	r3, r5
 8005570:	dcf2      	bgt.n	8005558 <_printf_i+0x1e8>
 8005572:	e7eb      	b.n	800554c <_printf_i+0x1dc>
 8005574:	2500      	movs	r5, #0
 8005576:	f104 0919 	add.w	r9, r4, #25
 800557a:	e7f5      	b.n	8005568 <_printf_i+0x1f8>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ac      	bne.n	80054da <_printf_i+0x16a>
 8005580:	7803      	ldrb	r3, [r0, #0]
 8005582:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005586:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800558a:	e76c      	b.n	8005466 <_printf_i+0xf6>
 800558c:	08006eb5 	.word	0x08006eb5
 8005590:	08006ec6 	.word	0x08006ec6

08005594 <_raise_r>:
 8005594:	291f      	cmp	r1, #31
 8005596:	b538      	push	{r3, r4, r5, lr}
 8005598:	4604      	mov	r4, r0
 800559a:	460d      	mov	r5, r1
 800559c:	d904      	bls.n	80055a8 <_raise_r+0x14>
 800559e:	2316      	movs	r3, #22
 80055a0:	6003      	str	r3, [r0, #0]
 80055a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80055aa:	b112      	cbz	r2, 80055b2 <_raise_r+0x1e>
 80055ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055b0:	b94b      	cbnz	r3, 80055c6 <_raise_r+0x32>
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 f830 	bl	8005618 <_getpid_r>
 80055b8:	462a      	mov	r2, r5
 80055ba:	4601      	mov	r1, r0
 80055bc:	4620      	mov	r0, r4
 80055be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055c2:	f000 b817 	b.w	80055f4 <_kill_r>
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d00a      	beq.n	80055e0 <_raise_r+0x4c>
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	d103      	bne.n	80055d6 <_raise_r+0x42>
 80055ce:	2316      	movs	r3, #22
 80055d0:	6003      	str	r3, [r0, #0]
 80055d2:	2001      	movs	r0, #1
 80055d4:	e7e7      	b.n	80055a6 <_raise_r+0x12>
 80055d6:	2400      	movs	r4, #0
 80055d8:	4628      	mov	r0, r5
 80055da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80055de:	4798      	blx	r3
 80055e0:	2000      	movs	r0, #0
 80055e2:	e7e0      	b.n	80055a6 <_raise_r+0x12>

080055e4 <raise>:
 80055e4:	4b02      	ldr	r3, [pc, #8]	; (80055f0 <raise+0xc>)
 80055e6:	4601      	mov	r1, r0
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	f7ff bfd3 	b.w	8005594 <_raise_r>
 80055ee:	bf00      	nop
 80055f0:	20000180 	.word	0x20000180

080055f4 <_kill_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	2300      	movs	r3, #0
 80055f8:	4c06      	ldr	r4, [pc, #24]	; (8005614 <_kill_r+0x20>)
 80055fa:	4605      	mov	r5, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	f7fc fa1d 	bl	8001a40 <_kill>
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	d102      	bne.n	8005610 <_kill_r+0x1c>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	b103      	cbz	r3, 8005610 <_kill_r+0x1c>
 800560e:	602b      	str	r3, [r5, #0]
 8005610:	bd38      	pop	{r3, r4, r5, pc}
 8005612:	bf00      	nop
 8005614:	200015f4 	.word	0x200015f4

08005618 <_getpid_r>:
 8005618:	f7fc ba10 	b.w	8001a3c <_getpid>

0800561c <_vsiprintf_r>:
 800561c:	b500      	push	{lr}
 800561e:	b09b      	sub	sp, #108	; 0x6c
 8005620:	9100      	str	r1, [sp, #0]
 8005622:	9104      	str	r1, [sp, #16]
 8005624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005628:	9105      	str	r1, [sp, #20]
 800562a:	9102      	str	r1, [sp, #8]
 800562c:	4905      	ldr	r1, [pc, #20]	; (8005644 <_vsiprintf_r+0x28>)
 800562e:	9103      	str	r1, [sp, #12]
 8005630:	4669      	mov	r1, sp
 8005632:	f001 fa63 	bl	8006afc <_svfiprintf_r>
 8005636:	2200      	movs	r2, #0
 8005638:	9b00      	ldr	r3, [sp, #0]
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	b01b      	add	sp, #108	; 0x6c
 800563e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005642:	bf00      	nop
 8005644:	ffff0208 	.word	0xffff0208

08005648 <vsiprintf>:
 8005648:	4613      	mov	r3, r2
 800564a:	460a      	mov	r2, r1
 800564c:	4601      	mov	r1, r0
 800564e:	4802      	ldr	r0, [pc, #8]	; (8005658 <vsiprintf+0x10>)
 8005650:	6800      	ldr	r0, [r0, #0]
 8005652:	f7ff bfe3 	b.w	800561c <_vsiprintf_r>
 8005656:	bf00      	nop
 8005658:	20000180 	.word	0x20000180

0800565c <quorem>:
 800565c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005660:	6903      	ldr	r3, [r0, #16]
 8005662:	690c      	ldr	r4, [r1, #16]
 8005664:	4680      	mov	r8, r0
 8005666:	42a3      	cmp	r3, r4
 8005668:	f2c0 8084 	blt.w	8005774 <quorem+0x118>
 800566c:	3c01      	subs	r4, #1
 800566e:	f101 0714 	add.w	r7, r1, #20
 8005672:	f100 0614 	add.w	r6, r0, #20
 8005676:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800567a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800567e:	3501      	adds	r5, #1
 8005680:	fbb0 f5f5 	udiv	r5, r0, r5
 8005684:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005688:	eb06 030c 	add.w	r3, r6, ip
 800568c:	eb07 090c 	add.w	r9, r7, ip
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	b39d      	cbz	r5, 80056fc <quorem+0xa0>
 8005694:	f04f 0a00 	mov.w	sl, #0
 8005698:	4638      	mov	r0, r7
 800569a:	46b6      	mov	lr, r6
 800569c:	46d3      	mov	fp, sl
 800569e:	f850 2b04 	ldr.w	r2, [r0], #4
 80056a2:	b293      	uxth	r3, r2
 80056a4:	fb05 a303 	mla	r3, r5, r3, sl
 80056a8:	0c12      	lsrs	r2, r2, #16
 80056aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056ae:	fb05 a202 	mla	r2, r5, r2, sl
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	ebab 0303 	sub.w	r3, fp, r3
 80056b8:	f8de b000 	ldr.w	fp, [lr]
 80056bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80056c0:	fa1f fb8b 	uxth.w	fp, fp
 80056c4:	445b      	add	r3, fp
 80056c6:	fa1f fb82 	uxth.w	fp, r2
 80056ca:	f8de 2000 	ldr.w	r2, [lr]
 80056ce:	4581      	cmp	r9, r0
 80056d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80056d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056d8:	b29b      	uxth	r3, r3
 80056da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056de:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80056e2:	f84e 3b04 	str.w	r3, [lr], #4
 80056e6:	d2da      	bcs.n	800569e <quorem+0x42>
 80056e8:	f856 300c 	ldr.w	r3, [r6, ip]
 80056ec:	b933      	cbnz	r3, 80056fc <quorem+0xa0>
 80056ee:	9b01      	ldr	r3, [sp, #4]
 80056f0:	3b04      	subs	r3, #4
 80056f2:	429e      	cmp	r6, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	d331      	bcc.n	800575c <quorem+0x100>
 80056f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80056fc:	4640      	mov	r0, r8
 80056fe:	f001 f827 	bl	8006750 <__mcmp>
 8005702:	2800      	cmp	r0, #0
 8005704:	db26      	blt.n	8005754 <quorem+0xf8>
 8005706:	4630      	mov	r0, r6
 8005708:	f04f 0c00 	mov.w	ip, #0
 800570c:	3501      	adds	r5, #1
 800570e:	f857 1b04 	ldr.w	r1, [r7], #4
 8005712:	f8d0 e000 	ldr.w	lr, [r0]
 8005716:	b28b      	uxth	r3, r1
 8005718:	ebac 0303 	sub.w	r3, ip, r3
 800571c:	fa1f f28e 	uxth.w	r2, lr
 8005720:	4413      	add	r3, r2
 8005722:	0c0a      	lsrs	r2, r1, #16
 8005724:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005728:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800572c:	b29b      	uxth	r3, r3
 800572e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005732:	45b9      	cmp	r9, r7
 8005734:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005738:	f840 3b04 	str.w	r3, [r0], #4
 800573c:	d2e7      	bcs.n	800570e <quorem+0xb2>
 800573e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005742:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005746:	b92a      	cbnz	r2, 8005754 <quorem+0xf8>
 8005748:	3b04      	subs	r3, #4
 800574a:	429e      	cmp	r6, r3
 800574c:	461a      	mov	r2, r3
 800574e:	d30b      	bcc.n	8005768 <quorem+0x10c>
 8005750:	f8c8 4010 	str.w	r4, [r8, #16]
 8005754:	4628      	mov	r0, r5
 8005756:	b003      	add	sp, #12
 8005758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	3b04      	subs	r3, #4
 8005760:	2a00      	cmp	r2, #0
 8005762:	d1c9      	bne.n	80056f8 <quorem+0x9c>
 8005764:	3c01      	subs	r4, #1
 8005766:	e7c4      	b.n	80056f2 <quorem+0x96>
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	3b04      	subs	r3, #4
 800576c:	2a00      	cmp	r2, #0
 800576e:	d1ef      	bne.n	8005750 <quorem+0xf4>
 8005770:	3c01      	subs	r4, #1
 8005772:	e7ea      	b.n	800574a <quorem+0xee>
 8005774:	2000      	movs	r0, #0
 8005776:	e7ee      	b.n	8005756 <quorem+0xfa>

08005778 <_dtoa_r>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	4616      	mov	r6, r2
 800577e:	461f      	mov	r7, r3
 8005780:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005782:	b095      	sub	sp, #84	; 0x54
 8005784:	4604      	mov	r4, r0
 8005786:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800578a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800578e:	b93d      	cbnz	r5, 80057a0 <_dtoa_r+0x28>
 8005790:	2010      	movs	r0, #16
 8005792:	f000 fdb3 	bl	80062fc <malloc>
 8005796:	6260      	str	r0, [r4, #36]	; 0x24
 8005798:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800579c:	6005      	str	r5, [r0, #0]
 800579e:	60c5      	str	r5, [r0, #12]
 80057a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	b151      	cbz	r1, 80057bc <_dtoa_r+0x44>
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	2301      	movs	r3, #1
 80057aa:	4093      	lsls	r3, r2
 80057ac:	604a      	str	r2, [r1, #4]
 80057ae:	608b      	str	r3, [r1, #8]
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 fded 	bl	8006390 <_Bfree>
 80057b6:	2200      	movs	r2, #0
 80057b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	1e3b      	subs	r3, r7, #0
 80057be:	bfaf      	iteee	ge
 80057c0:	2300      	movge	r3, #0
 80057c2:	2201      	movlt	r2, #1
 80057c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057c8:	9303      	strlt	r3, [sp, #12]
 80057ca:	bfac      	ite	ge
 80057cc:	f8c8 3000 	strge.w	r3, [r8]
 80057d0:	f8c8 2000 	strlt.w	r2, [r8]
 80057d4:	4bae      	ldr	r3, [pc, #696]	; (8005a90 <_dtoa_r+0x318>)
 80057d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80057da:	ea33 0308 	bics.w	r3, r3, r8
 80057de:	d11b      	bne.n	8005818 <_dtoa_r+0xa0>
 80057e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80057e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	9b02      	ldr	r3, [sp, #8]
 80057ea:	b923      	cbnz	r3, 80057f6 <_dtoa_r+0x7e>
 80057ec:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f000 8545 	beq.w	8006280 <_dtoa_r+0xb08>
 80057f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057f8:	b953      	cbnz	r3, 8005810 <_dtoa_r+0x98>
 80057fa:	4ba6      	ldr	r3, [pc, #664]	; (8005a94 <_dtoa_r+0x31c>)
 80057fc:	e021      	b.n	8005842 <_dtoa_r+0xca>
 80057fe:	4ba6      	ldr	r3, [pc, #664]	; (8005a98 <_dtoa_r+0x320>)
 8005800:	9306      	str	r3, [sp, #24]
 8005802:	3308      	adds	r3, #8
 8005804:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	9806      	ldr	r0, [sp, #24]
 800580a:	b015      	add	sp, #84	; 0x54
 800580c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005810:	4ba0      	ldr	r3, [pc, #640]	; (8005a94 <_dtoa_r+0x31c>)
 8005812:	9306      	str	r3, [sp, #24]
 8005814:	3303      	adds	r3, #3
 8005816:	e7f5      	b.n	8005804 <_dtoa_r+0x8c>
 8005818:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800581c:	2200      	movs	r2, #0
 800581e:	2300      	movs	r3, #0
 8005820:	4630      	mov	r0, r6
 8005822:	4639      	mov	r1, r7
 8005824:	f7fb f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8005828:	4682      	mov	sl, r0
 800582a:	b160      	cbz	r0, 8005846 <_dtoa_r+0xce>
 800582c:	2301      	movs	r3, #1
 800582e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8520 	beq.w	800627a <_dtoa_r+0xb02>
 800583a:	4b98      	ldr	r3, [pc, #608]	; (8005a9c <_dtoa_r+0x324>)
 800583c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	3b01      	subs	r3, #1
 8005842:	9306      	str	r3, [sp, #24]
 8005844:	e7e0      	b.n	8005808 <_dtoa_r+0x90>
 8005846:	ab12      	add	r3, sp, #72	; 0x48
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	ab13      	add	r3, sp, #76	; 0x4c
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	4632      	mov	r2, r6
 8005850:	463b      	mov	r3, r7
 8005852:	4620      	mov	r0, r4
 8005854:	f000 fff4 	bl	8006840 <__d2b>
 8005858:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800585c:	4683      	mov	fp, r0
 800585e:	2d00      	cmp	r5, #0
 8005860:	d07d      	beq.n	800595e <_dtoa_r+0x1e6>
 8005862:	46b0      	mov	r8, r6
 8005864:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005868:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800586c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005870:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005874:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005878:	2200      	movs	r2, #0
 800587a:	4b89      	ldr	r3, [pc, #548]	; (8005aa0 <_dtoa_r+0x328>)
 800587c:	4640      	mov	r0, r8
 800587e:	4649      	mov	r1, r9
 8005880:	f7fa fc72 	bl	8000168 <__aeabi_dsub>
 8005884:	a37c      	add	r3, pc, #496	; (adr r3, 8005a78 <_dtoa_r+0x300>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	a37c      	add	r3, pc, #496	; (adr r3, 8005a80 <_dtoa_r+0x308>)
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f7fa fc6a 	bl	800016c <__adddf3>
 8005898:	4606      	mov	r6, r0
 800589a:	4628      	mov	r0, r5
 800589c:	460f      	mov	r7, r1
 800589e:	f7fa fdb1 	bl	8000404 <__aeabi_i2d>
 80058a2:	a379      	add	r3, pc, #484	; (adr r3, 8005a88 <_dtoa_r+0x310>)
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f7fa fe16 	bl	80004d8 <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4630      	mov	r0, r6
 80058b2:	4639      	mov	r1, r7
 80058b4:	f7fa fc5a 	bl	800016c <__adddf3>
 80058b8:	4606      	mov	r6, r0
 80058ba:	460f      	mov	r7, r1
 80058bc:	f7fb f8bc 	bl	8000a38 <__aeabi_d2iz>
 80058c0:	2200      	movs	r2, #0
 80058c2:	4682      	mov	sl, r0
 80058c4:	2300      	movs	r3, #0
 80058c6:	4630      	mov	r0, r6
 80058c8:	4639      	mov	r1, r7
 80058ca:	f7fb f877 	bl	80009bc <__aeabi_dcmplt>
 80058ce:	b148      	cbz	r0, 80058e4 <_dtoa_r+0x16c>
 80058d0:	4650      	mov	r0, sl
 80058d2:	f7fa fd97 	bl	8000404 <__aeabi_i2d>
 80058d6:	4632      	mov	r2, r6
 80058d8:	463b      	mov	r3, r7
 80058da:	f7fb f865 	bl	80009a8 <__aeabi_dcmpeq>
 80058de:	b908      	cbnz	r0, 80058e4 <_dtoa_r+0x16c>
 80058e0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058e4:	f1ba 0f16 	cmp.w	sl, #22
 80058e8:	d85a      	bhi.n	80059a0 <_dtoa_r+0x228>
 80058ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ee:	496d      	ldr	r1, [pc, #436]	; (8005aa4 <_dtoa_r+0x32c>)
 80058f0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80058f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058f8:	f7fb f87e 	bl	80009f8 <__aeabi_dcmpgt>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d051      	beq.n	80059a4 <_dtoa_r+0x22c>
 8005900:	2300      	movs	r3, #0
 8005902:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005906:	930d      	str	r3, [sp, #52]	; 0x34
 8005908:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800590a:	1b5d      	subs	r5, r3, r5
 800590c:	1e6b      	subs	r3, r5, #1
 800590e:	9307      	str	r3, [sp, #28]
 8005910:	bf43      	ittte	mi
 8005912:	2300      	movmi	r3, #0
 8005914:	f1c5 0901 	rsbmi	r9, r5, #1
 8005918:	9307      	strmi	r3, [sp, #28]
 800591a:	f04f 0900 	movpl.w	r9, #0
 800591e:	f1ba 0f00 	cmp.w	sl, #0
 8005922:	db41      	blt.n	80059a8 <_dtoa_r+0x230>
 8005924:	9b07      	ldr	r3, [sp, #28]
 8005926:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800592a:	4453      	add	r3, sl
 800592c:	9307      	str	r3, [sp, #28]
 800592e:	2300      	movs	r3, #0
 8005930:	9308      	str	r3, [sp, #32]
 8005932:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005934:	2b09      	cmp	r3, #9
 8005936:	f200 808f 	bhi.w	8005a58 <_dtoa_r+0x2e0>
 800593a:	2b05      	cmp	r3, #5
 800593c:	bfc4      	itt	gt
 800593e:	3b04      	subgt	r3, #4
 8005940:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005942:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005944:	bfc8      	it	gt
 8005946:	2500      	movgt	r5, #0
 8005948:	f1a3 0302 	sub.w	r3, r3, #2
 800594c:	bfd8      	it	le
 800594e:	2501      	movle	r5, #1
 8005950:	2b03      	cmp	r3, #3
 8005952:	f200 808d 	bhi.w	8005a70 <_dtoa_r+0x2f8>
 8005956:	e8df f003 	tbb	[pc, r3]
 800595a:	7d7b      	.short	0x7d7b
 800595c:	6f2f      	.short	0x6f2f
 800595e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005962:	441d      	add	r5, r3
 8005964:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005968:	2820      	cmp	r0, #32
 800596a:	dd13      	ble.n	8005994 <_dtoa_r+0x21c>
 800596c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005970:	9b02      	ldr	r3, [sp, #8]
 8005972:	fa08 f800 	lsl.w	r8, r8, r0
 8005976:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800597a:	fa23 f000 	lsr.w	r0, r3, r0
 800597e:	ea48 0000 	orr.w	r0, r8, r0
 8005982:	f7fa fd2f 	bl	80003e4 <__aeabi_ui2d>
 8005986:	2301      	movs	r3, #1
 8005988:	4680      	mov	r8, r0
 800598a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800598e:	3d01      	subs	r5, #1
 8005990:	9310      	str	r3, [sp, #64]	; 0x40
 8005992:	e771      	b.n	8005878 <_dtoa_r+0x100>
 8005994:	9b02      	ldr	r3, [sp, #8]
 8005996:	f1c0 0020 	rsb	r0, r0, #32
 800599a:	fa03 f000 	lsl.w	r0, r3, r0
 800599e:	e7f0      	b.n	8005982 <_dtoa_r+0x20a>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e7b0      	b.n	8005906 <_dtoa_r+0x18e>
 80059a4:	900d      	str	r0, [sp, #52]	; 0x34
 80059a6:	e7af      	b.n	8005908 <_dtoa_r+0x190>
 80059a8:	f1ca 0300 	rsb	r3, sl, #0
 80059ac:	9308      	str	r3, [sp, #32]
 80059ae:	2300      	movs	r3, #0
 80059b0:	eba9 090a 	sub.w	r9, r9, sl
 80059b4:	930c      	str	r3, [sp, #48]	; 0x30
 80059b6:	e7bc      	b.n	8005932 <_dtoa_r+0x1ba>
 80059b8:	2301      	movs	r3, #1
 80059ba:	9309      	str	r3, [sp, #36]	; 0x24
 80059bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dd74      	ble.n	8005aac <_dtoa_r+0x334>
 80059c2:	4698      	mov	r8, r3
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	2200      	movs	r2, #0
 80059c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059ca:	6072      	str	r2, [r6, #4]
 80059cc:	2204      	movs	r2, #4
 80059ce:	f102 0014 	add.w	r0, r2, #20
 80059d2:	4298      	cmp	r0, r3
 80059d4:	6871      	ldr	r1, [r6, #4]
 80059d6:	d96e      	bls.n	8005ab6 <_dtoa_r+0x33e>
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 fca5 	bl	8006328 <_Balloc>
 80059de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e0:	6030      	str	r0, [r6, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f1b8 0f0e 	cmp.w	r8, #14
 80059e8:	9306      	str	r3, [sp, #24]
 80059ea:	f200 80ed 	bhi.w	8005bc8 <_dtoa_r+0x450>
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	f000 80ea 	beq.w	8005bc8 <_dtoa_r+0x450>
 80059f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059f8:	f1ba 0f00 	cmp.w	sl, #0
 80059fc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005a00:	dd77      	ble.n	8005af2 <_dtoa_r+0x37a>
 8005a02:	4a28      	ldr	r2, [pc, #160]	; (8005aa4 <_dtoa_r+0x32c>)
 8005a04:	f00a 030f 	and.w	r3, sl, #15
 8005a08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005a0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a10:	06f0      	lsls	r0, r6, #27
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a1a:	d568      	bpl.n	8005aee <_dtoa_r+0x376>
 8005a1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005a20:	4b21      	ldr	r3, [pc, #132]	; (8005aa8 <_dtoa_r+0x330>)
 8005a22:	2503      	movs	r5, #3
 8005a24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a28:	f7fa fe80 	bl	800072c <__aeabi_ddiv>
 8005a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a30:	f006 060f 	and.w	r6, r6, #15
 8005a34:	4f1c      	ldr	r7, [pc, #112]	; (8005aa8 <_dtoa_r+0x330>)
 8005a36:	e04f      	b.n	8005ad8 <_dtoa_r+0x360>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a3e:	4453      	add	r3, sl
 8005a40:	f103 0801 	add.w	r8, r3, #1
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	4643      	mov	r3, r8
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	bfb8      	it	lt
 8005a4c:	2301      	movlt	r3, #1
 8005a4e:	e7ba      	b.n	80059c6 <_dtoa_r+0x24e>
 8005a50:	2300      	movs	r3, #0
 8005a52:	e7b2      	b.n	80059ba <_dtoa_r+0x242>
 8005a54:	2300      	movs	r3, #0
 8005a56:	e7f0      	b.n	8005a3a <_dtoa_r+0x2c2>
 8005a58:	2501      	movs	r5, #1
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9509      	str	r5, [sp, #36]	; 0x24
 8005a5e:	931e      	str	r3, [sp, #120]	; 0x78
 8005a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a64:	2200      	movs	r2, #0
 8005a66:	9304      	str	r3, [sp, #16]
 8005a68:	4698      	mov	r8, r3
 8005a6a:	2312      	movs	r3, #18
 8005a6c:	921f      	str	r2, [sp, #124]	; 0x7c
 8005a6e:	e7aa      	b.n	80059c6 <_dtoa_r+0x24e>
 8005a70:	2301      	movs	r3, #1
 8005a72:	9309      	str	r3, [sp, #36]	; 0x24
 8005a74:	e7f4      	b.n	8005a60 <_dtoa_r+0x2e8>
 8005a76:	bf00      	nop
 8005a78:	636f4361 	.word	0x636f4361
 8005a7c:	3fd287a7 	.word	0x3fd287a7
 8005a80:	8b60c8b3 	.word	0x8b60c8b3
 8005a84:	3fc68a28 	.word	0x3fc68a28
 8005a88:	509f79fb 	.word	0x509f79fb
 8005a8c:	3fd34413 	.word	0x3fd34413
 8005a90:	7ff00000 	.word	0x7ff00000
 8005a94:	08006ee0 	.word	0x08006ee0
 8005a98:	08006ed7 	.word	0x08006ed7
 8005a9c:	08006eb4 	.word	0x08006eb4
 8005aa0:	3ff80000 	.word	0x3ff80000
 8005aa4:	08006f10 	.word	0x08006f10
 8005aa8:	08006ee8 	.word	0x08006ee8
 8005aac:	2301      	movs	r3, #1
 8005aae:	9304      	str	r3, [sp, #16]
 8005ab0:	4698      	mov	r8, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	e7da      	b.n	8005a6c <_dtoa_r+0x2f4>
 8005ab6:	3101      	adds	r1, #1
 8005ab8:	6071      	str	r1, [r6, #4]
 8005aba:	0052      	lsls	r2, r2, #1
 8005abc:	e787      	b.n	80059ce <_dtoa_r+0x256>
 8005abe:	07f1      	lsls	r1, r6, #31
 8005ac0:	d508      	bpl.n	8005ad4 <_dtoa_r+0x35c>
 8005ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aca:	f7fa fd05 	bl	80004d8 <__aeabi_dmul>
 8005ace:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ad2:	3501      	adds	r5, #1
 8005ad4:	1076      	asrs	r6, r6, #1
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	d1f0      	bne.n	8005abe <_dtoa_r+0x346>
 8005adc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ae4:	f7fa fe22 	bl	800072c <__aeabi_ddiv>
 8005ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aec:	e01b      	b.n	8005b26 <_dtoa_r+0x3ae>
 8005aee:	2502      	movs	r5, #2
 8005af0:	e7a0      	b.n	8005a34 <_dtoa_r+0x2bc>
 8005af2:	f000 80a4 	beq.w	8005c3e <_dtoa_r+0x4c6>
 8005af6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005afa:	f1ca 0600 	rsb	r6, sl, #0
 8005afe:	4ba0      	ldr	r3, [pc, #640]	; (8005d80 <_dtoa_r+0x608>)
 8005b00:	f006 020f 	and.w	r2, r6, #15
 8005b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f7fa fce4 	bl	80004d8 <__aeabi_dmul>
 8005b10:	2502      	movs	r5, #2
 8005b12:	2300      	movs	r3, #0
 8005b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b18:	4f9a      	ldr	r7, [pc, #616]	; (8005d84 <_dtoa_r+0x60c>)
 8005b1a:	1136      	asrs	r6, r6, #4
 8005b1c:	2e00      	cmp	r6, #0
 8005b1e:	f040 8083 	bne.w	8005c28 <_dtoa_r+0x4b0>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e0      	bne.n	8005ae8 <_dtoa_r+0x370>
 8005b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 808a 	beq.w	8005c42 <_dtoa_r+0x4ca>
 8005b2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b32:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4b92      	ldr	r3, [pc, #584]	; (8005d88 <_dtoa_r+0x610>)
 8005b3e:	f7fa ff3d 	bl	80009bc <__aeabi_dcmplt>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d07d      	beq.n	8005c42 <_dtoa_r+0x4ca>
 8005b46:	f1b8 0f00 	cmp.w	r8, #0
 8005b4a:	d07a      	beq.n	8005c42 <_dtoa_r+0x4ca>
 8005b4c:	9b04      	ldr	r3, [sp, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dd36      	ble.n	8005bc0 <_dtoa_r+0x448>
 8005b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b56:	2200      	movs	r2, #0
 8005b58:	4b8c      	ldr	r3, [pc, #560]	; (8005d8c <_dtoa_r+0x614>)
 8005b5a:	f7fa fcbd 	bl	80004d8 <__aeabi_dmul>
 8005b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b62:	9e04      	ldr	r6, [sp, #16]
 8005b64:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005b68:	3501      	adds	r5, #1
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7fa fc4a 	bl	8000404 <__aeabi_i2d>
 8005b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b74:	f7fa fcb0 	bl	80004d8 <__aeabi_dmul>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4b85      	ldr	r3, [pc, #532]	; (8005d90 <_dtoa_r+0x618>)
 8005b7c:	f7fa faf6 	bl	800016c <__adddf3>
 8005b80:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005b84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b88:	950b      	str	r5, [sp, #44]	; 0x2c
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	d15c      	bne.n	8005c48 <_dtoa_r+0x4d0>
 8005b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b92:	2200      	movs	r2, #0
 8005b94:	4b7f      	ldr	r3, [pc, #508]	; (8005d94 <_dtoa_r+0x61c>)
 8005b96:	f7fa fae7 	bl	8000168 <__aeabi_dsub>
 8005b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ba2:	f7fa ff29 	bl	80009f8 <__aeabi_dcmpgt>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f040 8281 	bne.w	80060ae <_dtoa_r+0x936>
 8005bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bb2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005bb6:	f7fa ff01 	bl	80009bc <__aeabi_dcmplt>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	f040 8275 	bne.w	80060aa <_dtoa_r+0x932>
 8005bc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005bc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f2c0 814b 	blt.w	8005e66 <_dtoa_r+0x6ee>
 8005bd0:	f1ba 0f0e 	cmp.w	sl, #14
 8005bd4:	f300 8147 	bgt.w	8005e66 <_dtoa_r+0x6ee>
 8005bd8:	4b69      	ldr	r3, [pc, #420]	; (8005d80 <_dtoa_r+0x608>)
 8005bda:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005be6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f280 80d7 	bge.w	8005d9c <_dtoa_r+0x624>
 8005bee:	f1b8 0f00 	cmp.w	r8, #0
 8005bf2:	f300 80d3 	bgt.w	8005d9c <_dtoa_r+0x624>
 8005bf6:	f040 8257 	bne.w	80060a8 <_dtoa_r+0x930>
 8005bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	4b64      	ldr	r3, [pc, #400]	; (8005d94 <_dtoa_r+0x61c>)
 8005c02:	f7fa fc69 	bl	80004d8 <__aeabi_dmul>
 8005c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c0a:	f7fa feeb 	bl	80009e4 <__aeabi_dcmpge>
 8005c0e:	4646      	mov	r6, r8
 8005c10:	4647      	mov	r7, r8
 8005c12:	2800      	cmp	r0, #0
 8005c14:	f040 822d 	bne.w	8006072 <_dtoa_r+0x8fa>
 8005c18:	9b06      	ldr	r3, [sp, #24]
 8005c1a:	9a06      	ldr	r2, [sp, #24]
 8005c1c:	1c5d      	adds	r5, r3, #1
 8005c1e:	2331      	movs	r3, #49	; 0x31
 8005c20:	f10a 0a01 	add.w	sl, sl, #1
 8005c24:	7013      	strb	r3, [r2, #0]
 8005c26:	e228      	b.n	800607a <_dtoa_r+0x902>
 8005c28:	07f2      	lsls	r2, r6, #31
 8005c2a:	d505      	bpl.n	8005c38 <_dtoa_r+0x4c0>
 8005c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c30:	f7fa fc52 	bl	80004d8 <__aeabi_dmul>
 8005c34:	2301      	movs	r3, #1
 8005c36:	3501      	adds	r5, #1
 8005c38:	1076      	asrs	r6, r6, #1
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	e76e      	b.n	8005b1c <_dtoa_r+0x3a4>
 8005c3e:	2502      	movs	r5, #2
 8005c40:	e771      	b.n	8005b26 <_dtoa_r+0x3ae>
 8005c42:	4657      	mov	r7, sl
 8005c44:	4646      	mov	r6, r8
 8005c46:	e790      	b.n	8005b6a <_dtoa_r+0x3f2>
 8005c48:	4b4d      	ldr	r3, [pc, #308]	; (8005d80 <_dtoa_r+0x608>)
 8005c4a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c4e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d048      	beq.n	8005cea <_dtoa_r+0x572>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	494e      	ldr	r1, [pc, #312]	; (8005d98 <_dtoa_r+0x620>)
 8005c60:	f7fa fd64 	bl	800072c <__aeabi_ddiv>
 8005c64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c68:	f7fa fa7e 	bl	8000168 <__aeabi_dsub>
 8005c6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c70:	9d06      	ldr	r5, [sp, #24]
 8005c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c76:	f7fa fedf 	bl	8000a38 <__aeabi_d2iz>
 8005c7a:	9011      	str	r0, [sp, #68]	; 0x44
 8005c7c:	f7fa fbc2 	bl	8000404 <__aeabi_i2d>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c88:	f7fa fa6e 	bl	8000168 <__aeabi_dsub>
 8005c8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c92:	3330      	adds	r3, #48	; 0x30
 8005c94:	f805 3b01 	strb.w	r3, [r5], #1
 8005c98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c9c:	f7fa fe8e 	bl	80009bc <__aeabi_dcmplt>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d163      	bne.n	8005d6c <_dtoa_r+0x5f4>
 8005ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ca8:	2000      	movs	r0, #0
 8005caa:	4937      	ldr	r1, [pc, #220]	; (8005d88 <_dtoa_r+0x610>)
 8005cac:	f7fa fa5c 	bl	8000168 <__aeabi_dsub>
 8005cb0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cb4:	f7fa fe82 	bl	80009bc <__aeabi_dcmplt>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f040 80b5 	bne.w	8005e28 <_dtoa_r+0x6b0>
 8005cbe:	9b06      	ldr	r3, [sp, #24]
 8005cc0:	1aeb      	subs	r3, r5, r3
 8005cc2:	429e      	cmp	r6, r3
 8005cc4:	f77f af7c 	ble.w	8005bc0 <_dtoa_r+0x448>
 8005cc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ccc:	2200      	movs	r2, #0
 8005cce:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <_dtoa_r+0x614>)
 8005cd0:	f7fa fc02 	bl	80004d8 <__aeabi_dmul>
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cde:	4b2b      	ldr	r3, [pc, #172]	; (8005d8c <_dtoa_r+0x614>)
 8005ce0:	f7fa fbfa 	bl	80004d8 <__aeabi_dmul>
 8005ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce8:	e7c3      	b.n	8005c72 <_dtoa_r+0x4fa>
 8005cea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005cee:	f7fa fbf3 	bl	80004d8 <__aeabi_dmul>
 8005cf2:	9b06      	ldr	r3, [sp, #24]
 8005cf4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cf8:	199d      	adds	r5, r3, r6
 8005cfa:	461e      	mov	r6, r3
 8005cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d00:	f7fa fe9a 	bl	8000a38 <__aeabi_d2iz>
 8005d04:	9011      	str	r0, [sp, #68]	; 0x44
 8005d06:	f7fa fb7d 	bl	8000404 <__aeabi_i2d>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d12:	f7fa fa29 	bl	8000168 <__aeabi_dsub>
 8005d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1c:	3330      	adds	r3, #48	; 0x30
 8005d1e:	f806 3b01 	strb.w	r3, [r6], #1
 8005d22:	42ae      	cmp	r6, r5
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	d124      	bne.n	8005d74 <_dtoa_r+0x5fc>
 8005d2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d2e:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <_dtoa_r+0x620>)
 8005d30:	f7fa fa1c 	bl	800016c <__adddf3>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d3c:	f7fa fe5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d171      	bne.n	8005e28 <_dtoa_r+0x6b0>
 8005d44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d48:	2000      	movs	r0, #0
 8005d4a:	4913      	ldr	r1, [pc, #76]	; (8005d98 <_dtoa_r+0x620>)
 8005d4c:	f7fa fa0c 	bl	8000168 <__aeabi_dsub>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d58:	f7fa fe30 	bl	80009bc <__aeabi_dcmplt>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	f43f af2f 	beq.w	8005bc0 <_dtoa_r+0x448>
 8005d62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d66:	1e6a      	subs	r2, r5, #1
 8005d68:	2b30      	cmp	r3, #48	; 0x30
 8005d6a:	d001      	beq.n	8005d70 <_dtoa_r+0x5f8>
 8005d6c:	46ba      	mov	sl, r7
 8005d6e:	e04a      	b.n	8005e06 <_dtoa_r+0x68e>
 8005d70:	4615      	mov	r5, r2
 8005d72:	e7f6      	b.n	8005d62 <_dtoa_r+0x5ea>
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <_dtoa_r+0x614>)
 8005d76:	f7fa fbaf 	bl	80004d8 <__aeabi_dmul>
 8005d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d7e:	e7bd      	b.n	8005cfc <_dtoa_r+0x584>
 8005d80:	08006f10 	.word	0x08006f10
 8005d84:	08006ee8 	.word	0x08006ee8
 8005d88:	3ff00000 	.word	0x3ff00000
 8005d8c:	40240000 	.word	0x40240000
 8005d90:	401c0000 	.word	0x401c0000
 8005d94:	40140000 	.word	0x40140000
 8005d98:	3fe00000 	.word	0x3fe00000
 8005d9c:	9d06      	ldr	r5, [sp, #24]
 8005d9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005da6:	4630      	mov	r0, r6
 8005da8:	4639      	mov	r1, r7
 8005daa:	f7fa fcbf 	bl	800072c <__aeabi_ddiv>
 8005dae:	f7fa fe43 	bl	8000a38 <__aeabi_d2iz>
 8005db2:	4681      	mov	r9, r0
 8005db4:	f7fa fb26 	bl	8000404 <__aeabi_i2d>
 8005db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dbc:	f7fa fb8c 	bl	80004d8 <__aeabi_dmul>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	f7fa f9ce 	bl	8000168 <__aeabi_dsub>
 8005dcc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005dd0:	f805 6b01 	strb.w	r6, [r5], #1
 8005dd4:	9e06      	ldr	r6, [sp, #24]
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	1bae      	subs	r6, r5, r6
 8005dda:	45b0      	cmp	r8, r6
 8005ddc:	460b      	mov	r3, r1
 8005dde:	d135      	bne.n	8005e4c <_dtoa_r+0x6d4>
 8005de0:	f7fa f9c4 	bl	800016c <__adddf3>
 8005de4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005de8:	4606      	mov	r6, r0
 8005dea:	460f      	mov	r7, r1
 8005dec:	f7fa fe04 	bl	80009f8 <__aeabi_dcmpgt>
 8005df0:	b9c8      	cbnz	r0, 8005e26 <_dtoa_r+0x6ae>
 8005df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df6:	4630      	mov	r0, r6
 8005df8:	4639      	mov	r1, r7
 8005dfa:	f7fa fdd5 	bl	80009a8 <__aeabi_dcmpeq>
 8005dfe:	b110      	cbz	r0, 8005e06 <_dtoa_r+0x68e>
 8005e00:	f019 0f01 	tst.w	r9, #1
 8005e04:	d10f      	bne.n	8005e26 <_dtoa_r+0x6ae>
 8005e06:	4659      	mov	r1, fp
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fac1 	bl	8006390 <_Bfree>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e12:	702b      	strb	r3, [r5, #0]
 8005e14:	f10a 0301 	add.w	r3, sl, #1
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f43f acf3 	beq.w	8005808 <_dtoa_r+0x90>
 8005e22:	601d      	str	r5, [r3, #0]
 8005e24:	e4f0      	b.n	8005808 <_dtoa_r+0x90>
 8005e26:	4657      	mov	r7, sl
 8005e28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e2c:	1e6b      	subs	r3, r5, #1
 8005e2e:	2a39      	cmp	r2, #57	; 0x39
 8005e30:	d106      	bne.n	8005e40 <_dtoa_r+0x6c8>
 8005e32:	9a06      	ldr	r2, [sp, #24]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d107      	bne.n	8005e48 <_dtoa_r+0x6d0>
 8005e38:	2330      	movs	r3, #48	; 0x30
 8005e3a:	7013      	strb	r3, [r2, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	3701      	adds	r7, #1
 8005e40:	781a      	ldrb	r2, [r3, #0]
 8005e42:	3201      	adds	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	e791      	b.n	8005d6c <_dtoa_r+0x5f4>
 8005e48:	461d      	mov	r5, r3
 8005e4a:	e7ed      	b.n	8005e28 <_dtoa_r+0x6b0>
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4b99      	ldr	r3, [pc, #612]	; (80060b4 <_dtoa_r+0x93c>)
 8005e50:	f7fa fb42 	bl	80004d8 <__aeabi_dmul>
 8005e54:	2200      	movs	r2, #0
 8005e56:	2300      	movs	r3, #0
 8005e58:	4606      	mov	r6, r0
 8005e5a:	460f      	mov	r7, r1
 8005e5c:	f7fa fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d09e      	beq.n	8005da2 <_dtoa_r+0x62a>
 8005e64:	e7cf      	b.n	8005e06 <_dtoa_r+0x68e>
 8005e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	f000 8088 	beq.w	8005f7e <_dtoa_r+0x806>
 8005e6e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e70:	2a01      	cmp	r2, #1
 8005e72:	dc6d      	bgt.n	8005f50 <_dtoa_r+0x7d8>
 8005e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	d066      	beq.n	8005f48 <_dtoa_r+0x7d0>
 8005e7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e7e:	464d      	mov	r5, r9
 8005e80:	9e08      	ldr	r6, [sp, #32]
 8005e82:	9a07      	ldr	r2, [sp, #28]
 8005e84:	2101      	movs	r1, #1
 8005e86:	441a      	add	r2, r3
 8005e88:	4620      	mov	r0, r4
 8005e8a:	4499      	add	r9, r3
 8005e8c:	9207      	str	r2, [sp, #28]
 8005e8e:	f000 fb1f 	bl	80064d0 <__i2b>
 8005e92:	4607      	mov	r7, r0
 8005e94:	2d00      	cmp	r5, #0
 8005e96:	dd0b      	ble.n	8005eb0 <_dtoa_r+0x738>
 8005e98:	9b07      	ldr	r3, [sp, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dd08      	ble.n	8005eb0 <_dtoa_r+0x738>
 8005e9e:	42ab      	cmp	r3, r5
 8005ea0:	bfa8      	it	ge
 8005ea2:	462b      	movge	r3, r5
 8005ea4:	9a07      	ldr	r2, [sp, #28]
 8005ea6:	eba9 0903 	sub.w	r9, r9, r3
 8005eaa:	1aed      	subs	r5, r5, r3
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	9307      	str	r3, [sp, #28]
 8005eb0:	9b08      	ldr	r3, [sp, #32]
 8005eb2:	b1eb      	cbz	r3, 8005ef0 <_dtoa_r+0x778>
 8005eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d065      	beq.n	8005f86 <_dtoa_r+0x80e>
 8005eba:	b18e      	cbz	r6, 8005ee0 <_dtoa_r+0x768>
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	4632      	mov	r2, r6
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 fba3 	bl	800660c <__pow5mult>
 8005ec6:	465a      	mov	r2, fp
 8005ec8:	4601      	mov	r1, r0
 8005eca:	4607      	mov	r7, r0
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 fb08 	bl	80064e2 <__multiply>
 8005ed2:	4659      	mov	r1, fp
 8005ed4:	900a      	str	r0, [sp, #40]	; 0x28
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f000 fa5a 	bl	8006390 <_Bfree>
 8005edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ede:	469b      	mov	fp, r3
 8005ee0:	9b08      	ldr	r3, [sp, #32]
 8005ee2:	1b9a      	subs	r2, r3, r6
 8005ee4:	d004      	beq.n	8005ef0 <_dtoa_r+0x778>
 8005ee6:	4659      	mov	r1, fp
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f000 fb8f 	bl	800660c <__pow5mult>
 8005eee:	4683      	mov	fp, r0
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 faec 	bl	80064d0 <__i2b>
 8005ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005efa:	4606      	mov	r6, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 81c6 	beq.w	800628e <_dtoa_r+0xb16>
 8005f02:	461a      	mov	r2, r3
 8005f04:	4601      	mov	r1, r0
 8005f06:	4620      	mov	r0, r4
 8005f08:	f000 fb80 	bl	800660c <__pow5mult>
 8005f0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f0e:	4606      	mov	r6, r0
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	dc3e      	bgt.n	8005f92 <_dtoa_r+0x81a>
 8005f14:	9b02      	ldr	r3, [sp, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d137      	bne.n	8005f8a <_dtoa_r+0x812>
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d134      	bne.n	8005f8e <_dtoa_r+0x816>
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f2a:	0d1b      	lsrs	r3, r3, #20
 8005f2c:	051b      	lsls	r3, r3, #20
 8005f2e:	b12b      	cbz	r3, 8005f3c <_dtoa_r+0x7c4>
 8005f30:	9b07      	ldr	r3, [sp, #28]
 8005f32:	f109 0901 	add.w	r9, r9, #1
 8005f36:	3301      	adds	r3, #1
 8005f38:	9307      	str	r3, [sp, #28]
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	9308      	str	r3, [sp, #32]
 8005f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d128      	bne.n	8005f96 <_dtoa_r+0x81e>
 8005f44:	2001      	movs	r0, #1
 8005f46:	e02e      	b.n	8005fa6 <_dtoa_r+0x82e>
 8005f48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f4e:	e796      	b.n	8005e7e <_dtoa_r+0x706>
 8005f50:	9b08      	ldr	r3, [sp, #32]
 8005f52:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005f56:	42b3      	cmp	r3, r6
 8005f58:	bfb7      	itett	lt
 8005f5a:	9b08      	ldrlt	r3, [sp, #32]
 8005f5c:	1b9e      	subge	r6, r3, r6
 8005f5e:	1af2      	sublt	r2, r6, r3
 8005f60:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005f62:	bfbf      	itttt	lt
 8005f64:	9608      	strlt	r6, [sp, #32]
 8005f66:	189b      	addlt	r3, r3, r2
 8005f68:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005f6a:	2600      	movlt	r6, #0
 8005f6c:	f1b8 0f00 	cmp.w	r8, #0
 8005f70:	bfb9      	ittee	lt
 8005f72:	eba9 0508 	sublt.w	r5, r9, r8
 8005f76:	2300      	movlt	r3, #0
 8005f78:	464d      	movge	r5, r9
 8005f7a:	4643      	movge	r3, r8
 8005f7c:	e781      	b.n	8005e82 <_dtoa_r+0x70a>
 8005f7e:	9e08      	ldr	r6, [sp, #32]
 8005f80:	464d      	mov	r5, r9
 8005f82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f84:	e786      	b.n	8005e94 <_dtoa_r+0x71c>
 8005f86:	9a08      	ldr	r2, [sp, #32]
 8005f88:	e7ad      	b.n	8005ee6 <_dtoa_r+0x76e>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e7d6      	b.n	8005f3c <_dtoa_r+0x7c4>
 8005f8e:	9b02      	ldr	r3, [sp, #8]
 8005f90:	e7d4      	b.n	8005f3c <_dtoa_r+0x7c4>
 8005f92:	2300      	movs	r3, #0
 8005f94:	9308      	str	r3, [sp, #32]
 8005f96:	6933      	ldr	r3, [r6, #16]
 8005f98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f9c:	6918      	ldr	r0, [r3, #16]
 8005f9e:	f000 fa49 	bl	8006434 <__hi0bits>
 8005fa2:	f1c0 0020 	rsb	r0, r0, #32
 8005fa6:	9b07      	ldr	r3, [sp, #28]
 8005fa8:	4418      	add	r0, r3
 8005faa:	f010 001f 	ands.w	r0, r0, #31
 8005fae:	d047      	beq.n	8006040 <_dtoa_r+0x8c8>
 8005fb0:	f1c0 0320 	rsb	r3, r0, #32
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	dd3b      	ble.n	8006030 <_dtoa_r+0x8b8>
 8005fb8:	9b07      	ldr	r3, [sp, #28]
 8005fba:	f1c0 001c 	rsb	r0, r0, #28
 8005fbe:	4481      	add	r9, r0
 8005fc0:	4405      	add	r5, r0
 8005fc2:	4403      	add	r3, r0
 8005fc4:	9307      	str	r3, [sp, #28]
 8005fc6:	f1b9 0f00 	cmp.w	r9, #0
 8005fca:	dd05      	ble.n	8005fd8 <_dtoa_r+0x860>
 8005fcc:	4659      	mov	r1, fp
 8005fce:	464a      	mov	r2, r9
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fb69 	bl	80066a8 <__lshift>
 8005fd6:	4683      	mov	fp, r0
 8005fd8:	9b07      	ldr	r3, [sp, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	dd05      	ble.n	8005fea <_dtoa_r+0x872>
 8005fde:	4631      	mov	r1, r6
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f000 fb60 	bl	80066a8 <__lshift>
 8005fe8:	4606      	mov	r6, r0
 8005fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fec:	b353      	cbz	r3, 8006044 <_dtoa_r+0x8cc>
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4658      	mov	r0, fp
 8005ff2:	f000 fbad 	bl	8006750 <__mcmp>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	da24      	bge.n	8006044 <_dtoa_r+0x8cc>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4659      	mov	r1, fp
 8005ffe:	220a      	movs	r2, #10
 8006000:	4620      	mov	r0, r4
 8006002:	f000 f9dc 	bl	80063be <__multadd>
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800600c:	4683      	mov	fp, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8144 	beq.w	800629c <_dtoa_r+0xb24>
 8006014:	2300      	movs	r3, #0
 8006016:	4639      	mov	r1, r7
 8006018:	220a      	movs	r2, #10
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f9cf 	bl	80063be <__multadd>
 8006020:	9b04      	ldr	r3, [sp, #16]
 8006022:	4607      	mov	r7, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	dc4d      	bgt.n	80060c4 <_dtoa_r+0x94c>
 8006028:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800602a:	2b02      	cmp	r3, #2
 800602c:	dd4a      	ble.n	80060c4 <_dtoa_r+0x94c>
 800602e:	e011      	b.n	8006054 <_dtoa_r+0x8dc>
 8006030:	d0c9      	beq.n	8005fc6 <_dtoa_r+0x84e>
 8006032:	9a07      	ldr	r2, [sp, #28]
 8006034:	331c      	adds	r3, #28
 8006036:	441a      	add	r2, r3
 8006038:	4499      	add	r9, r3
 800603a:	441d      	add	r5, r3
 800603c:	4613      	mov	r3, r2
 800603e:	e7c1      	b.n	8005fc4 <_dtoa_r+0x84c>
 8006040:	4603      	mov	r3, r0
 8006042:	e7f6      	b.n	8006032 <_dtoa_r+0x8ba>
 8006044:	f1b8 0f00 	cmp.w	r8, #0
 8006048:	dc36      	bgt.n	80060b8 <_dtoa_r+0x940>
 800604a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800604c:	2b02      	cmp	r3, #2
 800604e:	dd33      	ble.n	80060b8 <_dtoa_r+0x940>
 8006050:	f8cd 8010 	str.w	r8, [sp, #16]
 8006054:	9b04      	ldr	r3, [sp, #16]
 8006056:	b963      	cbnz	r3, 8006072 <_dtoa_r+0x8fa>
 8006058:	4631      	mov	r1, r6
 800605a:	2205      	movs	r2, #5
 800605c:	4620      	mov	r0, r4
 800605e:	f000 f9ae 	bl	80063be <__multadd>
 8006062:	4601      	mov	r1, r0
 8006064:	4606      	mov	r6, r0
 8006066:	4658      	mov	r0, fp
 8006068:	f000 fb72 	bl	8006750 <__mcmp>
 800606c:	2800      	cmp	r0, #0
 800606e:	f73f add3 	bgt.w	8005c18 <_dtoa_r+0x4a0>
 8006072:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006074:	9d06      	ldr	r5, [sp, #24]
 8006076:	ea6f 0a03 	mvn.w	sl, r3
 800607a:	f04f 0900 	mov.w	r9, #0
 800607e:	4631      	mov	r1, r6
 8006080:	4620      	mov	r0, r4
 8006082:	f000 f985 	bl	8006390 <_Bfree>
 8006086:	2f00      	cmp	r7, #0
 8006088:	f43f aebd 	beq.w	8005e06 <_dtoa_r+0x68e>
 800608c:	f1b9 0f00 	cmp.w	r9, #0
 8006090:	d005      	beq.n	800609e <_dtoa_r+0x926>
 8006092:	45b9      	cmp	r9, r7
 8006094:	d003      	beq.n	800609e <_dtoa_r+0x926>
 8006096:	4649      	mov	r1, r9
 8006098:	4620      	mov	r0, r4
 800609a:	f000 f979 	bl	8006390 <_Bfree>
 800609e:	4639      	mov	r1, r7
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 f975 	bl	8006390 <_Bfree>
 80060a6:	e6ae      	b.n	8005e06 <_dtoa_r+0x68e>
 80060a8:	2600      	movs	r6, #0
 80060aa:	4637      	mov	r7, r6
 80060ac:	e7e1      	b.n	8006072 <_dtoa_r+0x8fa>
 80060ae:	46ba      	mov	sl, r7
 80060b0:	4637      	mov	r7, r6
 80060b2:	e5b1      	b.n	8005c18 <_dtoa_r+0x4a0>
 80060b4:	40240000 	.word	0x40240000
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 80f3 	beq.w	80062aa <_dtoa_r+0xb32>
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	dd05      	ble.n	80060d4 <_dtoa_r+0x95c>
 80060c8:	4639      	mov	r1, r7
 80060ca:	462a      	mov	r2, r5
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 faeb 	bl	80066a8 <__lshift>
 80060d2:	4607      	mov	r7, r0
 80060d4:	9b08      	ldr	r3, [sp, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04c      	beq.n	8006174 <_dtoa_r+0x9fc>
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 f923 	bl	8006328 <_Balloc>
 80060e2:	4605      	mov	r5, r0
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	f107 010c 	add.w	r1, r7, #12
 80060ea:	3202      	adds	r2, #2
 80060ec:	0092      	lsls	r2, r2, #2
 80060ee:	300c      	adds	r0, #12
 80060f0:	f7fe fdee 	bl	8004cd0 <memcpy>
 80060f4:	2201      	movs	r2, #1
 80060f6:	4629      	mov	r1, r5
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 fad5 	bl	80066a8 <__lshift>
 80060fe:	46b9      	mov	r9, r7
 8006100:	4607      	mov	r7, r0
 8006102:	9b06      	ldr	r3, [sp, #24]
 8006104:	9307      	str	r3, [sp, #28]
 8006106:	9b02      	ldr	r3, [sp, #8]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	9308      	str	r3, [sp, #32]
 800610e:	4631      	mov	r1, r6
 8006110:	4658      	mov	r0, fp
 8006112:	f7ff faa3 	bl	800565c <quorem>
 8006116:	4649      	mov	r1, r9
 8006118:	4605      	mov	r5, r0
 800611a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800611e:	4658      	mov	r0, fp
 8006120:	f000 fb16 	bl	8006750 <__mcmp>
 8006124:	463a      	mov	r2, r7
 8006126:	9002      	str	r0, [sp, #8]
 8006128:	4631      	mov	r1, r6
 800612a:	4620      	mov	r0, r4
 800612c:	f000 fb2a 	bl	8006784 <__mdiff>
 8006130:	68c3      	ldr	r3, [r0, #12]
 8006132:	4602      	mov	r2, r0
 8006134:	bb03      	cbnz	r3, 8006178 <_dtoa_r+0xa00>
 8006136:	4601      	mov	r1, r0
 8006138:	9009      	str	r0, [sp, #36]	; 0x24
 800613a:	4658      	mov	r0, fp
 800613c:	f000 fb08 	bl	8006750 <__mcmp>
 8006140:	4603      	mov	r3, r0
 8006142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006144:	4611      	mov	r1, r2
 8006146:	4620      	mov	r0, r4
 8006148:	9309      	str	r3, [sp, #36]	; 0x24
 800614a:	f000 f921 	bl	8006390 <_Bfree>
 800614e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006150:	b9a3      	cbnz	r3, 800617c <_dtoa_r+0xa04>
 8006152:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006154:	b992      	cbnz	r2, 800617c <_dtoa_r+0xa04>
 8006156:	9a08      	ldr	r2, [sp, #32]
 8006158:	b982      	cbnz	r2, 800617c <_dtoa_r+0xa04>
 800615a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800615e:	d029      	beq.n	80061b4 <_dtoa_r+0xa3c>
 8006160:	9b02      	ldr	r3, [sp, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	dd01      	ble.n	800616a <_dtoa_r+0x9f2>
 8006166:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800616a:	9b07      	ldr	r3, [sp, #28]
 800616c:	1c5d      	adds	r5, r3, #1
 800616e:	f883 8000 	strb.w	r8, [r3]
 8006172:	e784      	b.n	800607e <_dtoa_r+0x906>
 8006174:	4638      	mov	r0, r7
 8006176:	e7c2      	b.n	80060fe <_dtoa_r+0x986>
 8006178:	2301      	movs	r3, #1
 800617a:	e7e3      	b.n	8006144 <_dtoa_r+0x9cc>
 800617c:	9a02      	ldr	r2, [sp, #8]
 800617e:	2a00      	cmp	r2, #0
 8006180:	db04      	blt.n	800618c <_dtoa_r+0xa14>
 8006182:	d123      	bne.n	80061cc <_dtoa_r+0xa54>
 8006184:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006186:	bb0a      	cbnz	r2, 80061cc <_dtoa_r+0xa54>
 8006188:	9a08      	ldr	r2, [sp, #32]
 800618a:	b9fa      	cbnz	r2, 80061cc <_dtoa_r+0xa54>
 800618c:	2b00      	cmp	r3, #0
 800618e:	ddec      	ble.n	800616a <_dtoa_r+0x9f2>
 8006190:	4659      	mov	r1, fp
 8006192:	2201      	movs	r2, #1
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fa87 	bl	80066a8 <__lshift>
 800619a:	4631      	mov	r1, r6
 800619c:	4683      	mov	fp, r0
 800619e:	f000 fad7 	bl	8006750 <__mcmp>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	dc03      	bgt.n	80061ae <_dtoa_r+0xa36>
 80061a6:	d1e0      	bne.n	800616a <_dtoa_r+0x9f2>
 80061a8:	f018 0f01 	tst.w	r8, #1
 80061ac:	d0dd      	beq.n	800616a <_dtoa_r+0x9f2>
 80061ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80061b2:	d1d8      	bne.n	8006166 <_dtoa_r+0x9ee>
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	9a07      	ldr	r2, [sp, #28]
 80061b8:	1c5d      	adds	r5, r3, #1
 80061ba:	2339      	movs	r3, #57	; 0x39
 80061bc:	7013      	strb	r3, [r2, #0]
 80061be:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061c2:	1e6a      	subs	r2, r5, #1
 80061c4:	2b39      	cmp	r3, #57	; 0x39
 80061c6:	d04d      	beq.n	8006264 <_dtoa_r+0xaec>
 80061c8:	3301      	adds	r3, #1
 80061ca:	e052      	b.n	8006272 <_dtoa_r+0xafa>
 80061cc:	9a07      	ldr	r2, [sp, #28]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f102 0501 	add.w	r5, r2, #1
 80061d4:	dd06      	ble.n	80061e4 <_dtoa_r+0xa6c>
 80061d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80061da:	d0eb      	beq.n	80061b4 <_dtoa_r+0xa3c>
 80061dc:	f108 0801 	add.w	r8, r8, #1
 80061e0:	9b07      	ldr	r3, [sp, #28]
 80061e2:	e7c4      	b.n	800616e <_dtoa_r+0x9f6>
 80061e4:	9b06      	ldr	r3, [sp, #24]
 80061e6:	9a04      	ldr	r2, [sp, #16]
 80061e8:	1aeb      	subs	r3, r5, r3
 80061ea:	4293      	cmp	r3, r2
 80061ec:	f805 8c01 	strb.w	r8, [r5, #-1]
 80061f0:	d021      	beq.n	8006236 <_dtoa_r+0xabe>
 80061f2:	4659      	mov	r1, fp
 80061f4:	2300      	movs	r3, #0
 80061f6:	220a      	movs	r2, #10
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 f8e0 	bl	80063be <__multadd>
 80061fe:	45b9      	cmp	r9, r7
 8006200:	4683      	mov	fp, r0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	f04f 020a 	mov.w	r2, #10
 800620a:	4649      	mov	r1, r9
 800620c:	4620      	mov	r0, r4
 800620e:	d105      	bne.n	800621c <_dtoa_r+0xaa4>
 8006210:	f000 f8d5 	bl	80063be <__multadd>
 8006214:	4681      	mov	r9, r0
 8006216:	4607      	mov	r7, r0
 8006218:	9507      	str	r5, [sp, #28]
 800621a:	e778      	b.n	800610e <_dtoa_r+0x996>
 800621c:	f000 f8cf 	bl	80063be <__multadd>
 8006220:	4639      	mov	r1, r7
 8006222:	4681      	mov	r9, r0
 8006224:	2300      	movs	r3, #0
 8006226:	220a      	movs	r2, #10
 8006228:	4620      	mov	r0, r4
 800622a:	f000 f8c8 	bl	80063be <__multadd>
 800622e:	4607      	mov	r7, r0
 8006230:	e7f2      	b.n	8006218 <_dtoa_r+0xaa0>
 8006232:	f04f 0900 	mov.w	r9, #0
 8006236:	4659      	mov	r1, fp
 8006238:	2201      	movs	r2, #1
 800623a:	4620      	mov	r0, r4
 800623c:	f000 fa34 	bl	80066a8 <__lshift>
 8006240:	4631      	mov	r1, r6
 8006242:	4683      	mov	fp, r0
 8006244:	f000 fa84 	bl	8006750 <__mcmp>
 8006248:	2800      	cmp	r0, #0
 800624a:	dcb8      	bgt.n	80061be <_dtoa_r+0xa46>
 800624c:	d102      	bne.n	8006254 <_dtoa_r+0xadc>
 800624e:	f018 0f01 	tst.w	r8, #1
 8006252:	d1b4      	bne.n	80061be <_dtoa_r+0xa46>
 8006254:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006258:	1e6a      	subs	r2, r5, #1
 800625a:	2b30      	cmp	r3, #48	; 0x30
 800625c:	f47f af0f 	bne.w	800607e <_dtoa_r+0x906>
 8006260:	4615      	mov	r5, r2
 8006262:	e7f7      	b.n	8006254 <_dtoa_r+0xadc>
 8006264:	9b06      	ldr	r3, [sp, #24]
 8006266:	4293      	cmp	r3, r2
 8006268:	d105      	bne.n	8006276 <_dtoa_r+0xafe>
 800626a:	2331      	movs	r3, #49	; 0x31
 800626c:	9a06      	ldr	r2, [sp, #24]
 800626e:	f10a 0a01 	add.w	sl, sl, #1
 8006272:	7013      	strb	r3, [r2, #0]
 8006274:	e703      	b.n	800607e <_dtoa_r+0x906>
 8006276:	4615      	mov	r5, r2
 8006278:	e7a1      	b.n	80061be <_dtoa_r+0xa46>
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <_dtoa_r+0xb60>)
 800627c:	f7ff bae1 	b.w	8005842 <_dtoa_r+0xca>
 8006280:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006282:	2b00      	cmp	r3, #0
 8006284:	f47f aabb 	bne.w	80057fe <_dtoa_r+0x86>
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <_dtoa_r+0xb64>)
 800628a:	f7ff bada 	b.w	8005842 <_dtoa_r+0xca>
 800628e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006290:	2b01      	cmp	r3, #1
 8006292:	f77f ae3f 	ble.w	8005f14 <_dtoa_r+0x79c>
 8006296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006298:	9308      	str	r3, [sp, #32]
 800629a:	e653      	b.n	8005f44 <_dtoa_r+0x7cc>
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	dc03      	bgt.n	80062aa <_dtoa_r+0xb32>
 80062a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	f73f aed5 	bgt.w	8006054 <_dtoa_r+0x8dc>
 80062aa:	9d06      	ldr	r5, [sp, #24]
 80062ac:	4631      	mov	r1, r6
 80062ae:	4658      	mov	r0, fp
 80062b0:	f7ff f9d4 	bl	800565c <quorem>
 80062b4:	9b06      	ldr	r3, [sp, #24]
 80062b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80062ba:	f805 8b01 	strb.w	r8, [r5], #1
 80062be:	9a04      	ldr	r2, [sp, #16]
 80062c0:	1aeb      	subs	r3, r5, r3
 80062c2:	429a      	cmp	r2, r3
 80062c4:	ddb5      	ble.n	8006232 <_dtoa_r+0xaba>
 80062c6:	4659      	mov	r1, fp
 80062c8:	2300      	movs	r3, #0
 80062ca:	220a      	movs	r2, #10
 80062cc:	4620      	mov	r0, r4
 80062ce:	f000 f876 	bl	80063be <__multadd>
 80062d2:	4683      	mov	fp, r0
 80062d4:	e7ea      	b.n	80062ac <_dtoa_r+0xb34>
 80062d6:	bf00      	nop
 80062d8:	08006eb3 	.word	0x08006eb3
 80062dc:	08006ed7 	.word	0x08006ed7

080062e0 <_localeconv_r>:
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <_localeconv_r+0x14>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6a18      	ldr	r0, [r3, #32]
 80062e6:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <_localeconv_r+0x18>)
 80062e8:	2800      	cmp	r0, #0
 80062ea:	bf08      	it	eq
 80062ec:	4618      	moveq	r0, r3
 80062ee:	30f0      	adds	r0, #240	; 0xf0
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000180 	.word	0x20000180
 80062f8:	200001e4 	.word	0x200001e4

080062fc <malloc>:
 80062fc:	4b02      	ldr	r3, [pc, #8]	; (8006308 <malloc+0xc>)
 80062fe:	4601      	mov	r1, r0
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	f000 bb47 	b.w	8006994 <_malloc_r>
 8006306:	bf00      	nop
 8006308:	20000180 	.word	0x20000180

0800630c <memchr>:
 800630c:	b510      	push	{r4, lr}
 800630e:	b2c9      	uxtb	r1, r1
 8006310:	4402      	add	r2, r0
 8006312:	4290      	cmp	r0, r2
 8006314:	4603      	mov	r3, r0
 8006316:	d101      	bne.n	800631c <memchr+0x10>
 8006318:	2300      	movs	r3, #0
 800631a:	e003      	b.n	8006324 <memchr+0x18>
 800631c:	781c      	ldrb	r4, [r3, #0]
 800631e:	3001      	adds	r0, #1
 8006320:	428c      	cmp	r4, r1
 8006322:	d1f6      	bne.n	8006312 <memchr+0x6>
 8006324:	4618      	mov	r0, r3
 8006326:	bd10      	pop	{r4, pc}

08006328 <_Balloc>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800632c:	4604      	mov	r4, r0
 800632e:	460e      	mov	r6, r1
 8006330:	b93d      	cbnz	r5, 8006342 <_Balloc+0x1a>
 8006332:	2010      	movs	r0, #16
 8006334:	f7ff ffe2 	bl	80062fc <malloc>
 8006338:	6260      	str	r0, [r4, #36]	; 0x24
 800633a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800633e:	6005      	str	r5, [r0, #0]
 8006340:	60c5      	str	r5, [r0, #12]
 8006342:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006344:	68eb      	ldr	r3, [r5, #12]
 8006346:	b183      	cbz	r3, 800636a <_Balloc+0x42>
 8006348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006350:	b9b8      	cbnz	r0, 8006382 <_Balloc+0x5a>
 8006352:	2101      	movs	r1, #1
 8006354:	fa01 f506 	lsl.w	r5, r1, r6
 8006358:	1d6a      	adds	r2, r5, #5
 800635a:	0092      	lsls	r2, r2, #2
 800635c:	4620      	mov	r0, r4
 800635e:	f000 fabe 	bl	80068de <_calloc_r>
 8006362:	b160      	cbz	r0, 800637e <_Balloc+0x56>
 8006364:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006368:	e00e      	b.n	8006388 <_Balloc+0x60>
 800636a:	2221      	movs	r2, #33	; 0x21
 800636c:	2104      	movs	r1, #4
 800636e:	4620      	mov	r0, r4
 8006370:	f000 fab5 	bl	80068de <_calloc_r>
 8006374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006376:	60e8      	str	r0, [r5, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e4      	bne.n	8006348 <_Balloc+0x20>
 800637e:	2000      	movs	r0, #0
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	6802      	ldr	r2, [r0, #0]
 8006384:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006388:	2300      	movs	r3, #0
 800638a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800638e:	e7f7      	b.n	8006380 <_Balloc+0x58>

08006390 <_Bfree>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006394:	4606      	mov	r6, r0
 8006396:	460d      	mov	r5, r1
 8006398:	b93c      	cbnz	r4, 80063aa <_Bfree+0x1a>
 800639a:	2010      	movs	r0, #16
 800639c:	f7ff ffae 	bl	80062fc <malloc>
 80063a0:	6270      	str	r0, [r6, #36]	; 0x24
 80063a2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063a6:	6004      	str	r4, [r0, #0]
 80063a8:	60c4      	str	r4, [r0, #12]
 80063aa:	b13d      	cbz	r5, 80063bc <_Bfree+0x2c>
 80063ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80063ae:	686a      	ldr	r2, [r5, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063b6:	6029      	str	r1, [r5, #0]
 80063b8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80063bc:	bd70      	pop	{r4, r5, r6, pc}

080063be <__multadd>:
 80063be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c2:	461f      	mov	r7, r3
 80063c4:	4606      	mov	r6, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	2300      	movs	r3, #0
 80063ca:	690d      	ldr	r5, [r1, #16]
 80063cc:	f101 0c14 	add.w	ip, r1, #20
 80063d0:	f8dc 0000 	ldr.w	r0, [ip]
 80063d4:	3301      	adds	r3, #1
 80063d6:	b281      	uxth	r1, r0
 80063d8:	fb02 7101 	mla	r1, r2, r1, r7
 80063dc:	0c00      	lsrs	r0, r0, #16
 80063de:	0c0f      	lsrs	r7, r1, #16
 80063e0:	fb02 7000 	mla	r0, r2, r0, r7
 80063e4:	b289      	uxth	r1, r1
 80063e6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063ea:	429d      	cmp	r5, r3
 80063ec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063f0:	f84c 1b04 	str.w	r1, [ip], #4
 80063f4:	dcec      	bgt.n	80063d0 <__multadd+0x12>
 80063f6:	b1d7      	cbz	r7, 800642e <__multadd+0x70>
 80063f8:	68a3      	ldr	r3, [r4, #8]
 80063fa:	42ab      	cmp	r3, r5
 80063fc:	dc12      	bgt.n	8006424 <__multadd+0x66>
 80063fe:	6861      	ldr	r1, [r4, #4]
 8006400:	4630      	mov	r0, r6
 8006402:	3101      	adds	r1, #1
 8006404:	f7ff ff90 	bl	8006328 <_Balloc>
 8006408:	4680      	mov	r8, r0
 800640a:	6922      	ldr	r2, [r4, #16]
 800640c:	f104 010c 	add.w	r1, r4, #12
 8006410:	3202      	adds	r2, #2
 8006412:	0092      	lsls	r2, r2, #2
 8006414:	300c      	adds	r0, #12
 8006416:	f7fe fc5b 	bl	8004cd0 <memcpy>
 800641a:	4621      	mov	r1, r4
 800641c:	4630      	mov	r0, r6
 800641e:	f7ff ffb7 	bl	8006390 <_Bfree>
 8006422:	4644      	mov	r4, r8
 8006424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006428:	3501      	adds	r5, #1
 800642a:	615f      	str	r7, [r3, #20]
 800642c:	6125      	str	r5, [r4, #16]
 800642e:	4620      	mov	r0, r4
 8006430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006434 <__hi0bits>:
 8006434:	0c02      	lsrs	r2, r0, #16
 8006436:	0412      	lsls	r2, r2, #16
 8006438:	4603      	mov	r3, r0
 800643a:	b9b2      	cbnz	r2, 800646a <__hi0bits+0x36>
 800643c:	0403      	lsls	r3, r0, #16
 800643e:	2010      	movs	r0, #16
 8006440:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006444:	bf04      	itt	eq
 8006446:	021b      	lsleq	r3, r3, #8
 8006448:	3008      	addeq	r0, #8
 800644a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800644e:	bf04      	itt	eq
 8006450:	011b      	lsleq	r3, r3, #4
 8006452:	3004      	addeq	r0, #4
 8006454:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006458:	bf04      	itt	eq
 800645a:	009b      	lsleq	r3, r3, #2
 800645c:	3002      	addeq	r0, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	db06      	blt.n	8006470 <__hi0bits+0x3c>
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	d503      	bpl.n	800646e <__hi0bits+0x3a>
 8006466:	3001      	adds	r0, #1
 8006468:	4770      	bx	lr
 800646a:	2000      	movs	r0, #0
 800646c:	e7e8      	b.n	8006440 <__hi0bits+0xc>
 800646e:	2020      	movs	r0, #32
 8006470:	4770      	bx	lr

08006472 <__lo0bits>:
 8006472:	6803      	ldr	r3, [r0, #0]
 8006474:	4601      	mov	r1, r0
 8006476:	f013 0207 	ands.w	r2, r3, #7
 800647a:	d00b      	beq.n	8006494 <__lo0bits+0x22>
 800647c:	07da      	lsls	r2, r3, #31
 800647e:	d423      	bmi.n	80064c8 <__lo0bits+0x56>
 8006480:	0798      	lsls	r0, r3, #30
 8006482:	bf49      	itett	mi
 8006484:	085b      	lsrmi	r3, r3, #1
 8006486:	089b      	lsrpl	r3, r3, #2
 8006488:	2001      	movmi	r0, #1
 800648a:	600b      	strmi	r3, [r1, #0]
 800648c:	bf5c      	itt	pl
 800648e:	600b      	strpl	r3, [r1, #0]
 8006490:	2002      	movpl	r0, #2
 8006492:	4770      	bx	lr
 8006494:	b298      	uxth	r0, r3
 8006496:	b9a8      	cbnz	r0, 80064c4 <__lo0bits+0x52>
 8006498:	2010      	movs	r0, #16
 800649a:	0c1b      	lsrs	r3, r3, #16
 800649c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80064a0:	bf04      	itt	eq
 80064a2:	0a1b      	lsreq	r3, r3, #8
 80064a4:	3008      	addeq	r0, #8
 80064a6:	071a      	lsls	r2, r3, #28
 80064a8:	bf04      	itt	eq
 80064aa:	091b      	lsreq	r3, r3, #4
 80064ac:	3004      	addeq	r0, #4
 80064ae:	079a      	lsls	r2, r3, #30
 80064b0:	bf04      	itt	eq
 80064b2:	089b      	lsreq	r3, r3, #2
 80064b4:	3002      	addeq	r0, #2
 80064b6:	07da      	lsls	r2, r3, #31
 80064b8:	d402      	bmi.n	80064c0 <__lo0bits+0x4e>
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	d006      	beq.n	80064cc <__lo0bits+0x5a>
 80064be:	3001      	adds	r0, #1
 80064c0:	600b      	str	r3, [r1, #0]
 80064c2:	4770      	bx	lr
 80064c4:	4610      	mov	r0, r2
 80064c6:	e7e9      	b.n	800649c <__lo0bits+0x2a>
 80064c8:	2000      	movs	r0, #0
 80064ca:	4770      	bx	lr
 80064cc:	2020      	movs	r0, #32
 80064ce:	4770      	bx	lr

080064d0 <__i2b>:
 80064d0:	b510      	push	{r4, lr}
 80064d2:	460c      	mov	r4, r1
 80064d4:	2101      	movs	r1, #1
 80064d6:	f7ff ff27 	bl	8006328 <_Balloc>
 80064da:	2201      	movs	r2, #1
 80064dc:	6144      	str	r4, [r0, #20]
 80064de:	6102      	str	r2, [r0, #16]
 80064e0:	bd10      	pop	{r4, pc}

080064e2 <__multiply>:
 80064e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e6:	4614      	mov	r4, r2
 80064e8:	690a      	ldr	r2, [r1, #16]
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	4688      	mov	r8, r1
 80064ee:	429a      	cmp	r2, r3
 80064f0:	bfbe      	ittt	lt
 80064f2:	460b      	movlt	r3, r1
 80064f4:	46a0      	movlt	r8, r4
 80064f6:	461c      	movlt	r4, r3
 80064f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006500:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006504:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006508:	eb07 0609 	add.w	r6, r7, r9
 800650c:	42b3      	cmp	r3, r6
 800650e:	bfb8      	it	lt
 8006510:	3101      	addlt	r1, #1
 8006512:	f7ff ff09 	bl	8006328 <_Balloc>
 8006516:	f100 0514 	add.w	r5, r0, #20
 800651a:	462b      	mov	r3, r5
 800651c:	2200      	movs	r2, #0
 800651e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006522:	4573      	cmp	r3, lr
 8006524:	d316      	bcc.n	8006554 <__multiply+0x72>
 8006526:	f104 0214 	add.w	r2, r4, #20
 800652a:	f108 0114 	add.w	r1, r8, #20
 800652e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006532:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	9b00      	ldr	r3, [sp, #0]
 800653a:	9201      	str	r2, [sp, #4]
 800653c:	4293      	cmp	r3, r2
 800653e:	d80c      	bhi.n	800655a <__multiply+0x78>
 8006540:	2e00      	cmp	r6, #0
 8006542:	dd03      	ble.n	800654c <__multiply+0x6a>
 8006544:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05d      	beq.n	8006608 <__multiply+0x126>
 800654c:	6106      	str	r6, [r0, #16]
 800654e:	b003      	add	sp, #12
 8006550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006554:	f843 2b04 	str.w	r2, [r3], #4
 8006558:	e7e3      	b.n	8006522 <__multiply+0x40>
 800655a:	f8b2 b000 	ldrh.w	fp, [r2]
 800655e:	f1bb 0f00 	cmp.w	fp, #0
 8006562:	d023      	beq.n	80065ac <__multiply+0xca>
 8006564:	4689      	mov	r9, r1
 8006566:	46ac      	mov	ip, r5
 8006568:	f04f 0800 	mov.w	r8, #0
 800656c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006570:	f8dc a000 	ldr.w	sl, [ip]
 8006574:	b2a3      	uxth	r3, r4
 8006576:	fa1f fa8a 	uxth.w	sl, sl
 800657a:	fb0b a303 	mla	r3, fp, r3, sl
 800657e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006582:	f8dc 4000 	ldr.w	r4, [ip]
 8006586:	4443      	add	r3, r8
 8006588:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800658c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006590:	46e2      	mov	sl, ip
 8006592:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006596:	b29b      	uxth	r3, r3
 8006598:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800659c:	454f      	cmp	r7, r9
 800659e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80065a2:	f84a 3b04 	str.w	r3, [sl], #4
 80065a6:	d82b      	bhi.n	8006600 <__multiply+0x11e>
 80065a8:	f8cc 8004 	str.w	r8, [ip, #4]
 80065ac:	9b01      	ldr	r3, [sp, #4]
 80065ae:	3204      	adds	r2, #4
 80065b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80065b4:	f1ba 0f00 	cmp.w	sl, #0
 80065b8:	d020      	beq.n	80065fc <__multiply+0x11a>
 80065ba:	4689      	mov	r9, r1
 80065bc:	46a8      	mov	r8, r5
 80065be:	f04f 0b00 	mov.w	fp, #0
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	f8b9 c000 	ldrh.w	ip, [r9]
 80065c8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	fb0a 440c 	mla	r4, sl, ip, r4
 80065d2:	46c4      	mov	ip, r8
 80065d4:	445c      	add	r4, fp
 80065d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065da:	f84c 3b04 	str.w	r3, [ip], #4
 80065de:	f859 3b04 	ldr.w	r3, [r9], #4
 80065e2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80065e6:	0c1b      	lsrs	r3, r3, #16
 80065e8:	fb0a b303 	mla	r3, sl, r3, fp
 80065ec:	454f      	cmp	r7, r9
 80065ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80065f2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80065f6:	d805      	bhi.n	8006604 <__multiply+0x122>
 80065f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80065fc:	3504      	adds	r5, #4
 80065fe:	e79b      	b.n	8006538 <__multiply+0x56>
 8006600:	46d4      	mov	ip, sl
 8006602:	e7b3      	b.n	800656c <__multiply+0x8a>
 8006604:	46e0      	mov	r8, ip
 8006606:	e7dd      	b.n	80065c4 <__multiply+0xe2>
 8006608:	3e01      	subs	r6, #1
 800660a:	e799      	b.n	8006540 <__multiply+0x5e>

0800660c <__pow5mult>:
 800660c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006610:	4615      	mov	r5, r2
 8006612:	f012 0203 	ands.w	r2, r2, #3
 8006616:	4606      	mov	r6, r0
 8006618:	460f      	mov	r7, r1
 800661a:	d007      	beq.n	800662c <__pow5mult+0x20>
 800661c:	4c21      	ldr	r4, [pc, #132]	; (80066a4 <__pow5mult+0x98>)
 800661e:	3a01      	subs	r2, #1
 8006620:	2300      	movs	r3, #0
 8006622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006626:	f7ff feca 	bl	80063be <__multadd>
 800662a:	4607      	mov	r7, r0
 800662c:	10ad      	asrs	r5, r5, #2
 800662e:	d035      	beq.n	800669c <__pow5mult+0x90>
 8006630:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006632:	b93c      	cbnz	r4, 8006644 <__pow5mult+0x38>
 8006634:	2010      	movs	r0, #16
 8006636:	f7ff fe61 	bl	80062fc <malloc>
 800663a:	6270      	str	r0, [r6, #36]	; 0x24
 800663c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006640:	6004      	str	r4, [r0, #0]
 8006642:	60c4      	str	r4, [r0, #12]
 8006644:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800664c:	b94c      	cbnz	r4, 8006662 <__pow5mult+0x56>
 800664e:	f240 2171 	movw	r1, #625	; 0x271
 8006652:	4630      	mov	r0, r6
 8006654:	f7ff ff3c 	bl	80064d0 <__i2b>
 8006658:	2300      	movs	r3, #0
 800665a:	4604      	mov	r4, r0
 800665c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006660:	6003      	str	r3, [r0, #0]
 8006662:	f04f 0800 	mov.w	r8, #0
 8006666:	07eb      	lsls	r3, r5, #31
 8006668:	d50a      	bpl.n	8006680 <__pow5mult+0x74>
 800666a:	4639      	mov	r1, r7
 800666c:	4622      	mov	r2, r4
 800666e:	4630      	mov	r0, r6
 8006670:	f7ff ff37 	bl	80064e2 <__multiply>
 8006674:	4681      	mov	r9, r0
 8006676:	4639      	mov	r1, r7
 8006678:	4630      	mov	r0, r6
 800667a:	f7ff fe89 	bl	8006390 <_Bfree>
 800667e:	464f      	mov	r7, r9
 8006680:	106d      	asrs	r5, r5, #1
 8006682:	d00b      	beq.n	800669c <__pow5mult+0x90>
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	b938      	cbnz	r0, 8006698 <__pow5mult+0x8c>
 8006688:	4622      	mov	r2, r4
 800668a:	4621      	mov	r1, r4
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff ff28 	bl	80064e2 <__multiply>
 8006692:	6020      	str	r0, [r4, #0]
 8006694:	f8c0 8000 	str.w	r8, [r0]
 8006698:	4604      	mov	r4, r0
 800669a:	e7e4      	b.n	8006666 <__pow5mult+0x5a>
 800669c:	4638      	mov	r0, r7
 800669e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a2:	bf00      	nop
 80066a4:	08006fd8 	.word	0x08006fd8

080066a8 <__lshift>:
 80066a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	460c      	mov	r4, r1
 80066ae:	4607      	mov	r7, r0
 80066b0:	4616      	mov	r6, r2
 80066b2:	6923      	ldr	r3, [r4, #16]
 80066b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066b8:	eb0a 0903 	add.w	r9, sl, r3
 80066bc:	6849      	ldr	r1, [r1, #4]
 80066be:	68a3      	ldr	r3, [r4, #8]
 80066c0:	f109 0501 	add.w	r5, r9, #1
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	db32      	blt.n	800672e <__lshift+0x86>
 80066c8:	4638      	mov	r0, r7
 80066ca:	f7ff fe2d 	bl	8006328 <_Balloc>
 80066ce:	2300      	movs	r3, #0
 80066d0:	4680      	mov	r8, r0
 80066d2:	461a      	mov	r2, r3
 80066d4:	f100 0114 	add.w	r1, r0, #20
 80066d8:	4553      	cmp	r3, sl
 80066da:	db2b      	blt.n	8006734 <__lshift+0x8c>
 80066dc:	6920      	ldr	r0, [r4, #16]
 80066de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066e2:	f104 0314 	add.w	r3, r4, #20
 80066e6:	f016 021f 	ands.w	r2, r6, #31
 80066ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066f2:	d025      	beq.n	8006740 <__lshift+0x98>
 80066f4:	2000      	movs	r0, #0
 80066f6:	f1c2 0e20 	rsb	lr, r2, #32
 80066fa:	468a      	mov	sl, r1
 80066fc:	681e      	ldr	r6, [r3, #0]
 80066fe:	4096      	lsls	r6, r2
 8006700:	4330      	orrs	r0, r6
 8006702:	f84a 0b04 	str.w	r0, [sl], #4
 8006706:	f853 0b04 	ldr.w	r0, [r3], #4
 800670a:	459c      	cmp	ip, r3
 800670c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006710:	d814      	bhi.n	800673c <__lshift+0x94>
 8006712:	6048      	str	r0, [r1, #4]
 8006714:	b108      	cbz	r0, 800671a <__lshift+0x72>
 8006716:	f109 0502 	add.w	r5, r9, #2
 800671a:	3d01      	subs	r5, #1
 800671c:	4638      	mov	r0, r7
 800671e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006722:	4621      	mov	r1, r4
 8006724:	f7ff fe34 	bl	8006390 <_Bfree>
 8006728:	4640      	mov	r0, r8
 800672a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672e:	3101      	adds	r1, #1
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	e7c7      	b.n	80066c4 <__lshift+0x1c>
 8006734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006738:	3301      	adds	r3, #1
 800673a:	e7cd      	b.n	80066d8 <__lshift+0x30>
 800673c:	4651      	mov	r1, sl
 800673e:	e7dc      	b.n	80066fa <__lshift+0x52>
 8006740:	3904      	subs	r1, #4
 8006742:	f853 2b04 	ldr.w	r2, [r3], #4
 8006746:	459c      	cmp	ip, r3
 8006748:	f841 2f04 	str.w	r2, [r1, #4]!
 800674c:	d8f9      	bhi.n	8006742 <__lshift+0x9a>
 800674e:	e7e4      	b.n	800671a <__lshift+0x72>

08006750 <__mcmp>:
 8006750:	6903      	ldr	r3, [r0, #16]
 8006752:	690a      	ldr	r2, [r1, #16]
 8006754:	b530      	push	{r4, r5, lr}
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	d10c      	bne.n	8006774 <__mcmp+0x24>
 800675a:	0092      	lsls	r2, r2, #2
 800675c:	3014      	adds	r0, #20
 800675e:	3114      	adds	r1, #20
 8006760:	1884      	adds	r4, r0, r2
 8006762:	4411      	add	r1, r2
 8006764:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006768:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800676c:	4295      	cmp	r5, r2
 800676e:	d003      	beq.n	8006778 <__mcmp+0x28>
 8006770:	d305      	bcc.n	800677e <__mcmp+0x2e>
 8006772:	2301      	movs	r3, #1
 8006774:	4618      	mov	r0, r3
 8006776:	bd30      	pop	{r4, r5, pc}
 8006778:	42a0      	cmp	r0, r4
 800677a:	d3f3      	bcc.n	8006764 <__mcmp+0x14>
 800677c:	e7fa      	b.n	8006774 <__mcmp+0x24>
 800677e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006782:	e7f7      	b.n	8006774 <__mcmp+0x24>

08006784 <__mdiff>:
 8006784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	460d      	mov	r5, r1
 800678a:	4607      	mov	r7, r0
 800678c:	4611      	mov	r1, r2
 800678e:	4628      	mov	r0, r5
 8006790:	4614      	mov	r4, r2
 8006792:	f7ff ffdd 	bl	8006750 <__mcmp>
 8006796:	1e06      	subs	r6, r0, #0
 8006798:	d108      	bne.n	80067ac <__mdiff+0x28>
 800679a:	4631      	mov	r1, r6
 800679c:	4638      	mov	r0, r7
 800679e:	f7ff fdc3 	bl	8006328 <_Balloc>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ac:	bfa4      	itt	ge
 80067ae:	4623      	movge	r3, r4
 80067b0:	462c      	movge	r4, r5
 80067b2:	4638      	mov	r0, r7
 80067b4:	6861      	ldr	r1, [r4, #4]
 80067b6:	bfa6      	itte	ge
 80067b8:	461d      	movge	r5, r3
 80067ba:	2600      	movge	r6, #0
 80067bc:	2601      	movlt	r6, #1
 80067be:	f7ff fdb3 	bl	8006328 <_Balloc>
 80067c2:	f04f 0e00 	mov.w	lr, #0
 80067c6:	60c6      	str	r6, [r0, #12]
 80067c8:	692b      	ldr	r3, [r5, #16]
 80067ca:	6926      	ldr	r6, [r4, #16]
 80067cc:	f104 0214 	add.w	r2, r4, #20
 80067d0:	f105 0914 	add.w	r9, r5, #20
 80067d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80067d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80067dc:	f100 0114 	add.w	r1, r0, #20
 80067e0:	f852 ab04 	ldr.w	sl, [r2], #4
 80067e4:	f859 5b04 	ldr.w	r5, [r9], #4
 80067e8:	fa1f f38a 	uxth.w	r3, sl
 80067ec:	4473      	add	r3, lr
 80067ee:	b2ac      	uxth	r4, r5
 80067f0:	1b1b      	subs	r3, r3, r4
 80067f2:	0c2c      	lsrs	r4, r5, #16
 80067f4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80067f8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006802:	45c8      	cmp	r8, r9
 8006804:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006808:	4694      	mov	ip, r2
 800680a:	f841 4b04 	str.w	r4, [r1], #4
 800680e:	d8e7      	bhi.n	80067e0 <__mdiff+0x5c>
 8006810:	45bc      	cmp	ip, r7
 8006812:	d304      	bcc.n	800681e <__mdiff+0x9a>
 8006814:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006818:	b183      	cbz	r3, 800683c <__mdiff+0xb8>
 800681a:	6106      	str	r6, [r0, #16]
 800681c:	e7c4      	b.n	80067a8 <__mdiff+0x24>
 800681e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006822:	b2a2      	uxth	r2, r4
 8006824:	4472      	add	r2, lr
 8006826:	1413      	asrs	r3, r2, #16
 8006828:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800682c:	b292      	uxth	r2, r2
 800682e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006832:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006836:	f841 2b04 	str.w	r2, [r1], #4
 800683a:	e7e9      	b.n	8006810 <__mdiff+0x8c>
 800683c:	3e01      	subs	r6, #1
 800683e:	e7e9      	b.n	8006814 <__mdiff+0x90>

08006840 <__d2b>:
 8006840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006844:	461c      	mov	r4, r3
 8006846:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800684a:	2101      	movs	r1, #1
 800684c:	4690      	mov	r8, r2
 800684e:	f7ff fd6b 	bl	8006328 <_Balloc>
 8006852:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006856:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800685a:	4607      	mov	r7, r0
 800685c:	bb34      	cbnz	r4, 80068ac <__d2b+0x6c>
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	f1b8 0200 	subs.w	r2, r8, #0
 8006864:	d027      	beq.n	80068b6 <__d2b+0x76>
 8006866:	a802      	add	r0, sp, #8
 8006868:	f840 2d08 	str.w	r2, [r0, #-8]!
 800686c:	f7ff fe01 	bl	8006472 <__lo0bits>
 8006870:	9900      	ldr	r1, [sp, #0]
 8006872:	b1f0      	cbz	r0, 80068b2 <__d2b+0x72>
 8006874:	9a01      	ldr	r2, [sp, #4]
 8006876:	f1c0 0320 	rsb	r3, r0, #32
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	430b      	orrs	r3, r1
 8006880:	40c2      	lsrs	r2, r0
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	9201      	str	r2, [sp, #4]
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	bf14      	ite	ne
 800688c:	2102      	movne	r1, #2
 800688e:	2101      	moveq	r1, #1
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	6139      	str	r1, [r7, #16]
 8006894:	b1c4      	cbz	r4, 80068c8 <__d2b+0x88>
 8006896:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800689a:	4404      	add	r4, r0
 800689c:	6034      	str	r4, [r6, #0]
 800689e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068a2:	6028      	str	r0, [r5, #0]
 80068a4:	4638      	mov	r0, r7
 80068a6:	b002      	add	sp, #8
 80068a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068b0:	e7d5      	b.n	800685e <__d2b+0x1e>
 80068b2:	6179      	str	r1, [r7, #20]
 80068b4:	e7e7      	b.n	8006886 <__d2b+0x46>
 80068b6:	a801      	add	r0, sp, #4
 80068b8:	f7ff fddb 	bl	8006472 <__lo0bits>
 80068bc:	2101      	movs	r1, #1
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	6139      	str	r1, [r7, #16]
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	3020      	adds	r0, #32
 80068c6:	e7e5      	b.n	8006894 <__d2b+0x54>
 80068c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80068d0:	6030      	str	r0, [r6, #0]
 80068d2:	6918      	ldr	r0, [r3, #16]
 80068d4:	f7ff fdae 	bl	8006434 <__hi0bits>
 80068d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80068dc:	e7e1      	b.n	80068a2 <__d2b+0x62>

080068de <_calloc_r>:
 80068de:	b538      	push	{r3, r4, r5, lr}
 80068e0:	fb02 f401 	mul.w	r4, r2, r1
 80068e4:	4621      	mov	r1, r4
 80068e6:	f000 f855 	bl	8006994 <_malloc_r>
 80068ea:	4605      	mov	r5, r0
 80068ec:	b118      	cbz	r0, 80068f6 <_calloc_r+0x18>
 80068ee:	4622      	mov	r2, r4
 80068f0:	2100      	movs	r1, #0
 80068f2:	f7fe f9f8 	bl	8004ce6 <memset>
 80068f6:	4628      	mov	r0, r5
 80068f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080068fc <_free_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4605      	mov	r5, r0
 8006900:	2900      	cmp	r1, #0
 8006902:	d043      	beq.n	800698c <_free_r+0x90>
 8006904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006908:	1f0c      	subs	r4, r1, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfb8      	it	lt
 800690e:	18e4      	addlt	r4, r4, r3
 8006910:	f000 fa27 	bl	8006d62 <__malloc_lock>
 8006914:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <_free_r+0x94>)
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	4610      	mov	r0, r2
 800691a:	b933      	cbnz	r3, 800692a <_free_r+0x2e>
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6014      	str	r4, [r2, #0]
 8006920:	4628      	mov	r0, r5
 8006922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006926:	f000 ba1d 	b.w	8006d64 <__malloc_unlock>
 800692a:	42a3      	cmp	r3, r4
 800692c:	d90b      	bls.n	8006946 <_free_r+0x4a>
 800692e:	6821      	ldr	r1, [r4, #0]
 8006930:	1862      	adds	r2, r4, r1
 8006932:	4293      	cmp	r3, r2
 8006934:	bf01      	itttt	eq
 8006936:	681a      	ldreq	r2, [r3, #0]
 8006938:	685b      	ldreq	r3, [r3, #4]
 800693a:	1852      	addeq	r2, r2, r1
 800693c:	6022      	streq	r2, [r4, #0]
 800693e:	6063      	str	r3, [r4, #4]
 8006940:	6004      	str	r4, [r0, #0]
 8006942:	e7ed      	b.n	8006920 <_free_r+0x24>
 8006944:	4613      	mov	r3, r2
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	b10a      	cbz	r2, 800694e <_free_r+0x52>
 800694a:	42a2      	cmp	r2, r4
 800694c:	d9fa      	bls.n	8006944 <_free_r+0x48>
 800694e:	6819      	ldr	r1, [r3, #0]
 8006950:	1858      	adds	r0, r3, r1
 8006952:	42a0      	cmp	r0, r4
 8006954:	d10b      	bne.n	800696e <_free_r+0x72>
 8006956:	6820      	ldr	r0, [r4, #0]
 8006958:	4401      	add	r1, r0
 800695a:	1858      	adds	r0, r3, r1
 800695c:	4282      	cmp	r2, r0
 800695e:	6019      	str	r1, [r3, #0]
 8006960:	d1de      	bne.n	8006920 <_free_r+0x24>
 8006962:	6810      	ldr	r0, [r2, #0]
 8006964:	6852      	ldr	r2, [r2, #4]
 8006966:	4401      	add	r1, r0
 8006968:	6019      	str	r1, [r3, #0]
 800696a:	605a      	str	r2, [r3, #4]
 800696c:	e7d8      	b.n	8006920 <_free_r+0x24>
 800696e:	d902      	bls.n	8006976 <_free_r+0x7a>
 8006970:	230c      	movs	r3, #12
 8006972:	602b      	str	r3, [r5, #0]
 8006974:	e7d4      	b.n	8006920 <_free_r+0x24>
 8006976:	6820      	ldr	r0, [r4, #0]
 8006978:	1821      	adds	r1, r4, r0
 800697a:	428a      	cmp	r2, r1
 800697c:	bf01      	itttt	eq
 800697e:	6811      	ldreq	r1, [r2, #0]
 8006980:	6852      	ldreq	r2, [r2, #4]
 8006982:	1809      	addeq	r1, r1, r0
 8006984:	6021      	streq	r1, [r4, #0]
 8006986:	6062      	str	r2, [r4, #4]
 8006988:	605c      	str	r4, [r3, #4]
 800698a:	e7c9      	b.n	8006920 <_free_r+0x24>
 800698c:	bd38      	pop	{r3, r4, r5, pc}
 800698e:	bf00      	nop
 8006990:	20000668 	.word	0x20000668

08006994 <_malloc_r>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	1ccd      	adds	r5, r1, #3
 8006998:	f025 0503 	bic.w	r5, r5, #3
 800699c:	3508      	adds	r5, #8
 800699e:	2d0c      	cmp	r5, #12
 80069a0:	bf38      	it	cc
 80069a2:	250c      	movcc	r5, #12
 80069a4:	2d00      	cmp	r5, #0
 80069a6:	4606      	mov	r6, r0
 80069a8:	db01      	blt.n	80069ae <_malloc_r+0x1a>
 80069aa:	42a9      	cmp	r1, r5
 80069ac:	d903      	bls.n	80069b6 <_malloc_r+0x22>
 80069ae:	230c      	movs	r3, #12
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	2000      	movs	r0, #0
 80069b4:	bd70      	pop	{r4, r5, r6, pc}
 80069b6:	f000 f9d4 	bl	8006d62 <__malloc_lock>
 80069ba:	4a21      	ldr	r2, [pc, #132]	; (8006a40 <_malloc_r+0xac>)
 80069bc:	6814      	ldr	r4, [r2, #0]
 80069be:	4621      	mov	r1, r4
 80069c0:	b991      	cbnz	r1, 80069e8 <_malloc_r+0x54>
 80069c2:	4c20      	ldr	r4, [pc, #128]	; (8006a44 <_malloc_r+0xb0>)
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	b91b      	cbnz	r3, 80069d0 <_malloc_r+0x3c>
 80069c8:	4630      	mov	r0, r6
 80069ca:	f000 f98f 	bl	8006cec <_sbrk_r>
 80069ce:	6020      	str	r0, [r4, #0]
 80069d0:	4629      	mov	r1, r5
 80069d2:	4630      	mov	r0, r6
 80069d4:	f000 f98a 	bl	8006cec <_sbrk_r>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d124      	bne.n	8006a26 <_malloc_r+0x92>
 80069dc:	230c      	movs	r3, #12
 80069de:	4630      	mov	r0, r6
 80069e0:	6033      	str	r3, [r6, #0]
 80069e2:	f000 f9bf 	bl	8006d64 <__malloc_unlock>
 80069e6:	e7e4      	b.n	80069b2 <_malloc_r+0x1e>
 80069e8:	680b      	ldr	r3, [r1, #0]
 80069ea:	1b5b      	subs	r3, r3, r5
 80069ec:	d418      	bmi.n	8006a20 <_malloc_r+0x8c>
 80069ee:	2b0b      	cmp	r3, #11
 80069f0:	d90f      	bls.n	8006a12 <_malloc_r+0x7e>
 80069f2:	600b      	str	r3, [r1, #0]
 80069f4:	18cc      	adds	r4, r1, r3
 80069f6:	50cd      	str	r5, [r1, r3]
 80069f8:	4630      	mov	r0, r6
 80069fa:	f000 f9b3 	bl	8006d64 <__malloc_unlock>
 80069fe:	f104 000b 	add.w	r0, r4, #11
 8006a02:	1d23      	adds	r3, r4, #4
 8006a04:	f020 0007 	bic.w	r0, r0, #7
 8006a08:	1ac3      	subs	r3, r0, r3
 8006a0a:	d0d3      	beq.n	80069b4 <_malloc_r+0x20>
 8006a0c:	425a      	negs	r2, r3
 8006a0e:	50e2      	str	r2, [r4, r3]
 8006a10:	e7d0      	b.n	80069b4 <_malloc_r+0x20>
 8006a12:	684b      	ldr	r3, [r1, #4]
 8006a14:	428c      	cmp	r4, r1
 8006a16:	bf16      	itet	ne
 8006a18:	6063      	strne	r3, [r4, #4]
 8006a1a:	6013      	streq	r3, [r2, #0]
 8006a1c:	460c      	movne	r4, r1
 8006a1e:	e7eb      	b.n	80069f8 <_malloc_r+0x64>
 8006a20:	460c      	mov	r4, r1
 8006a22:	6849      	ldr	r1, [r1, #4]
 8006a24:	e7cc      	b.n	80069c0 <_malloc_r+0x2c>
 8006a26:	1cc4      	adds	r4, r0, #3
 8006a28:	f024 0403 	bic.w	r4, r4, #3
 8006a2c:	42a0      	cmp	r0, r4
 8006a2e:	d005      	beq.n	8006a3c <_malloc_r+0xa8>
 8006a30:	1a21      	subs	r1, r4, r0
 8006a32:	4630      	mov	r0, r6
 8006a34:	f000 f95a 	bl	8006cec <_sbrk_r>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d0cf      	beq.n	80069dc <_malloc_r+0x48>
 8006a3c:	6025      	str	r5, [r4, #0]
 8006a3e:	e7db      	b.n	80069f8 <_malloc_r+0x64>
 8006a40:	20000668 	.word	0x20000668
 8006a44:	2000066c 	.word	0x2000066c

08006a48 <__ssputs_r>:
 8006a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	688e      	ldr	r6, [r1, #8]
 8006a4e:	4682      	mov	sl, r0
 8006a50:	429e      	cmp	r6, r3
 8006a52:	460c      	mov	r4, r1
 8006a54:	4690      	mov	r8, r2
 8006a56:	4699      	mov	r9, r3
 8006a58:	d837      	bhi.n	8006aca <__ssputs_r+0x82>
 8006a5a:	898a      	ldrh	r2, [r1, #12]
 8006a5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a60:	d031      	beq.n	8006ac6 <__ssputs_r+0x7e>
 8006a62:	2302      	movs	r3, #2
 8006a64:	6825      	ldr	r5, [r4, #0]
 8006a66:	6909      	ldr	r1, [r1, #16]
 8006a68:	1a6f      	subs	r7, r5, r1
 8006a6a:	6965      	ldr	r5, [r4, #20]
 8006a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a70:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a74:	f109 0301 	add.w	r3, r9, #1
 8006a78:	443b      	add	r3, r7
 8006a7a:	429d      	cmp	r5, r3
 8006a7c:	bf38      	it	cc
 8006a7e:	461d      	movcc	r5, r3
 8006a80:	0553      	lsls	r3, r2, #21
 8006a82:	d530      	bpl.n	8006ae6 <__ssputs_r+0x9e>
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7ff ff85 	bl	8006994 <_malloc_r>
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	b950      	cbnz	r0, 8006aa4 <__ssputs_r+0x5c>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a94:	f8ca 3000 	str.w	r3, [sl]
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa4:	463a      	mov	r2, r7
 8006aa6:	6921      	ldr	r1, [r4, #16]
 8006aa8:	f7fe f912 	bl	8004cd0 <memcpy>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	6126      	str	r6, [r4, #16]
 8006aba:	443e      	add	r6, r7
 8006abc:	6026      	str	r6, [r4, #0]
 8006abe:	464e      	mov	r6, r9
 8006ac0:	6165      	str	r5, [r4, #20]
 8006ac2:	1bed      	subs	r5, r5, r7
 8006ac4:	60a5      	str	r5, [r4, #8]
 8006ac6:	454e      	cmp	r6, r9
 8006ac8:	d900      	bls.n	8006acc <__ssputs_r+0x84>
 8006aca:	464e      	mov	r6, r9
 8006acc:	4632      	mov	r2, r6
 8006ace:	4641      	mov	r1, r8
 8006ad0:	6820      	ldr	r0, [r4, #0]
 8006ad2:	f000 f92d 	bl	8006d30 <memmove>
 8006ad6:	68a3      	ldr	r3, [r4, #8]
 8006ad8:	2000      	movs	r0, #0
 8006ada:	1b9b      	subs	r3, r3, r6
 8006adc:	60a3      	str	r3, [r4, #8]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	441e      	add	r6, r3
 8006ae2:	6026      	str	r6, [r4, #0]
 8006ae4:	e7dc      	b.n	8006aa0 <__ssputs_r+0x58>
 8006ae6:	462a      	mov	r2, r5
 8006ae8:	f000 f93d 	bl	8006d66 <_realloc_r>
 8006aec:	4606      	mov	r6, r0
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d1e2      	bne.n	8006ab8 <__ssputs_r+0x70>
 8006af2:	6921      	ldr	r1, [r4, #16]
 8006af4:	4650      	mov	r0, sl
 8006af6:	f7ff ff01 	bl	80068fc <_free_r>
 8006afa:	e7c8      	b.n	8006a8e <__ssputs_r+0x46>

08006afc <_svfiprintf_r>:
 8006afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b00:	461d      	mov	r5, r3
 8006b02:	898b      	ldrh	r3, [r1, #12]
 8006b04:	b09d      	sub	sp, #116	; 0x74
 8006b06:	061f      	lsls	r7, r3, #24
 8006b08:	4680      	mov	r8, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	d50f      	bpl.n	8006b30 <_svfiprintf_r+0x34>
 8006b10:	690b      	ldr	r3, [r1, #16]
 8006b12:	b96b      	cbnz	r3, 8006b30 <_svfiprintf_r+0x34>
 8006b14:	2140      	movs	r1, #64	; 0x40
 8006b16:	f7ff ff3d 	bl	8006994 <_malloc_r>
 8006b1a:	6020      	str	r0, [r4, #0]
 8006b1c:	6120      	str	r0, [r4, #16]
 8006b1e:	b928      	cbnz	r0, 8006b2c <_svfiprintf_r+0x30>
 8006b20:	230c      	movs	r3, #12
 8006b22:	f8c8 3000 	str.w	r3, [r8]
 8006b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b2a:	e0c8      	b.n	8006cbe <_svfiprintf_r+0x1c2>
 8006b2c:	2340      	movs	r3, #64	; 0x40
 8006b2e:	6163      	str	r3, [r4, #20]
 8006b30:	2300      	movs	r3, #0
 8006b32:	9309      	str	r3, [sp, #36]	; 0x24
 8006b34:	2320      	movs	r3, #32
 8006b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b3a:	2330      	movs	r3, #48	; 0x30
 8006b3c:	f04f 0b01 	mov.w	fp, #1
 8006b40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b44:	9503      	str	r5, [sp, #12]
 8006b46:	4637      	mov	r7, r6
 8006b48:	463d      	mov	r5, r7
 8006b4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b4e:	b10b      	cbz	r3, 8006b54 <_svfiprintf_r+0x58>
 8006b50:	2b25      	cmp	r3, #37	; 0x25
 8006b52:	d13e      	bne.n	8006bd2 <_svfiprintf_r+0xd6>
 8006b54:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b58:	d00b      	beq.n	8006b72 <_svfiprintf_r+0x76>
 8006b5a:	4653      	mov	r3, sl
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4640      	mov	r0, r8
 8006b62:	f7ff ff71 	bl	8006a48 <__ssputs_r>
 8006b66:	3001      	adds	r0, #1
 8006b68:	f000 80a4 	beq.w	8006cb4 <_svfiprintf_r+0x1b8>
 8006b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6e:	4453      	add	r3, sl
 8006b70:	9309      	str	r3, [sp, #36]	; 0x24
 8006b72:	783b      	ldrb	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 809d 	beq.w	8006cb4 <_svfiprintf_r+0x1b8>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b84:	9304      	str	r3, [sp, #16]
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b8e:	462f      	mov	r7, r5
 8006b90:	2205      	movs	r2, #5
 8006b92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b96:	4850      	ldr	r0, [pc, #320]	; (8006cd8 <_svfiprintf_r+0x1dc>)
 8006b98:	f7ff fbb8 	bl	800630c <memchr>
 8006b9c:	9b04      	ldr	r3, [sp, #16]
 8006b9e:	b9d0      	cbnz	r0, 8006bd6 <_svfiprintf_r+0xda>
 8006ba0:	06d9      	lsls	r1, r3, #27
 8006ba2:	bf44      	itt	mi
 8006ba4:	2220      	movmi	r2, #32
 8006ba6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006baa:	071a      	lsls	r2, r3, #28
 8006bac:	bf44      	itt	mi
 8006bae:	222b      	movmi	r2, #43	; 0x2b
 8006bb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bb4:	782a      	ldrb	r2, [r5, #0]
 8006bb6:	2a2a      	cmp	r2, #42	; 0x2a
 8006bb8:	d015      	beq.n	8006be6 <_svfiprintf_r+0xea>
 8006bba:	462f      	mov	r7, r5
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	250a      	movs	r5, #10
 8006bc0:	9a07      	ldr	r2, [sp, #28]
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bc8:	3b30      	subs	r3, #48	; 0x30
 8006bca:	2b09      	cmp	r3, #9
 8006bcc:	d94d      	bls.n	8006c6a <_svfiprintf_r+0x16e>
 8006bce:	b1b8      	cbz	r0, 8006c00 <_svfiprintf_r+0x104>
 8006bd0:	e00f      	b.n	8006bf2 <_svfiprintf_r+0xf6>
 8006bd2:	462f      	mov	r7, r5
 8006bd4:	e7b8      	b.n	8006b48 <_svfiprintf_r+0x4c>
 8006bd6:	4a40      	ldr	r2, [pc, #256]	; (8006cd8 <_svfiprintf_r+0x1dc>)
 8006bd8:	463d      	mov	r5, r7
 8006bda:	1a80      	subs	r0, r0, r2
 8006bdc:	fa0b f000 	lsl.w	r0, fp, r0
 8006be0:	4318      	orrs	r0, r3
 8006be2:	9004      	str	r0, [sp, #16]
 8006be4:	e7d3      	b.n	8006b8e <_svfiprintf_r+0x92>
 8006be6:	9a03      	ldr	r2, [sp, #12]
 8006be8:	1d11      	adds	r1, r2, #4
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	9103      	str	r1, [sp, #12]
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	db01      	blt.n	8006bf6 <_svfiprintf_r+0xfa>
 8006bf2:	9207      	str	r2, [sp, #28]
 8006bf4:	e004      	b.n	8006c00 <_svfiprintf_r+0x104>
 8006bf6:	4252      	negs	r2, r2
 8006bf8:	f043 0302 	orr.w	r3, r3, #2
 8006bfc:	9207      	str	r2, [sp, #28]
 8006bfe:	9304      	str	r3, [sp, #16]
 8006c00:	783b      	ldrb	r3, [r7, #0]
 8006c02:	2b2e      	cmp	r3, #46	; 0x2e
 8006c04:	d10c      	bne.n	8006c20 <_svfiprintf_r+0x124>
 8006c06:	787b      	ldrb	r3, [r7, #1]
 8006c08:	2b2a      	cmp	r3, #42	; 0x2a
 8006c0a:	d133      	bne.n	8006c74 <_svfiprintf_r+0x178>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	3702      	adds	r7, #2
 8006c10:	1d1a      	adds	r2, r3, #4
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	9203      	str	r2, [sp, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bfb8      	it	lt
 8006c1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c1e:	9305      	str	r3, [sp, #20]
 8006c20:	4d2e      	ldr	r5, [pc, #184]	; (8006cdc <_svfiprintf_r+0x1e0>)
 8006c22:	2203      	movs	r2, #3
 8006c24:	7839      	ldrb	r1, [r7, #0]
 8006c26:	4628      	mov	r0, r5
 8006c28:	f7ff fb70 	bl	800630c <memchr>
 8006c2c:	b138      	cbz	r0, 8006c3e <_svfiprintf_r+0x142>
 8006c2e:	2340      	movs	r3, #64	; 0x40
 8006c30:	1b40      	subs	r0, r0, r5
 8006c32:	fa03 f000 	lsl.w	r0, r3, r0
 8006c36:	9b04      	ldr	r3, [sp, #16]
 8006c38:	3701      	adds	r7, #1
 8006c3a:	4303      	orrs	r3, r0
 8006c3c:	9304      	str	r3, [sp, #16]
 8006c3e:	7839      	ldrb	r1, [r7, #0]
 8006c40:	2206      	movs	r2, #6
 8006c42:	4827      	ldr	r0, [pc, #156]	; (8006ce0 <_svfiprintf_r+0x1e4>)
 8006c44:	1c7e      	adds	r6, r7, #1
 8006c46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c4a:	f7ff fb5f 	bl	800630c <memchr>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d038      	beq.n	8006cc4 <_svfiprintf_r+0x1c8>
 8006c52:	4b24      	ldr	r3, [pc, #144]	; (8006ce4 <_svfiprintf_r+0x1e8>)
 8006c54:	bb13      	cbnz	r3, 8006c9c <_svfiprintf_r+0x1a0>
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	3307      	adds	r3, #7
 8006c5a:	f023 0307 	bic.w	r3, r3, #7
 8006c5e:	3308      	adds	r3, #8
 8006c60:	9303      	str	r3, [sp, #12]
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	444b      	add	r3, r9
 8006c66:	9309      	str	r3, [sp, #36]	; 0x24
 8006c68:	e76d      	b.n	8006b46 <_svfiprintf_r+0x4a>
 8006c6a:	fb05 3202 	mla	r2, r5, r2, r3
 8006c6e:	2001      	movs	r0, #1
 8006c70:	460f      	mov	r7, r1
 8006c72:	e7a6      	b.n	8006bc2 <_svfiprintf_r+0xc6>
 8006c74:	2300      	movs	r3, #0
 8006c76:	250a      	movs	r5, #10
 8006c78:	4619      	mov	r1, r3
 8006c7a:	3701      	adds	r7, #1
 8006c7c:	9305      	str	r3, [sp, #20]
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c84:	3a30      	subs	r2, #48	; 0x30
 8006c86:	2a09      	cmp	r2, #9
 8006c88:	d903      	bls.n	8006c92 <_svfiprintf_r+0x196>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0c8      	beq.n	8006c20 <_svfiprintf_r+0x124>
 8006c8e:	9105      	str	r1, [sp, #20]
 8006c90:	e7c6      	b.n	8006c20 <_svfiprintf_r+0x124>
 8006c92:	fb05 2101 	mla	r1, r5, r1, r2
 8006c96:	2301      	movs	r3, #1
 8006c98:	4607      	mov	r7, r0
 8006c9a:	e7f0      	b.n	8006c7e <_svfiprintf_r+0x182>
 8006c9c:	ab03      	add	r3, sp, #12
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	4622      	mov	r2, r4
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <_svfiprintf_r+0x1ec>)
 8006ca4:	a904      	add	r1, sp, #16
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	f7fe f8b6 	bl	8004e18 <_printf_float>
 8006cac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006cb0:	4681      	mov	r9, r0
 8006cb2:	d1d6      	bne.n	8006c62 <_svfiprintf_r+0x166>
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	065b      	lsls	r3, r3, #25
 8006cb8:	f53f af35 	bmi.w	8006b26 <_svfiprintf_r+0x2a>
 8006cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cbe:	b01d      	add	sp, #116	; 0x74
 8006cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc4:	ab03      	add	r3, sp, #12
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	4622      	mov	r2, r4
 8006cca:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <_svfiprintf_r+0x1ec>)
 8006ccc:	a904      	add	r1, sp, #16
 8006cce:	4640      	mov	r0, r8
 8006cd0:	f7fe fb4e 	bl	8005370 <_printf_i>
 8006cd4:	e7ea      	b.n	8006cac <_svfiprintf_r+0x1b0>
 8006cd6:	bf00      	nop
 8006cd8:	08006fe4 	.word	0x08006fe4
 8006cdc:	08006fea 	.word	0x08006fea
 8006ce0:	08006fee 	.word	0x08006fee
 8006ce4:	08004e19 	.word	0x08004e19
 8006ce8:	08006a49 	.word	0x08006a49

08006cec <_sbrk_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	2300      	movs	r3, #0
 8006cf0:	4c05      	ldr	r4, [pc, #20]	; (8006d08 <_sbrk_r+0x1c>)
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	f7fa feb0 	bl	8001a5c <_sbrk>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_sbrk_r+0x1a>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_sbrk_r+0x1a>
 8006d04:	602b      	str	r3, [r5, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	200015f4 	.word	0x200015f4

08006d0c <__ascii_mbtowc>:
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	b901      	cbnz	r1, 8006d12 <__ascii_mbtowc+0x6>
 8006d10:	a901      	add	r1, sp, #4
 8006d12:	b142      	cbz	r2, 8006d26 <__ascii_mbtowc+0x1a>
 8006d14:	b14b      	cbz	r3, 8006d2a <__ascii_mbtowc+0x1e>
 8006d16:	7813      	ldrb	r3, [r2, #0]
 8006d18:	600b      	str	r3, [r1, #0]
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	1c10      	adds	r0, r2, #0
 8006d1e:	bf18      	it	ne
 8006d20:	2001      	movne	r0, #1
 8006d22:	b002      	add	sp, #8
 8006d24:	4770      	bx	lr
 8006d26:	4610      	mov	r0, r2
 8006d28:	e7fb      	b.n	8006d22 <__ascii_mbtowc+0x16>
 8006d2a:	f06f 0001 	mvn.w	r0, #1
 8006d2e:	e7f8      	b.n	8006d22 <__ascii_mbtowc+0x16>

08006d30 <memmove>:
 8006d30:	4288      	cmp	r0, r1
 8006d32:	b510      	push	{r4, lr}
 8006d34:	eb01 0302 	add.w	r3, r1, r2
 8006d38:	d807      	bhi.n	8006d4a <memmove+0x1a>
 8006d3a:	1e42      	subs	r2, r0, #1
 8006d3c:	4299      	cmp	r1, r3
 8006d3e:	d00a      	beq.n	8006d56 <memmove+0x26>
 8006d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d44:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d48:	e7f8      	b.n	8006d3c <memmove+0xc>
 8006d4a:	4283      	cmp	r3, r0
 8006d4c:	d9f5      	bls.n	8006d3a <memmove+0xa>
 8006d4e:	1881      	adds	r1, r0, r2
 8006d50:	1ad2      	subs	r2, r2, r3
 8006d52:	42d3      	cmn	r3, r2
 8006d54:	d100      	bne.n	8006d58 <memmove+0x28>
 8006d56:	bd10      	pop	{r4, pc}
 8006d58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d60:	e7f7      	b.n	8006d52 <memmove+0x22>

08006d62 <__malloc_lock>:
 8006d62:	4770      	bx	lr

08006d64 <__malloc_unlock>:
 8006d64:	4770      	bx	lr

08006d66 <_realloc_r>:
 8006d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d68:	4607      	mov	r7, r0
 8006d6a:	4614      	mov	r4, r2
 8006d6c:	460e      	mov	r6, r1
 8006d6e:	b921      	cbnz	r1, 8006d7a <_realloc_r+0x14>
 8006d70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d74:	4611      	mov	r1, r2
 8006d76:	f7ff be0d 	b.w	8006994 <_malloc_r>
 8006d7a:	b922      	cbnz	r2, 8006d86 <_realloc_r+0x20>
 8006d7c:	f7ff fdbe 	bl	80068fc <_free_r>
 8006d80:	4625      	mov	r5, r4
 8006d82:	4628      	mov	r0, r5
 8006d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d86:	f000 f821 	bl	8006dcc <_malloc_usable_size_r>
 8006d8a:	42a0      	cmp	r0, r4
 8006d8c:	d20f      	bcs.n	8006dae <_realloc_r+0x48>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4638      	mov	r0, r7
 8006d92:	f7ff fdff 	bl	8006994 <_malloc_r>
 8006d96:	4605      	mov	r5, r0
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d0f2      	beq.n	8006d82 <_realloc_r+0x1c>
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4622      	mov	r2, r4
 8006da0:	f7fd ff96 	bl	8004cd0 <memcpy>
 8006da4:	4631      	mov	r1, r6
 8006da6:	4638      	mov	r0, r7
 8006da8:	f7ff fda8 	bl	80068fc <_free_r>
 8006dac:	e7e9      	b.n	8006d82 <_realloc_r+0x1c>
 8006dae:	4635      	mov	r5, r6
 8006db0:	e7e7      	b.n	8006d82 <_realloc_r+0x1c>

08006db2 <__ascii_wctomb>:
 8006db2:	b149      	cbz	r1, 8006dc8 <__ascii_wctomb+0x16>
 8006db4:	2aff      	cmp	r2, #255	; 0xff
 8006db6:	bf8b      	itete	hi
 8006db8:	238a      	movhi	r3, #138	; 0x8a
 8006dba:	700a      	strbls	r2, [r1, #0]
 8006dbc:	6003      	strhi	r3, [r0, #0]
 8006dbe:	2001      	movls	r0, #1
 8006dc0:	bf88      	it	hi
 8006dc2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006dc6:	4770      	bx	lr
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4770      	bx	lr

08006dcc <_malloc_usable_size_r>:
 8006dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd0:	1f18      	subs	r0, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bfbc      	itt	lt
 8006dd6:	580b      	ldrlt	r3, [r1, r0]
 8006dd8:	18c0      	addlt	r0, r0, r3
 8006dda:	4770      	bx	lr

08006ddc <_init>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr

08006de8 <_fini>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr
